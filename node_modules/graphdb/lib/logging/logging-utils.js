"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Utilities related to logging.
 *
 * @author Mihail Radkov
 */
var LoggingUtils = /*#__PURE__*/function () {
  function LoggingUtils() {
    _classCallCheck(this, LoggingUtils);
  }
  _createClass(LoggingUtils, null, [{
    key: "getLogPayload",
    /**
     * Creates an object from the provided HTTP response that is suitable for
     * structured logging.
     *
     * Any additional key-value entries from <code>params</code> will be assigned
     * in the created payload object.
     *
     * @param {HttpResponse} response the HTTP response.
     * Used to get the execution time and the base URL
     * @param {object} [params] additional parameters to be appended
     * @return {object} the constructed payload object for logging
     */
    value: function getLogPayload(response) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var payload = {
        elapsedTime: response.getElapsedTime(),
        repositoryUrl: response.getBaseURL()
      };
      Object.assign(payload, params);
      return payload;
    }
  }]);
  return LoggingUtils;
}();
module.exports = LoggingUtils;