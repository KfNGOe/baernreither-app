export = StatementPayload;
/**
 * Abstract class for constructing a statement payload consisted of:
 * <ul>
 *  <li>subject</li>
 *  <li>predicate</li>
 *  <li>object</li>
 *  <li>context or contexts</li>
 * </ul>
 *
 * @class
 * @abstract
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
declare class StatementPayload {
    payload: {};
    /**
     * @param {string} [subject]
     * @return {StatementPayload}
     */
    setSubject(subject?: string): StatementPayload;
    /**
     * @return {string} subject
     */
    getSubject(): string;
    /**
     * @param {string} [predicate]
     * @return {StatementPayload}
     */
    setPredicate(predicate?: string): StatementPayload;
    /**
     * @return {string} predicate
     */
    getPredicate(): string;
    /**
     * @param {string} [object]
     * @return {StatementPayload}
     */
    setObject(object?: string): StatementPayload;
    /**
     * @return {string} object
     */
    getObject(): string;
    /**
     * @param {(string|string[])} [context]
     * @return {StatementPayload}
     */
    setContext(context?: (string | string[])): StatementPayload;
    /**
     * @return {string} context
     */
    getContext(): string;
    /**
     * Get the payload object.
     * @return {Object}
     */
    get(): any;
}
