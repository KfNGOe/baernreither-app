"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var StatementPayload = require('../repository/statement-payload');
var RDFMimeType = require('../http/rdf-mime-type');

/**
 * Payload object holding all request parameters applicable for the statements
 * endpoint.
 * <code>new GetStatementsPayload().setSubject('<http://ns>')
 *  .setInference(true).get()</code> returns a constructed payload <code>
 * { subject: '<http://ns>', inference: true }</code>
 *
 * By default <code>responseType</code> is set to
 * <code>application/rdf+json</code>.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
var GetStatementsPayload = /*#__PURE__*/function (_StatementPayload) {
  _inherits(GetStatementsPayload, _StatementPayload);
  var _super = _createSuper(GetStatementsPayload);
  /**
   * Constructs this payload class populating some reasonable defaults.
   */
  function GetStatementsPayload() {
    var _this;
    _classCallCheck(this, GetStatementsPayload);
    _this = _super.call(this);
    _this.setResponseType(RDFMimeType.RDF_JSON);
    return _this;
  }

  /**
   * @param {boolean} [inference] defines if inferred statements should be
   *      included in the result of GET requests.
   * @return {GetStatementsPayload}
   */
  _createClass(GetStatementsPayload, [{
    key: "setInference",
    value: function setInference(inference) {
      this.payload.inference = inference;
      return this;
    }
    /**
     * @return {boolean} inference
     */
  }, {
    key: "getInference",
    value: function getInference() {
      return this.payload.inference;
    }
    /**
     * Sets responseType parameter.
     * @param {RDFMimeType} [responseType]
     * @return {GetStatementsPayload}
     */
  }, {
    key: "setResponseType",
    value: function setResponseType(responseType) {
      this.payload.responseType = responseType;
      return this;
    }
    /**
     * @return {string} responseType
     */
  }, {
    key: "getResponseType",
    value: function getResponseType() {
      return this.payload.responseType;
    }
  }]);
  return GetStatementsPayload;
}(StatementPayload);
module.exports = GetStatementsPayload;