"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Abstract class for constructing a statement payload consisted of:
 * <ul>
 *  <li>subject</li>
 *  <li>predicate</li>
 *  <li>object</li>
 *  <li>context or contexts</li>
 * </ul>
 *
 * @class
 * @abstract
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
var StatementPayload = /*#__PURE__*/function () {
  /**
   * Instantiates new statement payload.
   */
  function StatementPayload() {
    _classCallCheck(this, StatementPayload);
    this.payload = {};
  }

  /**
   * @param {string} [subject]
   * @return {StatementPayload}
   */
  _createClass(StatementPayload, [{
    key: "setSubject",
    value: function setSubject(subject) {
      this.payload.subject = subject;
      return this;
    }
    /**
     * @return {string} subject
     */
  }, {
    key: "getSubject",
    value: function getSubject() {
      return this.payload.subject;
    }
    /**
     * @param {string} [predicate]
     * @return {StatementPayload}
     */
  }, {
    key: "setPredicate",
    value: function setPredicate(predicate) {
      this.payload.predicate = predicate;
      return this;
    }
    /**
     * @return {string} predicate
     */
  }, {
    key: "getPredicate",
    value: function getPredicate() {
      return this.payload.predicate;
    }
    /**
     * @param {string} [object]
     * @return {StatementPayload}
     */
  }, {
    key: "setObject",
    value: function setObject(object) {
      this.payload.object = object;
      return this;
    }
    /**
     * @return {string} object
     */
  }, {
    key: "getObject",
    value: function getObject() {
      return this.payload.object;
    }
    /**
     * @param {(string|string[])} [context]
     * @return {StatementPayload}
     */
  }, {
    key: "setContext",
    value: function setContext(context) {
      this.payload.context = context;
      return this;
    }
    /**
     * @return {string} context
     */
  }, {
    key: "getContext",
    value: function getContext() {
      return this.payload.context;
    }
    /**
     * Get the payload object.
     * @return {Object}
     */
  }, {
    key: "get",
    value: function get() {
      return this.payload;
    }
  }]);
  return StatementPayload;
}();
module.exports = StatementPayload;