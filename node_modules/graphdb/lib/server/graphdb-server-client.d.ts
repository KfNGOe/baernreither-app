export = GraphDBServerClient;
/**
 * Implementation of the graphDB server operations.
 *
 *  Used to automate the security user management API:
 *  add, edit, or remove users.  Also used to add, edit,
 *  or remove a repository to/from any attached location.
 *  You can work with multiple remote locations from a
 *  single access point.
 *
 *  @class
 *  @author Teodossi Dossev
 *
 */
declare class GraphDBServerClient extends ServerClient {
    /**
     * Get the default repository configuration for the repository type
     *
     * @param {RepositoryType|String} repositoryType the type for which a
     * default configuration is required
     * @return {Promise<HttpResponse|Error>} a promise which resolves to response
     * wrapper or rejects with error if thrown during execution.
     */
    getDefaultConfig(repositoryType: RepositoryType | string): Promise<HttpResponse | Error>;
    /**
     * Get the repository configuration
     *
     * @param {string} repositoryId the repository id
     * @param {string} [location] optional repository location
     * @return {Promise<HttpResponse|string|Error>} a promise which resolves
     * to response wrapper or rejects with error if thrown during execution.
     */
    getRepositoryConfig(repositoryId: string, location?: string): Promise<HttpResponse | string | Error>;
    /**
     * Download the repository configuration in turtle format
     * @param {string} repositoryId the repository id
     * @param {string} [location] optional repository location
     * @return {Promise<string | any>} a service request that will resolve to a
     * readable stream to which the client can subscribe and consume the emitted
     * strings as soon as they are available. Resolves to turtle format.
     */
    downloadRepositoryConfig(repositoryId: string, location?: string): Promise<string | any>;
    /**
     * Create repository according to the provided configuration
     * @param {RepositoryConfig} repositoryConfig
     * @return {Promise<HttpResponse|Error>} a promise which resolves
     * to response wrapper or rejects with error if thrown during execution.
     */
    createRepository(repositoryConfig: RepositoryConfig): Promise<HttpResponse | Error>;
    /**
     * Checks if GraphDB security is enabled.
     * @return {Promise<HttpResponse|Error>} a promise which resolves
     * to response wrapper or rejects with error if thrown during execution.
     */
    isSecurityEnabled(): Promise<HttpResponse | Error>;
    /**
     * Enable or disable GraphDB security.
     * @param {boolean} enabled <code>true</code> if security is enabled and
     * <code>false</code> otherwise.
     * @return {Promise<HttpResponse|Error>} a promise which resolves
     * to response wrapper or rejects with error if thrown during execution.
     */
    toggleSecurity(enabled: boolean): Promise<HttpResponse | Error>;
    /**
     * Enable or disable access to a predefined set of functionalities
     * without having to log in.
     * To use free access, you must have security enabled.
     * Use with extreme caution, as the changes that are made to the
     * application settings may possibly change the behavior of the
     * GraphDB Workbench for the logged-in user or for all users
     * if logged in as admin.
     * @param {boolean} enabled <code>true</code> if free access is enabled and
     * <code>false</code> otherwise.
     * @param {string[]} authorities Array of read and/or write access rights
     * described in the following template:
     * <code>READ_REPO_{repository ID}</code> to grant repository read rights
     * <code>WRITE_REPO_{repository ID}</code> to grant repository write rights
     * @param {AppSettings} appSettings configure the default behavior
     * of the GraphDB Workbench
     * @return {Promise<HttpResponse|Error>} a promise which resolves
     * to response wrapper or rejects with error if thrown during execution.
     */
    updateFreeAccess(enabled: boolean, authorities: string[], appSettings: AppSettings): Promise<HttpResponse | Error>;
    /**
     * Check if free access is enabled
     * @return {Promise<HttpResponse|Error>} a promise which resolves
     * to response wrapper or rejects with error if thrown during execution.
     */
    getFreeAccess(): Promise<HttpResponse | Error>;
    /**
     * Create a user
     * @param {string} username User name
     * @param {string} password User password
     * @param {string[]} [grantedAuthorities] Array of read and/or write access
     * rights described in the following template:
     * <code>READ_REPO_{repository ID}</code> to grant repository read rights
     * <code>WRITE_REPO_{repository ID}</code> to grant repository write rights
     * @param {AppSettings} [appSettings] configure the default behavior
     * of the GraphDB Workbench
     * @return {Promise<HttpResponse|Error>} a promise which resolves
     * to response wrapper or rejects with error if thrown during execution.
     */
    createUser(username: string, password: string, grantedAuthorities?: string[], appSettings?: AppSettings): Promise<HttpResponse | Error>;
    /**
     * Edit user.
     * Use with extreme caution, as the changes that are made to the
     * application settings may possibly change the behavior of the
     * GraphDB Workbench for the user.
     * @param {string} username User name
     * @param {string} [password] User password
     * @param {string[]} [grantedAuthorities] Array of read and/or write access
     * rights described in the following template:
     * <code>READ_REPO_{repository ID}</code> to grant repository read rights
     * <code>WRITE_REPO_{repository ID}</code> to grant repository write rights
     * @param {AppSettings} [appSettings] configure the default behavior
     * of the GraphDB Workbench
     * @return {Promise<HttpResponse|Error>} a promise which resolves
     * to response wrapper or rejects with error if thrown during execution.
     */
    updateUser(username: string, password?: string, grantedAuthorities?: string[], appSettings?: AppSettings): Promise<HttpResponse | Error>;
    /**
     * Change setting for a logged user.
     * Use with extreme caution, as the changes that are made to the
     * application settings may possibly change the behavior of the
     * GraphDB Workbench for the user.
     * @param {string} username User name
     * @param {string} [password] User password
     * @param {AppSettings} [appSettings] configure the default behavior
     * of the GraphDB Workbench
     * @return {Promise<HttpResponse|Error>} a promise which resolves
     * to response wrapper or rejects with error if thrown during execution.
     */
    updateUserData(username: string, password?: string, appSettings?: AppSettings): Promise<HttpResponse | Error>;
    /**
     * Get a user
     * @param {string} username User name
     * @return {Promise<HttpResponse|Error>} a promise which resolves
     * to response wrapper or rejects with error if thrown during execution.
     */
    getUser(username: string): Promise<HttpResponse | Error>;
    /**
     * Deletes a user
     * @param {string} username User name
     * @return {Promise<HttpResponse|Error>} a promise which resolves
     * to response wrapper or rejects with error if thrown during execution.
     */
    deleteUser(username: string): Promise<HttpResponse | Error>;
    /**
     * @private
     * @param {Object} object to get json from
     * @return {string | {}} json representation of object
     * or empty object if undefined
     */
    private objectToJson;
}
import ServerClient = require("./server-client");
