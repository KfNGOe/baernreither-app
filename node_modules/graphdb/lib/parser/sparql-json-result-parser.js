"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var ContentParser = require('../parser/content-parser');
var RDFMimeType = require('../http/rdf-mime-type');
var QueryType = require('../query/query-type');
var _require = require('sparqljson-parse'),
  SparqlJsonParser = _require.SparqlJsonParser;
var DataFactory = require('n3').DataFactory;

/**
 * Parse a sparql tuple query json result and convert it RDFJS-based
 * data structure.
 *
 * A custom parser library is used for the parsing. Also the N3 DataFactory is
 * used for building the data objects instead of the native RDFJS datafactory as
 * there are some minor discrepancies in between them and we already stuck to N3
 * as a default implementation.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
var SparqlJsonResultParser = /*#__PURE__*/function (_ContentParser) {
  _inherits(SparqlJsonResultParser, _ContentParser);
  var _super = _createSuper(SparqlJsonResultParser);
  /**
   * @param {Object} config is an object containing the parser configuration.
   */
  function SparqlJsonResultParser(config) {
    var _this;
    _classCallCheck(this, SparqlJsonResultParser);
    _this = _super.call(this, config);
    _this.parser = new SparqlJsonParser({
      dataFactory: DataFactory
    });
    return _this;
  }

  /**
   * This method should be invoked with a text stream and will return also a
   * stream converted to RDFJS objects.
   *
   * Client of the method can subscribe to following events in order to consume
   * the stream:
   * <code>
   * stream.on('variables', (variables) => console.log(variables));
   * stream.on('data', (bindings) => console.log(bindings));
   * stream.on('error', (error) => console.log(error));
   * </code>
   *
   * @param {NodeJS.ReadableStream} stream with the text which has to be parsed
   * to given format.
   * @param {Object} [config] optional parser configuration.
   * @return {NodeJS.ReadableStream|Promise<boolean>} a stream with the
   * converted content for SELECT queries and a Promise which resolves to
   * boolean value for ASK queries.
   */
  _createClass(SparqlJsonResultParser, [{
    key: "parse",
    value: function parse(stream, config) {
      if (config.queryType === QueryType.ASK) {
        return this.parser.parseJsonBooleanStream(stream);
      }
      return this.parser.parseJsonResultsStream(stream);
    }
    /**
     * @inheritDoc
     */
  }, {
    key: "getSupportedType",
    value: function getSupportedType() {
      return RDFMimeType.SPARQL_RESULTS_JSON;
    }
    /**
     * @inheritDoc
     */
  }, {
    key: "isStreaming",
    value: function isStreaming() {
      return true;
    }
  }]);
  return SparqlJsonResultParser;
}(ContentParser);
module.exports = SparqlJsonResultParser;