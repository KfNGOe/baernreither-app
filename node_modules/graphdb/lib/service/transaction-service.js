"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var Service = require('./service');
var HttpRequestBuilder = require('../http/http-request-builder');
var PATH_TRANSACTIONS = require('./service-paths').PATH_TRANSACTIONS;
var LoggingUtils = require('../logging/logging-utils');
var StringUtils = require('../util/string-utils');
var RepositoryClientConfig = require('../repository/repository-client-config');
var TransactionalRepositoryClient = require('../transaction/transactional-repository-client');

/**
 * Service for working with the transactions endpoint.
 *
 * @author Mihail Radkov
 * @author Svilen Velikov
 * @author Teodossi Dossev
 */
var TransactionService = /*#__PURE__*/function (_Service) {
  _inherits(TransactionService, _Service);
  var _super = _createSuper(TransactionService);
  /**
   * Instantiates the transaction service with the supplied executor and
   * repository client config.
   *
   * @param {Function} httpRequestExecutor used to execute HTTP requests
   * @param {RepositoryClientConfig} repositoryClientConfig used to create
   * transaction client configurations
   */
  function TransactionService(httpRequestExecutor, repositoryClientConfig) {
    var _this;
    _classCallCheck(this, TransactionService);
    _this = _super.call(this, httpRequestExecutor);
    _this.repositoryClientConfig = repositoryClientConfig;
    return _this;
  }

  /**
   * Starts a transaction and produces a {@link TransactionalRepositoryClient}.
   *
   * The transactions ID is extracted from the <code>location</code> header and
   * is used as  endpoint for the produced TransactionalRepositoryClient.
   *
   * If no transaction isolation level is provided, the server will use its
   * default isolation level.
   *
   * @param {string} [isolationLevel] an optional parameter to specify the
   * transaction's level of isolation; for possible values see
   * {@link TransactionIsolationLevel}
   *
   * @return {Promise<TransactionalRepositoryClient>} transactional client
   */
  _createClass(TransactionService, [{
    key: "beginTransaction",
    value: function beginTransaction(isolationLevel) {
      var _this2 = this;
      var requestBuilder = HttpRequestBuilder.httpPost(PATH_TRANSACTIONS).addParam('isolation-level', isolationLevel);
      return this.httpRequestExecutor(requestBuilder).then(function (response) {
        var locationUrl = response.getHeaders()['location'];
        if (StringUtils.isBlank(locationUrl)) {
          _this2.logger.error(LoggingUtils.getLogPayload(response, {
            isolationLevel: isolationLevel
          }), 'Cannot obtain transaction ID');
          return Promise.reject(new Error('Couldn\'t obtain transaction ID'));
        }
        var config = _this2.getTransactionalClientConfig(locationUrl);
        var transactionClient = new TransactionalRepositoryClient(config);
        _this2.logger.debug(LoggingUtils.getLogPayload(response, {
          isolationLevel: isolationLevel
        }), 'Started transaction');
        return transactionClient;
      });
    }
    /**
     * Builds client configuration for transactional repository out of the
     * provided repository client config and the supplied location URL.
     *
     * @private
     *
     * @param {string} locationUrl the url for the transactional repo endpoint
     *
     * @return {RepositoryClientConfig} the built transaction client config
     */
  }, {
    key: "getTransactionalClientConfig",
    value: function getTransactionalClientConfig(locationUrl) {
      var config = this.repositoryClientConfig;
      var transactionConfig = new RepositoryClientConfig(config.getEndpoint()).setEndpoints([locationUrl]).setHeaders(config.getHeaders()).setDefaultRDFMimeType(config.getDefaultRDFMimeType()).setReadTimeout(config.getReadTimeout()).setWriteTimeout(config.getWriteTimeout());
      if (config.shouldAuthenticate()) {
        var userName = config.getUsername();
        var password = config.getPass();
        if (config.getBasicAuthentication()) {
          transactionConfig.useBasicAuthentication(userName, password);
        } else if (config.getGdbTokenAuthentication()) {
          transactionConfig.useGdbTokenAuthentication(userName, password);
        }
      }
      return transactionConfig;
    }
    /**
     * @inheritDoc
     */
  }, {
    key: "getServiceName",
    value: function getServiceName() {
      return 'TransactionService';
    }
  }]);
  return TransactionService;
}(Service);
module.exports = TransactionService;