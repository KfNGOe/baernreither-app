"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Wrapper class for service request.
 *
 * Contains the request builder and the executor function that will perform
 * the request and produce the results.
 *
 * This wrapper allows to modify the request builder before executing it,
 * preserving any chained promises to the executor.
 *
 * @author Mihail Radkov
 */
var ServiceRequest = /*#__PURE__*/function () {
  /**
   * Instantiates the request with the supplied builder and executor.
   *
   * @param {HttpRequestBuilder} httpRequestBuilder builder carrying
   * the request data and params
   * @param {Function} requestExecutor executor for HTTP requests
   */
  function ServiceRequest(httpRequestBuilder, requestExecutor) {
    _classCallCheck(this, ServiceRequest);
    this.httpRequestBuilder = httpRequestBuilder;
    this.requestExecutor = requestExecutor;
  }

  /**
   * Returns the request builder.
   *
   * @return {HttpRequestBuilder}
   */
  _createClass(ServiceRequest, [{
    key: "getHttpRequestBuilder",
    value: function getHttpRequestBuilder() {
      return this.httpRequestBuilder;
    }
    /**
     * Triggers service request execution.
     *
     * @return {Promise}
     */
  }, {
    key: "execute",
    value: function execute() {
      return this.requestExecutor();
    }
  }]);
  return ServiceRequest;
}();
module.exports = ServiceRequest;