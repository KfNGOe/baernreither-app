"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Class with utility methods related to strings.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
var StringUtils = /*#__PURE__*/function () {
  function StringUtils() {
    _classCallCheck(this, StringUtils);
  }
  _createClass(StringUtils, null, [{
    key: "isBlank",
    /**
     * Tells if the provided string is null or blank ignoring
     * whitespace characters.
     *
     * @param {string} string the string to check
     * @return {boolean} <code>true</code> if the string is blank or
     *                    <code>false</code> otherwise
     */
    value: function isBlank(string) {
      return !string || !string.trim().length;
    }
    /**
     * Tells if the provided string is NOT null and NOT blank ignoring
     * whitespace characters.
     *
     * @param {string} string the string to check
     * @return {boolean} <code>true</code> if the string is not blank or
     *                    <code>false</code> otherwise
     */
  }, {
    key: "isNotBlank",
    value: function isNotBlank(string) {
      return !StringUtils.isBlank(string);
    }
  }]);
  return StringUtils;
}();
module.exports = StringUtils;