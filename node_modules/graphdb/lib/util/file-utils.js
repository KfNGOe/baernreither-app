"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var fs = require('fs');
var StringUtils = require('../util/string-utils');

/**
 * Utilities related to working with files and the file system.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
var FileUtils = /*#__PURE__*/function () {
  function FileUtils() {
    _classCallCheck(this, FileUtils);
  }
  _createClass(FileUtils, null, [{
    key: "getReadStream",
    /**
     * Opens a readable stream from a file located at the provided file path.
     *
     * If the file path is blank or points to non existent file, the method will
     * result in an error.
     *
     * @param {string} filePath path to the file to be read
     * @return {ReadableStream} stream with the file data
     * @throws {Error} if the file path is not provided or no file exists for it
     */
    value: function getReadStream(filePath) {
      if (StringUtils.isBlank(filePath)) {
        throw new Error('File path is required');
      }
      if (!fs.existsSync(filePath)) {
        throw new Error('File does not exist for path=' + filePath);
      }
      return fs.createReadStream(filePath);
    }
  }]);
  return FileUtils;
}();
module.exports = FileUtils;