export = QueryPayload;
/**
 * Base class from which all query payload classes derives. Successors must
 * implement {@link #validateParams} and {@link #getSupportedContentTypes}.
 *
 * @abstract
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
declare class QueryPayload {
    payload: {};
    contentType: string;
    /**
     * @param {boolean} [inference] Specifies whether inferred statements should
     *                  be included in the query evaluation.
     * @return {QueryPayload}
     */
    setInference(inference?: boolean): QueryPayload;
    /**
     * @param {number} [timeout] Specifies a maximum query execution time, in
     *                 whole seconds.
     * @return {QueryPayload}
     */
    setTimeout(timeout?: number): QueryPayload;
    /**
     * An optional parameter which is used for defining the request Content-Type.
     *
     * @param {string} [contentType] One of the supported content types for given
     * operation.
     * @return {QueryPayload}
     */
    setContentType(contentType?: string): QueryPayload;
    /**
     * @return {string} content type which was populated in this payload.
     */
    getContentType(): string;
    /**
     * Serializes all query parameters populated in the payload. Only parameters
     * which are present will be returned.
     *
     * Mandatory and dependent parameters are validated and errors are thrown if
     * necessary.
     *
     * @return {string} a serialized payload which holds all available query
     * parameters in this payload object.
     */
    getParams(): string;
    /**
     * Utility method which serializes a single level json object to properly
     * encoded string that can be used in a request.
     *
     * @protected
     * @param {Object} data object which holds request parameter key:value pairs.
     * @return {string} provided object serialized and encoded to string.
     */
    protected serialize(data: any): string;
    /**
     * Must be implemented in successors.
     *
     * Validates payload for mandatory and invalid parameters.
     *
     * @abstract
     * @protected
     *
     * @return {boolean} <code>true</code> if parameters are valid and
     * <code>false</code> otherwise.
     */
    protected validateParams(): boolean;
    /**
     * Must be implemented in successors and should return a list with supported
     * content types.
     * @abstract
     * @protected
     *
     * @return {Array<string>}
     */
    protected getSupportedContentTypes(): Array<string>;
}
