export = UpdateQueryPayload;
/**
 * Payload object holding common request parameters applicable for the
 * statements endpoint with a sparql update query.
 *
 * The query is mandatory parameter.
 *
 * Content type parameter which is used for setting the Content-Type http header
 * is optional and by default
 * <code>application/sparql-update</code> type is set.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
declare class UpdateQueryPayload extends QueryPayload {
    /**
     * @param {string} query The query as string to be evaluated.
     * @return {UpdateQueryPayload}
     */
    setQuery(query: string): UpdateQueryPayload;
    /**
     * @return {string} a query which was populated in the payload.
     */
    getQuery(): string;
    /**
     * One or more named graph URIs to be used as default graph(s) for retrieving.
     * @param {(string|string[])} [defaultGraphs]
     * @return {UpdateQueryPayload}
     */
    setDefaultGraphs(defaultGraphs?: (string | string[])): UpdateQueryPayload;
    /**
     * @return {(string|string[])} Default graphs for the query for retrieving.
     */
    getDefaultGraphs(): (string | string[]);
    /**
     * One or more named graph URIs to be used as named graph(s) for retrieving.
     * @param {(string|string[])} [namedGraphs]
     * @return {UpdateQueryPayload}
     */
    setNamedGraphs(namedGraphs?: (string | string[])): UpdateQueryPayload;
    /**
     * @return {(string|string[])} Named graphs set for the query for retrieving.
     */
    getNamedGraphs(): (string | string[]);
    /**
     * One or more default graphs for removing statements.
     * @param {(string|string[])} [removeGraphs]
     * @return {UpdateQueryPayload}
     */
    setRemoveGraphs(removeGraphs?: (string | string[])): UpdateQueryPayload;
    /**
     * @return {(string|string[])} Default graphs set for the query for removing.
     */
    getRemoveGraphs(): (string | string[]);
    /**
     * One or more default graphs for inserting statements.
     * @param {(string|string[])} [insertGraphs]
     * @return {UpdateQueryPayload}
     */
    setInsertGraphs(insertGraphs?: (string | string[])): UpdateQueryPayload;
    /**
     * @return {(string|string[])} Default graphs set for the query for inserting.
     */
    getInsertGraphs(): (string | string[]);
}
import QueryPayload = require("../query/query-payload");
