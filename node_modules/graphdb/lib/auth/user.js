"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Logged in user credentials and settings.
 *
 * @class
 * @author Mihail Radkov
 * @author Svilen Velikov
 */
var User = /*#__PURE__*/function () {
  /**
   * Instantiates the user.
   * @param {string} token is the authentication token obtained with the login.
   * @param {string} password of the user
   * @param {Object} data is the logged in user data which contains the username
   * the role and settings.
   */
  function User(token, password, data) {
    _classCallCheck(this, User);
    this.token = token;
    this.password = password;
    this.data = data;
  }

  /**
   * @return {string} the authentication token.
   */
  _createClass(User, [{
    key: "getToken",
    value: function getToken() {
      return this.token;
    }
    /**
     * Removes the token which effectively make the user unauthenticated.
     */
  }, {
    key: "clearToken",
    value: function clearToken() {
      this.token = undefined;
    }
    /**
     * @return {string} the logged in username.
     */
  }, {
    key: "getUsername",
    value: function getUsername() {
      return this.getProperty('username');
    }
    /**
     * @return {string} the user's password.
     */
  }, {
    key: "getPassword",
    value: function getPassword() {
      return this.password;
    }
    /**
     * @return {Array<string>} an array of user roles.
     */
  }, {
    key: "getAuthorities",
    value: function getAuthorities() {
      return this.getProperty('authorities');
    }
    /**
     * @private
     * @param {string} name is the property name
     * @return {*} the property value or undefined if data or property is missing.
     */
  }, {
    key: "getProperty",
    value: function getProperty(name) {
      return this.data ? this.data[name] : undefined;
    }
  }]);
  return User;
}();
module.exports = User;