export namespace http {
    let HttpClient: typeof import("./http/http-client");
    let HttpRequestBuilder: typeof import("./http/http-request-builder");
    let QueryContentType: {
        X_WWW_FORM_URLENCODED: string;
        SPARQL_UPDATE: string;
        SPARQL_QUERY: string;
    };
    let RDFMimeType: {
        RDF_XML: string;
        N_TRIPLES: string;
        TURTLE: string;
        TURTLE_STAR: string;
        N3: string;
        N_QUADS: string;
        JSON_LD: string;
        RDF_JSON: string;
        TRIX: string;
        TRIG: string;
        TRIG_STAR: string;
        BINARY_RDF: string;
        SPARQL_RESULTS_XML: string;
        SPARQL_RESULTS_JSON: string;
        SPARQL_STAR_RESULTS_JSON: string;
        SPARQL_STAR_RESULTS_TSV: string;
        BINARY_RDF_RESULTS_TABLE: string;
        BOOLEAN_RESULT: string;
    };
}
export namespace server {
    let ServerClient: typeof import("./server/server-client");
    let ServerClientConfig: typeof import("./server/server-client-config");
    let GraphDBServerClient: typeof import("./server/graphdb-server-client");
    let AppSettings: typeof import("./server/app-settings");
}
export namespace repository {
    let RepositoryClientConfig: typeof import("./repository/repository-client-config");
    let BaseRepositoryClient: typeof import("./repository/base-repository-client");
    let RDFRepositoryClient: typeof import("./repository/rdf-repository-client");
    let StatementPayload: typeof import("./repository/statement-payload");
    let AddStatementPayload: typeof import("./repository/add-statement-payload");
    let GetStatementsPayload: typeof import("./repository/get-statements-payload");
    let RepositoryType: {
        SE: string;
        MASTER: string;
        WORKER: string;
        FREE: string;
        ONTOP: string;
        GRAPHDB: string;
    };
    let RepositoryConfig: typeof import("./repository/repository-config");
}
export namespace transaction {
    let TransactionalRepositoryClient: typeof import("./transaction/transactional-repository-client");
    let TransactionIsolationLevel: {
        NONE: string;
        READ_UNCOMMITTED: string;
        READ_COMMITTED: string;
        SNAPSHOT_READ: string;
        SNAPSHOT: string;
        SERIALIZABLE: string;
    };
}
export namespace query {
    let QueryPayload: typeof import("./query/query-payload");
    let GetQueryPayload: typeof import("./query/get-query-payload");
    let UpdateQueryPayload: typeof import("./query/update-query-payload");
    let QueryLanguage: {
        SPARQL: string;
        SERQL: string;
    };
    let QueryType: {
        SELECT: string;
        CONSTRUCT: string;
        DESCRIBE: string;
        ASK: string;
    };
}
export namespace parser {
    let ParserRegistry: typeof import("./parser/parser-registry");
    let ContentParser: typeof import("./parser/content-parser");
    let N3Parser: typeof import("./parser/n3-parser");
    let NQuadsParser: typeof import("./parser/n-quads-parser");
    let NTriplesParser: typeof import("./parser/n-triples-parser");
    let TriGParser: typeof import("./parser/trig-parser");
    let TurtleParser: typeof import("./parser/turtle-parser");
    let JsonLDParser: typeof import("./parser/jsonld-parser");
    let RDFXmlParser: typeof import("./parser/rdfxml-parser");
    let SparqlJsonResultParser: typeof import("./parser/sparql-json-result-parser");
    let SparqlXmlResultParser: typeof import("./parser/sparql-xml-result-parser");
}
export namespace logger {
    let Logger: typeof import("./logging/logger");
    let ConsoleLogger: typeof import("./logging/console-logger");
}
export namespace model {
    let Namespace: typeof import("./model/namespace");
    let TermConverter: typeof import("./model/term-converter");
    let Types: typeof import("./model/types");
}
