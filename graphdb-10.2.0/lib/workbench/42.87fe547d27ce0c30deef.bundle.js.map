{"version":3,"sources":["webpack:///./src/js/angular/plugins/app.js","webpack:///./src/js/angular/plugins/controllers.js"],"names":["angular","module","PluginsCtrl","$scope","$interval","toastr","$repositories","$licenseService","$modal","$timeout","PluginsRestService","$translate","timer","init","clear","isLicenseValid","getActiveRepository","isActiveRepoOntopType","isActiveRepoFedXType","getPlugins","searchPluginsTerm","plugins","displayedPlugins","initPlugins","success","data","buildPluginsArray","results","bindings","error","getError","finally","filterResults","setLoader","map","plugin","name","s","value","enabled","o","filter","sort","a","b","textA","toLowerCase","textB","matchedPlugins","indexOf","displayedPluginsChanged","updateDisplayedPlugins","length","find","element","equals","cancelTimer","cancel","setTimeout","applyRowStyles","loader","message","loaderTimeout","loaderMessage","$on","$","window","off","on","tableWidth","width","rowWidth","columnPerRow","Math","floor","toArray","forEach","index","isGreyBackground","addClass","removeClass","oddRow","evenElement","togglePlugin","pluginName","repoId","instant","getLoaderMessage","onSearchTermChanged","controller","$inject"],"mappings":"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","file":"42.87fe547d27ce0c30deef.bundle.js","sourcesContent":["import 'angular/plugins/controllers';\n\nconst modules = [\n    'ngRoute',\n    'graphdb.framework.plugins.controllers'\n];\n\nangular.module('graphdb.framework.plugins', modules);\n","import 'angular/rest/plugins.rest.service';\n\nconst modules = [\n    'graphdb.framework.rest.plugins.service'\n];\n\nangular\n    .module('graphdb.framework.plugins.controllers', modules)\n    .controller('PluginsCtrl', PluginsCtrl);\n\nPluginsCtrl.$inject = ['$scope', '$interval', 'toastr', '$repositories', '$licenseService', '$modal', '$timeout', 'PluginsRestService', '$translate'];\n\nfunction PluginsCtrl($scope, $interval, toastr, $repositories, $licenseService, $modal, $timeout, PluginsRestService, $translate) {\n\n    let timer;\n\n    const init = function () {\n        $scope.clear();\n        if (!$licenseService.isLicenseValid() ||\n            !$repositories.getActiveRepository() ||\n            $repositories.isActiveRepoOntopType() ||\n            $repositories.isActiveRepoFedXType()) {\n            return;\n        }\n        getPlugins();\n    };\n\n    $scope.clear = function () {\n        $scope.searchPluginsTerm = '';\n        $scope.plugins = [];\n        $scope.displayedPlugins = [];\n    };\n\n    const getPlugins = function () {\n        initPlugins();\n        timer = $interval(function () {\n            initPlugins();\n        }, 5000);\n    };\n\n    const initPlugins = function () {\n        PluginsRestService.getPlugins($scope.getActiveRepository())\n            .success(function (data) {\n                $scope.plugins = $scope.buildPluginsArray(data.results.bindings);\n            }).error(function (data) {\n            toastr.error(getError(data));\n        }).finally(function () {\n            $scope.filterResults();\n            $scope.setLoader(false);\n        });\n    };\n\n    $scope.buildPluginsArray = function (plugins) {\n        return plugins.map((plugin) => ({\n            name: plugin.s.value,\n            enabled: plugin.o.value === 'true'\n        })).filter(function (plugin) {\n            return plugin.name !== 'plugincontrol' && plugin.name !== 'literals-index';\n        }).sort(function (a, b) {\n            const textA = a.name.toLowerCase();\n            const textB = b.name.toLowerCase();\n            return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n        });\n    };\n\n    $scope.filterResults = function () {\n        const matchedPlugins = $scope.plugins.filter((plugin) => plugin.name.indexOf($scope.searchPluginsTerm) !== -1);\n        if (displayedPluginsChanged(matchedPlugins)) {\n            $scope.updateDisplayedPlugins(matchedPlugins);\n        }\n    };\n\n    /**\n     * Checks if displayed plugins in the view are different than <code>plugins</code>.\n     * @param {*} plugins - plugins to be checked.\n     * @return {boolean} returns true if <code>plugins</code> are different from those which are shown in the view.\n     */\n    const displayedPluginsChanged = function (plugins) {\n        if (!$scope.displayedPlugins || $scope.displayedPlugins.length !== plugins.length) {\n            return true;\n        }\n\n        for (const plugin in plugins) {\n            if (!$scope.displayedPlugins.find((element) => angular.equals(element, plugins[plugin]))) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    $scope.updateDisplayedPlugins = function (plugins) {\n        $scope.displayedPlugins = plugins;\n        setTimeout(function () {\n            $scope.applyRowStyles();\n        }, 0);\n    };\n\n    $scope.setLoader = function (loader, message) {\n        $timeout.cancel($scope.loaderTimeout);\n        if (loader) {\n            $scope.loaderTimeout = $timeout(function () {\n                $scope.loader = loader;\n                $scope.loaderMessage = message;\n            }, 300);\n        } else {\n            $scope.loader = false;\n        }\n    };\n\n    // this is used when repository is changed from the upper menu to refresh the plugins for it.\n    $scope.$on('repositoryIsSet', function () {\n        cancelTimer();\n        init();\n    });\n\n    $scope.$on('$destroy', function () {\n        cancelTimer();\n        $(window).off('resize.plugin');\n    });\n\n    $(window).on('resize.plugin', function () {\n        $scope.applyRowStyles();\n    });\n\n    function cancelTimer() {\n        if (timer) {\n            $interval.cancel(timer);\n        }\n    }\n\n    $scope.applyRowStyles = function () {\n        const tableWidth = $('#wb-plugins-pluginInPlugins').width();\n        const rowWidth = $('tr').width();\n        const columnPerRow = Math.floor(tableWidth / rowWidth);\n        $('.wb-plugins-row').toArray().forEach((value, index) => {\n            if ($scope.isGreyBackground(columnPerRow, index)) {\n                $(value).addClass('grey-row');\n            } else {\n                $(value).removeClass('grey-row');\n            }\n        });\n    };\n\n    $scope.isGreyBackground = function (columnPerRow, index) {\n        const row = Math.floor(index / columnPerRow) + 1;\n        const oddRow = row % 2 !== 1;\n        const evenElement = index % 2 !== 0;\n        const evenColumns = columnPerRow % 2 !== 0;\n\n        if (evenColumns) {\n            if (oddRow && !evenElement || !oddRow && !evenElement) {\n                return true;\n            }\n            if (oddRow && evenElement || !oddRow && evenElement) {\n                return false;\n            }\n        } else {\n            if (oddRow && !evenElement || !oddRow && evenElement) {\n                return false;\n            }\n            if (oddRow && evenElement || !oddRow && !evenElement) {\n                return true;\n            }\n        }\n    };\n\n    $scope.togglePlugin = function (pluginName, enabled) {\n        const repoId = $scope.getActiveRepository();\n        const message = enabled ? $translate.instant('deactivating.plugin', {pluginName: pluginName}) : $translate.instant('activating.plugin', {pluginName: pluginName});\n        $scope.setLoader(true, message);\n        PluginsRestService.togglePlugin(repoId, enabled, pluginName)\n            .error(function (data) {\n            toastr.error(getError(data));\n        }).finally(function () {\n            initPlugins();\n            $scope.setLoader(false);\n        });\n    };\n\n    $scope.getLoaderMessage = function () {\n        return $scope.loaderMessage || $translate.instant('common.loading');\n    };\n\n    $scope.onSearchTermChanged = function () {\n        $scope.filterResults();\n    };\n\n    init();\n}\n"],"sourceRoot":""}