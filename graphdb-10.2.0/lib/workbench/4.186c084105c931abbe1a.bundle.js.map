{"version":3,"sources":["webpack:///./src/js/angular/rest/cluster.rest.service.js","webpack:///./src/js/angular/clustermanagement/controllers.js"],"names":["angular","module","factory","ClusterRestService","$inject","$http","getClusterConfig","get","createCluster","groupConfiguration","post","updateCluster","nodes","patch","deleteCluster","forceDelete","data","$","param","force","delete","addNodesToCluster","nodesArray","removeNodesFromCluster","headers","getClusterStatus","getNodeStatus","controller","ClusterManagementCtrl","CreateClusterCtrl","DeleteClusterCtrl","EditClusterCtrl","AddLocationFromClusterCtrl","AddNodesDialogCtrl","RemoveNodesDialogCtrl","RemoteLocationsService","NodeState","LEADER","FOLLOWER","CANDIDATE","OUT_OF_SYNC","NO_CONNECTION","READ_ONLY","RESTRICTED","NO_CLUSTER","DELETED","LinkState","IN_SYNC","SYNCING","$scope","$q","toastr","$repositories","$modal","$sce","$window","$interval","ModalService","$timeout","$location","$translate","$rootScope","updateRequest","then","clusterConfiguration","getClusterConfiguration","currentNode","leaderChanged","getCurrentNodeStatus","finally","childContext","redraw","getLocationsWithRpcAddresses","locations","localNode","find","location","isLocal","endpoint","rpcAddress","address","clusterModel","onAddRemoveSuccess","message","success","handleAddRemoveErrors","status","title","failMessage","Array","isArray","reduce","acc","error","Object","keys","key","allowHtml","loader","isLeader","currentLeader","shouldShowClusterSettingsPanel","onopen","onclose","noop","toggleSidePanel","toggleLegend","setLoader","cancel","loaderTimeout","loaderMessage","selectNode","node","selectedNode","$apply","getLoaderMessage","instant","response","catch","slice","leader","nodeState","newLeader","links","syncStatus","forEach","push","id","source","target","hasCluster","showCreateClusterDialog","open","templateUrl","size","resolve","result","showDeleteDialog","values","every","successMessage","failedNodesList","$broadcast","showEditConfigurationDialog","showAddNodeToClusterDialog","nodesRpcAddress","map","failMessageTitle","showRemoveNodesFromClusterDialog","timer","$on","w","element","resize","bind","mousedown","event","nodeTooltipElement","document","getElementById","contains","unbind","getAdvancedOptionsClass","optionsModule","isAriaExpanded","getAttribute","$modalInstance","pageTitle","autofocusId","errors","electionMinTimeout","electionRangeTimeout","heartbeatInterval","messageSizeKB","verificationTimeout","filter","selectedLocations","close","preconditionErrors","splice","handleErrors","isClusterConfigurationValid","isFormValid","clusterConfigurationForm","$invalid","nodesListValid","length","addNodeToList","loc","removeNodeFromList","index","addLocation","newLocation","ok","warning","dismiss","LocationsRestService","windowClass","dataAddLocation","uri","locationData","msg","getError","locationAdded","addLocationHttp","getLocations","local","errorMsg","locationsArray","rpcAddressFetchers","getLocationRpcAddress","isAvailable","Promise","allSettled","getRemoteLocationsRpcAddresses","productInfo","docBase","getDocBase","isValidLocation","indexOf","copy","productShortVersion","clusterNodes","includes","isNew","shouldRemove","nodesToRemoveCount","leftNodesLessThanTwo","toggleNode","nodesToRemove"],"mappings":"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","file":"4.186c084105c931abbe1a.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.rest.cluster.service', [])\n    .factory('ClusterRestService', ClusterRestService);\n\nClusterRestService.$inject = ['$http'];\n\nconst CLUSTER_GROUP_ENDPOINT = 'rest/cluster';\n\nfunction ClusterRestService($http) {\n    return {\n        getClusterConfig,\n        createCluster,\n        updateCluster,\n        deleteCluster,\n        addNodesToCluster,\n        removeNodesFromCluster,\n        getClusterStatus,\n        getNodeStatus\n    };\n\n    function getClusterConfig() {\n        return $http.get(`${CLUSTER_GROUP_ENDPOINT}/config`);\n    }\n\n    function createCluster(groupConfiguration) {\n        return $http.post(`${CLUSTER_GROUP_ENDPOINT}/config`, groupConfiguration);\n    }\n\n    function updateCluster(groupConfiguration) {\n        if (groupConfiguration.nodes) {\n            delete groupConfiguration.nodes;\n        }\n        return $http.patch(`${CLUSTER_GROUP_ENDPOINT}/config`, groupConfiguration);\n    }\n\n    function deleteCluster(forceDelete) {\n        const data = $.param({\n            force: forceDelete\n        });\n        return $http.delete(`${CLUSTER_GROUP_ENDPOINT}/config?${data}`);\n    }\n\n    function addNodesToCluster(nodesArray) {\n        return $http.post(`${CLUSTER_GROUP_ENDPOINT}/config/node`, {nodes: nodesArray});\n    }\n\n    function removeNodesFromCluster(nodesArray) {\n        return $http.delete(`${CLUSTER_GROUP_ENDPOINT}/config/node`, {data: {nodes: nodesArray}, headers: {'Content-Type': 'application/json'}});\n    }\n\n    function getClusterStatus() {\n        return $http.get(`${CLUSTER_GROUP_ENDPOINT}/group/status`);\n    }\n\n    function getNodeStatus() {\n        return $http.get(`${CLUSTER_GROUP_ENDPOINT}/node/status`);\n    }\n}\n","import 'angular/core/services';\nimport 'angular/rest/cluster.rest.service';\n\nconst modules = [\n    'ui.bootstrap',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.rest.repositories.service',\n    'graphdb.framework.rest.cluster.service',\n    'toastr',\n    'pageslide-directive'\n];\n\nangular\n    .module('graphdb.framework.clustermanagement.controllers', modules)\n    .controller('ClusterManagementCtrl', ClusterManagementCtrl)\n    .controller('CreateClusterCtrl', CreateClusterCtrl)\n    .controller('DeleteClusterCtrl', DeleteClusterCtrl)\n    .controller('EditClusterCtrl', EditClusterCtrl)\n    .controller('AddLocationFromClusterCtrl', AddLocationFromClusterCtrl)\n    .controller('AddNodesDialogCtrl', AddNodesDialogCtrl)\n    .controller('RemoveNodesDialogCtrl', RemoveNodesDialogCtrl)\n    .factory('RemoteLocationsService', RemoteLocationsService);\n\nexport const NodeState = {\n    LEADER: 'LEADER',\n    FOLLOWER: 'FOLLOWER',\n    CANDIDATE: 'CANDIDATE',\n    OUT_OF_SYNC: 'OUT_OF_SYNC',\n    NO_CONNECTION: 'NO_CONNECTION',\n    READ_ONLY: 'READ_ONLY',\n    RESTRICTED: 'RESTRICTED',\n    NO_CLUSTER: 'NO_CLUSTER',\n    DELETED: 'DELETED'\n};\nexport const LinkState = {\n    IN_SYNC: 'IN_SYNC',\n    OUT_OF_SYNC: 'OUT_OF_SYNC',\n    SYNCING: 'SYNCING',\n    NO_CONNECTION: 'NO_CONNECTION'\n};\n\nClusterManagementCtrl.$inject = ['$scope', '$http', '$q', 'toastr', '$repositories', '$modal', '$sce',\n    '$window', '$interval', 'ModalService', '$timeout', 'ClusterRestService', '$location', '$translate', 'RemoteLocationsService', '$rootScope'];\n\nfunction ClusterManagementCtrl($scope, $http, $q, toastr, $repositories, $modal, $sce,\n    $window, $interval, ModalService, $timeout, ClusterRestService, $location, $translate, RemoteLocationsService, $rootScope) {\n    $scope.loader = true;\n    $scope.isLeader = false;\n    $scope.currentNode = null;\n    $scope.clusterModel = {};\n    $scope.NodeState = NodeState;\n    $scope.leaderChanged = false;\n    $scope.currentLeader = null;\n\n    // Holds child context\n    $scope.childContext = {};\n\n    $scope.shouldShowClusterSettingsPanel = false;\n    $scope.onopen = $scope.onclose = () => angular.noop();\n\n    $scope.toggleSidePanel = () => {\n        $scope.shouldShowClusterSettingsPanel = !$scope.shouldShowClusterSettingsPanel;\n    };\n\n    $scope.toggleLegend = () => {\n        if ($scope.childContext.toggleLegend) {\n            $scope.childContext.toggleLegend();\n        }\n    };\n\n    // TODO: Similar function is declared multiple times in different components. Find out how to avoid it!\n    $scope.setLoader = function (loader, message) {\n        $timeout.cancel($scope.loaderTimeout);\n        if (loader) {\n            $scope.loaderMessage = message;\n            $scope.loaderTimeout = $timeout(function () {\n                $scope.loader = loader;\n            }, 50);\n        } else {\n            $scope.loader = false;\n        }\n    };\n\n    function selectNode(node) {\n        if ($scope.selectedNode !== node) {\n            $scope.selectedNode = node;\n        } else {\n            $scope.selectedNode = null;\n        }\n        $scope.$apply();\n    }\n\n    $scope.childContext.selectNode = selectNode;\n\n    function initialize() {\n        $scope.loader = true;\n\n        return $scope.getCurrentNodeStatus()\n            .then(() => {\n                return $scope.getClusterConfiguration();\n            })\n            .then(() => {\n                return $scope.getClusterStatus();\n            })\n            .finally(() => {\n                $scope.setLoader(false);\n            });\n    }\n\n    let updateRequest;\n    function updateCluster(force) {\n        if (updateRequest) {\n            return;\n        }\n\n        updateRequest = $scope.getClusterStatus()\n            .then(() => {\n                if (force || !$scope.clusterConfiguration) {\n                    return $scope.getClusterConfiguration();\n                }\n            })\n            .then(() => {\n                if (!$scope.currentNode || $scope.leaderChanged) {\n                    return $scope.getCurrentNodeStatus();\n                }\n            })\n            .finally(() => {\n                updateRequest = null;\n                $scope.childContext.redraw();\n            });\n    }\n\n    $scope.getLoaderMessage = function () {\n        return $scope.loaderMessage || $translate.instant('common.loading');\n    };\n\n    $scope.getClusterConfiguration = () => {\n        return ClusterRestService.getClusterConfig()\n            .then((response) => {\n                $scope.clusterConfiguration = response.data;\n                if (!$scope.currentNode) {\n                    return $scope.getCurrentNodeStatus();\n                }\n            })\n            .catch(() => {\n                $scope.clusterConfiguration = null;\n            });\n    };\n\n    function isLeaderChanged(currentLeader, newLeader) {\n        if (!newLeader) {\n            // If election is in place and there is no leader yet, consider it as leader change\n            return true;\n        }\n        return !currentLeader || currentLeader.address !== newLeader.address;\n    }\n\n    $scope.getClusterStatus = function () {\n        return ClusterRestService.getClusterStatus()\n            .then(function (response) {\n                const nodes = response.data.slice();\n                const leader = nodes.find((node) => node.nodeState === NodeState.LEADER);\n\n                if (isLeaderChanged($scope.currentLeader, leader)) {\n                    $scope.currentLeader = leader;\n                    $scope.leaderChanged = true;\n                }\n                $scope.currentNode = nodes.find((node) => node.address === $scope.currentNode.address);\n\n                const links = [];\n                if (leader) {\n                    Object.keys(leader.syncStatus).forEach((node) => {\n                        const status = leader.syncStatus[node];\n                        if (status !== LinkState.NO_CONNECTION) {\n                            links.push({\n                                id: `${leader.address}-${node}`,\n                                source: leader.address,\n                                target: node,\n                                status\n                            });\n                        }\n                    });\n                }\n                $scope.clusterModel.hasCluster = true;\n                $scope.clusterModel.nodes = nodes;\n                $scope.clusterModel.links = links;\n            })\n            .catch(function (error) {\n                if (error.status === 404) {\n                    $scope.clusterModel.hasCluster = false;\n                    $scope.clusterModel.nodes = [];\n                    $scope.clusterModel.links = [];\n                    $scope.clusterConfiguration = null;\n                }\n            });\n    };\n\n    $scope.showCreateClusterDialog = function () {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/clustermanagement/templates/modal/cluster-create-dialog.html',\n            controller: 'CreateClusterCtrl',\n            size: 'lg',\n            resolve: {\n                data: function () {\n                    return {\n                        clusterModel: $scope.clusterModel\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.finally(function () {\n            getLocationsWithRpcAddresses();\n            updateCluster(true);\n        });\n    };\n\n    $scope.showDeleteDialog = () => {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/clustermanagement/templates/modal/cluster-delete-dialog.html',\n            controller: 'DeleteClusterCtrl'\n        });\n\n        modalInstance.result.then(function (forceDelete) {\n            const loaderMessage = $translate.instant('cluster_management.delete_cluster_dialog.loader_message');\n            $scope.setLoader(true, loaderMessage);\n            ClusterRestService.deleteCluster(forceDelete)\n                .then((response) => {\n                    const allNodesDeleted = Object.values(response.data).every((nodeState) => nodeState === NodeState.DELETED);\n                    if (allNodesDeleted) {\n                        const successMessage = $translate.instant('cluster_management.delete_cluster_dialog.notifications.success_delete');\n                        toastr.success(successMessage);\n                    } else {\n                        const successMessage = $translate.instant(\n                            'cluster_management.delete_cluster_dialog.notifications.success_delete_partial');\n                        const failedNodesList = Object.keys(response.data)\n                            .reduce((message, key) => message += `<div>${key} - ${response.data[key]}</div>`, '');\n                        toastr.success(failedNodesList, successMessage, {allowHtml: true});\n                    }\n                    $scope.getClusterConfiguration();\n                })\n                .catch((error) => {\n                    const failMessage = $translate.instant('cluster_management.delete_cluster_dialog.notifications.fail_delete');\n                    const failedNodesList = Object.keys(error.data)\n                        .reduce((message, key) => message += `<div>${key} - ${error.data[key]}</div>`, '');\n                    toastr.error(failedNodesList, failMessage, {allowHtml: true});\n                })\n                .finally(() => {\n                    $scope.setLoader(false);\n                    updateCluster(true);\n                    $rootScope.$broadcast('reloadLocations');\n                });\n        });\n    };\n\n    $scope.showEditConfigurationDialog = () => {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/clustermanagement/templates/modal/cluster-edit-dialog.html',\n            controller: 'EditClusterCtrl',\n            size: 'lg',\n            resolve: {\n                data: function () {\n                    return {\n                        clusterConfiguration: $scope.clusterConfiguration\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.finally(function () {\n            updateCluster(true);\n        });\n    };\n\n    $scope.getCurrentNodeStatus = () => {\n        return ClusterRestService.getNodeStatus()\n            .then((response) => {\n                $scope.leaderChanged = false;\n                $scope.currentNode = response.data;\n            })\n            .catch((error) => {\n                $scope.currentNode = error.data;\n                $scope.clusterModel.hasCluster = false;\n            })\n            .then(() => getLocationsWithRpcAddresses());\n    };\n\n    function getLocationsWithRpcAddresses() {\n        return RemoteLocationsService.getLocationsWithRpcAddresses()\n            .then((locations) => {\n                const localNode = locations.find((location) => location.isLocal);\n                if (localNode) {\n                    localNode.endpoint = $scope.currentNode.endpoint;\n                    localNode.rpcAddress = $scope.currentNode.address;\n                }\n                $scope.clusterModel.locations = locations;\n            });\n    }\n\n    $scope.showAddNodeToClusterDialog = () => {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/clustermanagement/templates/modal/add-nodes-dialog.html',\n            controller: 'AddNodesDialogCtrl',\n            size: 'lg',\n            resolve: {\n                data: function () {\n                    return {\n                        clusterModel: $scope.clusterModel,\n                        clusterConfiguration: $scope.clusterConfiguration\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.then(function (nodes) {\n            const loaderMessage = $translate.instant('cluster_management.cluster_page.add_nodes_loader');\n            $scope.setLoader(true, loaderMessage);\n\n            const nodesRpcAddress = nodes.map((node) => node.rpcAddress);\n            ClusterRestService.addNodesToCluster(nodesRpcAddress)\n                .then(() => {\n                    const successMessage = $translate.instant(\n                        'cluster_management.cluster_page.notifications.add_nodes_success');\n                    onAddRemoveSuccess(successMessage);\n                })\n                .catch((error) => {\n                    const failMessageTitle = $translate.instant('cluster_management.cluster_page.notifications.add_nodes_fail');\n                    handleAddRemoveErrors(error.data, error.status, failMessageTitle);\n                })\n                .finally(() => {\n                    $scope.setLoader(false);\n                    updateCluster(true);\n                });\n        })\n            .finally(() => getLocationsWithRpcAddresses());\n    };\n\n    $scope.showRemoveNodesFromClusterDialog = () => {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/clustermanagement/templates/modal/remove-nodes-dialog.html',\n            controller: 'RemoveNodesDialogCtrl',\n            size: 'lg',\n            resolve: {\n                data: function () {\n                    return {\n                        clusterModel: $scope.clusterModel\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.then(function (nodes) {\n            const loaderMessage = $translate.instant('cluster_management.cluster_page.remove_nodes_loader');\n            $scope.setLoader(true, loaderMessage);\n\n            const nodesRpcAddress = nodes.map((node) => node.address);\n            ClusterRestService.removeNodesFromCluster(nodesRpcAddress)\n                .then(() => {\n                    const successMessage = $translate.instant('cluster_management.cluster_page.notifications.remove_nodes_success');\n                    onAddRemoveSuccess(successMessage);\n                })\n                .catch((error) => {\n                    const failMessageTitle = $translate.instant('cluster_management.cluster_page.notifications.remove_nodes_fail');\n                    handleAddRemoveErrors(error.data, error.status, failMessageTitle);\n                })\n                .finally(() => {\n                    $scope.setLoader(false);\n                    updateCluster(true);\n                });\n        });\n    };\n\n    function onAddRemoveSuccess(message) {\n        toastr.success(message);\n        $scope.getClusterConfiguration();\n    }\n\n    function handleAddRemoveErrors(data, status, title) {\n        let failMessage = data.message || data;\n\n        if (status === 400 && Array.isArray(data)) {\n            failMessage = data.reduce((acc, error) => acc += `<div>${error}</div>`, '');\n        } else if (status === 412) {\n            failMessage = Object.keys(data)\n                .reduce((message, key) => message += `<div>${key} - ${data[key]}</div>`, '');\n        }\n        toastr.error(failMessage, title, {allowHtml: true});\n    }\n\n    initialize()\n        .finally(() => {\n            const timer = $interval(function () {\n                updateCluster();\n            }, 1000);\n\n            $scope.$on(\"$destroy\", function () {\n                $interval.cancel(timer);\n            });\n        });\n\n    // track window resizing and window mousedown\n    const w = angular.element($window);\n    const resize = function () {\n        $scope.childContext.resize();\n    };\n    w.bind('resize', resize);\n\n    const mousedown = function (event) {\n        const target = event.target;\n        const nodeTooltipElement = document.getElementById('nodeTooltip');\n        if ($scope.selectedNode && nodeTooltipElement !== target && !nodeTooltipElement.contains(target)) {\n            $scope.childContext.selectNode(null);\n        }\n    };\n    w.bind('mousedown', mousedown);\n    $scope.$on('$destroy', function () {\n        w.unbind('resize', resize);\n        w.unbind('mousedown', mousedown);\n    });\n}\n\nconst getAdvancedOptionsClass = function () {\n    const optionsModule = document.getElementById('advancedOptions');\n\n    if (optionsModule) {\n        const isAriaExpanded = optionsModule.getAttribute('aria-expanded');\n        if (isAriaExpanded && isAriaExpanded === 'true') {\n            return 'fa fa-angle-down';\n        }\n    }\n    return 'fa fa-angle-right';\n};\n\nCreateClusterCtrl.$inject = ['$scope', '$modalInstance', '$timeout', 'ClusterRestService', 'toastr', '$translate', 'data', '$modal',\n    'RemoteLocationsService', '$rootScope'];\n\nfunction CreateClusterCtrl($scope, $modalInstance, $timeout, ClusterRestService, toastr, $translate, data, $modal, RemoteLocationsService, $rootScope) {\n    $scope.pageTitle = $translate.instant('cluster_management.cluster_page.create_page_title');\n    $scope.autofocusId = 'autofocus';\n    $scope.errors = [];\n    $scope.clusterConfiguration = {\n        electionMinTimeout: 8000,\n        electionRangeTimeout: 6000,\n        heartbeatInterval: 2000,\n        messageSizeKB: 64,\n        verificationTimeout: 1500,\n        nodes: []\n    };\n\n    $scope.locations = data.clusterModel.locations.filter((location) => !location.isLocal);\n    $scope.selectedLocations = data.clusterModel.locations.filter((location) => location.isLocal);\n\n    $scope.loader = false;\n\n    $scope.getAdvancedOptionsClass = getAdvancedOptionsClass;\n\n    $scope.createCluster = function () {\n        $scope.setLoader(true, $translate.instant('cluster_management.cluster_page.creating_cluster_loader'));\n        $scope.clusterConfiguration.nodes = $scope.selectedLocations.map((node) => node.rpcAddress);\n        return ClusterRestService.createCluster($scope.clusterConfiguration)\n            .then(() => {\n                toastr.success($translate.instant('cluster_management.cluster_page.notifications.create_success'));\n                $modalInstance.close();\n            })\n            .catch(function (error) {\n                handleErrors(error.data, error.status);\n            })\n            .finally(() => {\n                $scope.setLoader(false);\n                $rootScope.$broadcast('reloadLocations');\n            });\n    };\n\n    function handleErrors(data, status) {\n        delete $scope.preconditionErrors;\n        toastr.error($translate.instant('cluster_management.cluster_page.notifications.create_failed'));\n        $scope.errors.splice(0);\n        if (status === 412) {\n            $scope.preconditionErrors = Object.keys(data).map((key) => `${key} - ${data[key]}`);\n        } else if (status === 400) {\n            $scope.errors.push(...data);\n        } else if (status === 409) {\n            $scope.errors.push(data);\n        }\n    }\n\n    $scope.isClusterConfigurationValid = () => {\n        const isFormValid = !$scope.clusterConfigurationForm.$invalid;\n        const nodesListValid = $scope.selectedLocations && $scope.selectedLocations.length >= 2;\n        return isFormValid && nodesListValid;\n    };\n\n    $scope.setLoader = function (loader, message) {\n        $timeout.cancel($scope.loaderTimeout);\n        if (loader) {\n            $scope.loaderTimeout = $timeout(function () {\n                $scope.loader = loader;\n                $scope.loaderMessage = message;\n            }, 300);\n        } else {\n            $scope.loader = false;\n        }\n    };\n\n    $scope.addNodeToList = function (location) {\n        if (!location.rpcAddress) {\n            return;\n        }\n        $scope.selectedLocations.push(location);\n        $scope.locations = $scope.locations.filter((loc) => loc.endpoint !== location.endpoint);\n    };\n\n    $scope.removeNodeFromList = function (index, node) {\n        if (node.isLocal) {\n            return;\n        }\n        $scope.selectedLocations.splice(index, 1);\n        $scope.locations.push(node);\n    };\n\n    $scope.addLocation = function () {\n        RemoteLocationsService.addLocation()\n            .then((newLocation) => {\n                if (newLocation) {\n                    $scope.locations.push(newLocation);\n                }\n            });\n    };\n\n    $scope.ok = function () {\n        if (!$scope.isClusterConfigurationValid()) {\n            toastr.warning($translate.instant('cluster_management.cluster_page.notifications.form_invalid'));\n            return;\n        }\n        $scope.createCluster();\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n\nDeleteClusterCtrl.$inject = ['$scope', '$modalInstance'];\n\nfunction DeleteClusterCtrl($scope, $modalInstance) {\n    $scope.forceDelete = false;\n\n    $scope.ok = function () {\n        $modalInstance.close($scope.forceDelete);\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n\nRemoteLocationsService.$inject = ['$http', 'toastr', '$modal', 'LocationsRestService', '$translate'];\n\nfunction RemoteLocationsService($http, toastr, $modal, LocationsRestService, $translate) {\n    return {\n        addLocation: addLocation,\n        getLocationsWithRpcAddresses: getLocationsWithRpcAddresses\n    };\n\n    function getLocationsWithRpcAddresses() {\n        return getLocations()\n            .then((locations) => {\n                if (locations) {\n                    return getRemoteLocationsRpcAddresses(locations);\n                }\n            });\n    }\n\n    /**\n     * Sets multiple remote locations' rpc addresses. Skips local location and locations with errors\n     * @param {any[]} locationsArray\n     * @return {Promise<[]>} locationArray with filled rpc addresses\n     */\n    function getRemoteLocationsRpcAddresses(locationsArray) {\n        const rpcAddressFetchers = locationsArray.filter((location) => !location.isLocal && !location.error).map((location) => {\n            return getLocationRpcAddress(location)\n                .then((response) => {\n                    location.rpcAddress = response.data;\n                    location.isAvailable = true;\n                    return location;\n                })\n                .catch((error) => {\n                    location.isAvailable = false;\n                    location.error = getError(error.data, error.status);\n                });\n        });\n        return Promise.allSettled(rpcAddressFetchers).then(() => locationsArray);\n    }\n\n    /**\n     * Fetch locations and map them to a location model\n     *\n     * @return {*} all remote locations mapped to a location model\n     */\n    function getLocations() {\n        return LocationsRestService.getLocations()\n            .then(function (response) {\n                return response.data.map((loc) => {\n                    return {\n                        isLocal: loc.local,\n                        endpoint: loc.uri,\n                        rpcAddress: loc.rpcAddress || '',\n                        error: loc.errorMsg\n                    };\n                });\n            })\n            .catch(function (error) {\n                const msg = getError(error.data, error.status);\n                toastr.error(msg, $translate.instant('common.error'));\n            });\n    }\n\n    /**\n     * Fetch rpc address of a remote location\n     * @param {*} location the remote location\n     * @return {Promise<String>} the rpc address of the location\n     */\n    function getLocationRpcAddress(location) {\n        return LocationsRestService.getLocationRpcAddress(location.endpoint);\n\n    }\n\n    function addLocation() {\n        let newLocation;\n        return $modal.open({\n            templateUrl: 'js/angular/templates/modal/add-location.html',\n            windowClass: 'addLocationDialog',\n            controller: 'AddLocationFromClusterCtrl'\n        }).result\n            .then((dataAddLocation) => {\n                newLocation = dataAddLocation;\n                newLocation.isLocal = false;\n                newLocation.endpoint = newLocation.uri;\n                return addLocationHttp(newLocation);\n            });\n    }\n\n    function addLocationHttp(locationData) {\n        let newLocation;\n        return LocationsRestService.addLocation(locationData)\n            .catch((error) => {\n                const msg = getError(error.data, error.status);\n                toastr.error(msg, $translate.instant('common.error'));\n                return false;\n            })\n            .then((locationAdded) => {\n                if (locationAdded) {\n                    return getLocationsWithRpcAddresses();\n                }\n                return false;\n            })\n            .then((locations) => {\n                if (locations === false) {\n                    return;\n                }\n                newLocation = locations.find((location) => location.endpoint === locationData.uri);\n                return newLocation;\n            });\n    }\n}\n\nAddLocationFromClusterCtrl.$inject = ['$scope', '$modalInstance', 'toastr', 'productInfo', '$translate'];\n\nfunction AddLocationFromClusterCtrl($scope, $modalInstance, toastr, productInfo, $translate) {\n    //TODO: This, along with the view are duplicated from repositories page. Must be extracted for re-usability.\n    $scope.newLocation = {\n        'uri': '',\n        'authType': 'signature',\n        'username': '',\n        'password': '',\n        'active': false\n    };\n    $scope.docBase = getDocBase(productInfo);\n\n    $scope.isValidLocation = function () {\n        return ($scope.newLocation.uri.length < 6 ||\n                $scope.newLocation.uri.indexOf('http:') === 0 || $scope.newLocation.uri.indexOf('https:') === 0)\n            && $scope.newLocation.uri.indexOf('/repositories') <= -1;\n    };\n\n    $scope.ok = function () {\n        if (!$scope.newLocation) {\n            toastr.error($translate.instant('location.cannot.be.empty.error'));\n            return;\n        }\n        $modalInstance.close($scope.newLocation);\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n\nEditClusterCtrl.$inject = ['$scope', '$modalInstance', '$timeout', 'ClusterRestService', 'toastr', '$translate', 'data'];\n\nfunction EditClusterCtrl($scope, $modalInstance, $timeout, ClusterRestService, toastr, $translate, data) {\n    $scope.pageTitle = $translate.instant('cluster_management.cluster_page.edit_page_title');\n    $scope.errors = [];\n    $scope.clusterConfiguration = angular.copy(data.clusterConfiguration);\n    $scope.loader = false;\n\n    $scope.updateCluster = function () {\n        $scope.setLoader(true, $translate.instant('cluster_management.cluster_page.updating_cluster_loader'));\n        return ClusterRestService.updateCluster($scope.clusterConfiguration)\n            .then(() => {\n                toastr.success($translate.instant('cluster_management.cluster_page.notifications.update_success'));\n                $modalInstance.close();\n            })\n            .catch(function (response) {\n                handleErrors(response.data, response.status);\n            })\n            .finally(() => $scope.setLoader(false));\n    };\n\n    function handleErrors(data, status) {\n        delete $scope.preconditionErrors;\n        toastr.error($translate.instant('cluster_management.cluster_page.notifications.update_failed'));\n        $scope.errors.splice(0);\n\n        if (status === 409 || typeof data === 'string') {\n            $scope.errors.push(data);\n        } else if (status === 412) {\n            $scope.preconditionErrors = Object.keys(data).map((key) => `${key} - ${data[key]}`);\n        } else if (status === 400) {\n            $scope.errors.push(...data);\n        }\n    }\n\n    $scope.isClusterConfigurationValid = () => {\n        return !$scope.clusterConfigurationForm.$invalid;\n    };\n\n    $scope.setLoader = function (loader, message) {\n        $timeout.cancel($scope.loaderTimeout);\n        if (loader) {\n            $scope.loaderTimeout = $timeout(function () {\n                $scope.loader = loader;\n                $scope.loaderMessage = message;\n            }, 300);\n        } else {\n            $scope.loader = false;\n        }\n    };\n\n    $scope.ok = function () {\n        if (!$scope.isClusterConfigurationValid()) {\n            toastr.warning($translate.instant('cluster_management.cluster_page.notifications.form_invalid'));\n            return;\n        }\n        $scope.updateCluster();\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n\nconst getDocBase = function (productInfo) {\n    return `https://graphdb.ontotext.com/documentation/${productInfo.productShortVersion}`;\n};\n\nAddNodesDialogCtrl.$inject = ['$scope', '$modalInstance', 'data', '$modal', 'RemoteLocationsService'];\n\nfunction AddNodesDialogCtrl($scope, $modalInstance, data, $modal, RemoteLocationsService) {\n    const clusterConfiguration = angular.copy(data.clusterConfiguration);\n    const clusterModel = angular.copy(data.clusterModel);\n    $scope.nodes = [];\n\n    $scope.clusterNodes = clusterModel.nodes.map((node) => ({rpcAddress: node.address, endpoint: node.endpoint}));\n    $scope.locations = clusterModel.locations.filter((location) => !clusterConfiguration.nodes.includes(location.rpcAddress));\n    $scope.locations.forEach((location) => location.isNew = true);\n\n    $scope.addNodeToList = function (location) {\n        if (!location.rpcAddress) {\n            return;\n        }\n        $scope.nodes.push(location);\n        $scope.locations = $scope.locations.filter((loc) => loc.endpoint !== location.endpoint);\n    };\n\n    $scope.removeNodeFromList = function (index, node) {\n        $scope.nodes.splice(index, 1);\n        $scope.locations.push(node);\n    };\n\n    $scope.addLocation = function () {\n        RemoteLocationsService.addLocation()\n            .then((newLocation) => {\n                if (newLocation) {\n                    $scope.locations.push(newLocation);\n                }\n            });\n    };\n\n    $scope.ok = function () {\n        $modalInstance.close($scope.nodes);\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n\nRemoveNodesDialogCtrl.$inject = ['$scope', '$modalInstance', 'data'];\n\nfunction RemoveNodesDialogCtrl($scope, $modalInstance, data) {\n    const clusterModel = angular.copy(data.clusterModel);\n\n    $scope.clusterNodes = clusterModel.nodes;\n    $scope.clusterNodes.forEach((node) => node.shouldRemove = false);\n    $scope.nodesToRemoveCount = 0;\n    $scope.leftNodesLessThanTwo = false;\n\n    $scope.toggleNode = function (index, node) {\n        node.shouldRemove = !node.shouldRemove;\n        if (node.shouldRemove) {\n            $scope.nodesToRemoveCount++;\n        } else {\n            $scope.nodesToRemoveCount--;\n        }\n        $scope.leftNodesLessThanTwo = $scope.clusterNodes.length - $scope.nodesToRemoveCount < 2;\n    };\n\n    $scope.ok = function () {\n        const nodesToRemove = $scope.clusterNodes.filter((node) => node.shouldRemove);\n        $modalInstance.close(nodesToRemove);\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n"],"sourceRoot":""}