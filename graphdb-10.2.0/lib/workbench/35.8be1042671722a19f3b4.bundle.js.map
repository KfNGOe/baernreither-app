{"version":3,"sources":["webpack:///./src/js/angular/autocomplete/app.js","webpack:///./src/js/angular/autocomplete/controllers.js"],"names":["angular","module","AutocompleteCtrl","$scope","$interval","toastr","$repositories","$licenseService","$modal","$timeout","AutocompleteRestService","$autocompleteStatus","$translate","timer","cancelTimer","cancel","pluginName","setPluginIsActive","isPluginActive","pluginIsActive","refreshEnabledStatus","checkAutocompleteStatus","success","data","autocompleteEnabled","setAutocompleteStatus","error","getError","refreshIndexIRIs","shouldIndexIRIs","refreshIndexStatus","indexStatus","refreshLabelConfig","labelConfig","checkForPlugin","pluginFound","setLoader","loading","finally","pullStatus","$broadcast","$on","loader","message","loaderTimeout","loaderMessage","getLoaderMessage","instant","toggleAutocomplete","newValue","toggleIndexIRIs","buildIndex","interruptIndexing","getDegradedReason","addLabel","editLabel","labelIri","languages","label","isNew","open","templateUrl","controller","resolve","result","then","addLabelConfig","removeLabel","removeLabelConfig","isLicenseValid","getActiveRepository","isActiveRepoOntopType","isActiveRepoFedXType","AddLabelCtrl","$modalInstance","copy","ok","form","$valid","close","dismiss","setTemplate","iri","$","focus","$inject"],"mappings":"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","file":"35.8be1042671722a19f3b4.bundle.js","sourcesContent":["import 'angular/autocomplete/controllers';\n\nconst modules = [\n    'ngRoute',\n    'graphdb.framework.autocomplete.controllers'\n];\n\nangular.module('graphdb.framework.autocomplete', modules);\n","import 'angular/rest/autocomplete.rest.service';\n\nconst modules = [\n    'toastr',\n    'graphdb.framework.rest.autocomplete.service'\n];\n\nangular\n    .module('graphdb.framework.autocomplete.controllers', modules)\n    .controller('AutocompleteCtrl', AutocompleteCtrl)\n    .controller('AddLabelCtrl', AddLabelCtrl);\n\nAutocompleteCtrl.$inject = ['$scope', '$interval', 'toastr', '$repositories', '$licenseService', '$modal', '$timeout', 'AutocompleteRestService', '$autocompleteStatus', '$translate'];\n\nfunction AutocompleteCtrl($scope, $interval, toastr, $repositories, $licenseService, $modal, $timeout, AutocompleteRestService, $autocompleteStatus, $translate) {\n\n    let timer;\n\n    function cancelTimer() {\n        if (timer) {\n            $interval.cancel(timer);\n        }\n    }\n\n    $scope.pluginName = 'autocomplete';\n\n    $scope.setPluginIsActive = function (isPluginActive) {\n        $scope.pluginIsActive = isPluginActive;\n    };\n\n    const refreshEnabledStatus = function () {\n        AutocompleteRestService.checkAutocompleteStatus()\n            .success(function (data) {\n                $scope.autocompleteEnabled = data;\n                $autocompleteStatus.setAutocompleteStatus(data);\n            }).error(function (data) {\n            toastr.error(getError(data));\n        });\n    };\n\n    const refreshIndexIRIs = function () {\n        AutocompleteRestService.refreshIndexIRIs()\n            .success(function (data) {\n                $scope.shouldIndexIRIs = data;\n            }).error(function (data) {\n            toastr.error(getError(data));\n        });\n    };\n\n    const refreshIndexStatus = function () {\n        AutocompleteRestService.refreshIndexStatus()\n            .success(function (data) {\n                $scope.indexStatus = data;\n            })\n            .error(function (data) {\n                toastr.error(getError(data));\n            });\n    };\n\n    const refreshLabelConfig = function () {\n        AutocompleteRestService.refreshLabelConfig()\n            .success(function (data) {\n                $scope.labelConfig = data;\n            }).error(function (data) {\n            toastr.error(getError(data));\n        });\n    };\n\n    const addLabelConfig = function (label) {\n        $scope.setLoader(true, $translate.instant('autocomplete.update'));\n\n\n        AutocompleteRestService.addLabelConfig(label)\n            .success(function () {\n                refreshLabelConfig();\n                refreshIndexStatus();\n            }).error(function (data) {\n            toastr.error(getError(data));\n        }).finally(function () {\n            $scope.setLoader(false);\n        });\n    };\n\n    const removeLabelConfig = function (label) {\n        $scope.setLoader(true, $translate.instant('autocomplete.update'));\n\n        AutocompleteRestService.removeLabelConfig(label)\n            .success(function () {\n                refreshLabelConfig();\n                refreshIndexStatus();\n            }).error(function (data) {\n            toastr.error(getError(data));\n        }).finally(function () {\n            $scope.setLoader(false);\n        });\n    };\n\n    $scope.checkForPlugin = function () {\n        $scope.pluginFound = false;\n\n        $scope.setLoader(true);\n\n        AutocompleteRestService.checkForPlugin()\n            .success(function (data) {\n                $scope.pluginFound = data === true;\n                if ($scope.pluginFound) {\n                    refreshEnabledStatus();\n                    refreshIndexIRIs();\n                    refreshIndexStatus();\n                    refreshLabelConfig();\n                } else {\n                    $scope.autocompleteEnabled = false;\n                    $scope.loading = false;\n                }\n            }).error(function (data) {\n            toastr.error(getError(data));\n        }).finally(function () {\n            $scope.setLoader(false);\n        });\n    };\n\n    const pullStatus = function () {\n        timer = $interval(function () {\n            $scope.$broadcast('checkIsActive');\n            if ($scope.autocompleteEnabled) {\n                refreshIndexStatus();\n            }\n        }, 5000);\n    };\n\n    $scope.$on(\"$destroy\", function () {\n        cancelTimer();\n    });\n\n    const init = function() {\n        if (!$licenseService.isLicenseValid() ||\n            !$repositories.getActiveRepository() ||\n            $repositories.isActiveRepoOntopType() ||\n            $repositories.isActiveRepoFedXType()) {\n            return;\n        }\n        $scope.checkForPlugin();\n        pullStatus();\n    };\n\n    $scope.setLoader = function (loader, message) {\n        $timeout.cancel($scope.loaderTimeout);\n        if (loader) {\n            $scope.loaderTimeout = $timeout(function () {\n                $scope.loader = loader;\n                $scope.loaderMessage = message;\n            }, 300);\n        } else {\n            $scope.loader = false;\n        }\n    };\n\n    $scope.getLoaderMessage = function () {\n        return $scope.loaderMessage || $translate.instant('common.loading');\n    };\n\n    $scope.toggleAutocomplete = function () {\n        const newValue = !$scope.autocompleteEnabled;\n        $scope.setLoader(true, newValue ? $translate.instant('autocomplete.enabling') : $translate.instant('autocomplete.disabling'));\n\n        AutocompleteRestService.toggleAutocomplete(newValue)\n            .success(function () {\n                refreshEnabledStatus();\n                refreshIndexStatus();\n            }).error(function (data) {\n            toastr.error(getError(data));\n        }).finally(function () {\n            $scope.setLoader(false);\n        });\n    };\n\n    $scope.toggleIndexIRIs = function () {\n        $scope.setLoader(true, ($translate.instant('autocomplete.index.iri')));\n\n        AutocompleteRestService.toggleIndexIRIs(!$scope.shouldIndexIRIs)\n            .success(function () {\n                refreshIndexIRIs();\n                refreshIndexStatus();\n            }).error(function (data) {\n            toastr.error(getError(data));\n        }).finally(function () {\n            $scope.setLoader(false);\n        });\n    };\n\n    $scope.buildIndex = function () {\n        $scope.setLoader(true, $translate.instant('autocomplete.index.build'));\n\n        AutocompleteRestService.buildIndex()\n            .success(function () {\n                $scope.indexStatus = 'BUILDING';\n            }).error(function (data) {\n            toastr.error(getError(data));\n        }).finally(function () {\n            $scope.setLoader(false);\n        });\n    };\n\n    $scope.interruptIndexing = function () {\n        $scope.setLoader(true, $translate.instant('index.interrupt'));\n\n        AutocompleteRestService.interruptIndexing()\n            .success(function () {\n                refreshIndexStatus();\n            }).error(function (data) {\n            toastr.error(getError(data));\n        }).finally(function () {\n            $scope.setLoader(false);\n        });\n    };\n\n    $scope.getDegradedReason = function () {\n        return $repositories.getDegradedReason();\n    };\n\n    $scope.addLabel = function () {\n        $scope.editLabel({labelIri: '', languages: ''}, true);\n    };\n\n    $scope.editLabel = function (label, isNew) {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/autocomplete/templates/modal/add-label.html',\n            controller: 'AddLabelCtrl',\n            resolve: {\n                data: function () {\n                    return {\n                        label: label,\n                        isNew: isNew\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.then(function (label) {\n            addLabelConfig(label);\n        });\n    };\n\n    $scope.removeLabel = function (label) {\n        removeLabelConfig(label);\n    };\n\n    $scope.$on('repositoryIsSet', function () {\n        cancelTimer();\n        if (!$licenseService.isLicenseValid() ||\n            !$repositories.getActiveRepository() ||\n            $repositories.isActiveRepoOntopType() ||\n            $repositories.isActiveRepoFedXType()) {\n            return;\n        }\n        $scope.checkForPlugin();\n        pullStatus();\n    });\n\n    init();\n}\n\nAddLabelCtrl.$inject = ['$scope', '$modalInstance', '$timeout', 'data'];\n\nfunction AddLabelCtrl($scope, $modalInstance, $timeout, data) {\n    $scope.label = angular.copy(data.label);\n    $scope.isNew = data.isNew;\n\n    $scope.ok = function () {\n        if ($scope.form.$valid) {\n            $modalInstance.close($scope.label);\n        }\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n\n    $scope.setTemplate = function (iri) {\n        $scope.label.labelIri = iri;\n        $timeout(function () {\n            $('#wb-autocomplete-languages').focus();\n        }, 0);\n    };\n}\n"],"sourceRoot":""}