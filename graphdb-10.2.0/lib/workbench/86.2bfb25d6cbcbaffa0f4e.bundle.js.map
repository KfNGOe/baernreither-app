{"version":3,"sources":["webpack:///./src/js/angular/guides/steps/complex/execute-sparql-query/plugin.js"],"names":["PluginRegistry","add","guideBlockName","getSteps","options","services","GuideUtils","toastr","$translate","$interpolate","$location","$route","mainAction","code","document","createElement","copy","className","innerText","instant","setAttribute","steps","angular","extend","menu","showIntro","queries","overwriteQuery","forEach","queryDef","index","query","queryAsHtmlCodeElement","outerHTML","queryEditorSelector","getSparqlEditorSelector","push","content","url","elementSelector","beforeShowPromise","Promise","resolve","reject","deferredShow","then","waitFor","catch","error","onNextValidate","editorQuery","removeWhiteSpaces","window","editor","getValue","noNextErrorToast","setValue","initPreviousStep","haveToReload","executeSparqlQuery","scrollToHandler","scrollToTop","extraContent","queryExtraContent","onScope","scope","copyQuery","getGuideElementSelector","onNextClick","guide","clickOnGuideElement","next","canBePaused","stepId","previousStep","ShepherdService","getPreviousStepFromHistory","id","getCurrentStepId","placement","getSparqlResultsSelector","fileName","resultExtraContent"],"mappings":"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","file":"86.2bfb25d6cbcbaffa0f4e.bundle.js","sourcesContent":["PluginRegistry.add('guide.step', [\n    {\n        guideBlockName: 'execute-sparql-query',\n        getSteps: (options, services) => {\n            const GuideUtils = services.GuideUtils;\n            const toastr = services.toastr;\n            const $translate = services.$translate;\n            const $interpolate = services.$interpolate;\n            const $location = services.$location;\n            const $route = services.$route;\n            options.mainAction = 'execute-sparql-query';\n\n            const code = document.createElement('code');\n            const copy = document.createElement('button');\n            copy.className = 'btn btn-sm btn-secondary';\n            copy.innerText = $translate.instant('guide.step_plugin.execute-sparql-query.copy-to-editor.button');\n            copy.setAttribute('ng-click', 'copyQuery()');\n\n            const steps = [\n                {\n                    guideBlockName: 'click-main-menu',\n                    options: angular.extend({}, {\n                        menu: 'sparql',\n                        showIntro: true\n                    }, options)\n                }\n            ];\n\n            const defaultQuery = 'select * where { \\n\\t?s ?p ?o .\\n} limit 100 \\n';\n            const queries = {};\n            queries[-1] = 'PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nselect * where { \\n\\t?s ?p ?o .\\n?o rdf:type \"\"\\n} limit 100 ';\n\n            let overwriteQuery = false;\n            options.queries.forEach((queryDef, index) => {\n                const query = queryDef.query;\n                queries[index] = query;\n                code.innerText = query;\n                options.queryAsHtmlCodeElement = '<div class=\"shepherd-code\">' + code.outerHTML + copy.outerHTML + '</div>';\n\n                const queryEditorSelector = GuideUtils.getSparqlEditorSelector();\n                steps.push({\n                    guideBlockName: 'input-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.execute-sparql-query.query-editor.content',\n                        url: '/sparql',\n                        elementSelector: queryEditorSelector,\n                        beforeShowPromise: () => new Promise(function (resolve, reject) {\n                            GuideUtils.deferredShow(10)()\n                                .then(() => {\n                                    GuideUtils.waitFor(queryEditorSelector, 3)\n                                        .then(() => resolve())\n                                        .catch((error) => {\n                                            services.toastr.error(services.$translate.instant('guide.unexpected.error.message'));\n                                            reject(error);\n                                        });\n                                });\n                        }),\n                        onNextValidate: () => {\n                            const editorQuery = GuideUtils.removeWhiteSpaces(window.editor.getValue());\n                            const stepQuery = GuideUtils.removeWhiteSpaces(query);\n                            if (editorQuery !== stepQuery) {\n                                if (editorQuery === 'select*where{?s?p?o.}limit100' || overwriteQuery) {\n                                    // The query is the default query OR we previously overwrote it => we can overwrite it\n                                    window.editor.setValue(query);\n                                } else {\n                                    GuideUtils.noNextErrorToast(toastr, $translate, $interpolate,\n                                        'guide.step_plugin.execute-sparql-query.query-not-same.error', options);\n                                    return false;\n                                }\n                            }\n                            overwriteQuery = true;\n                            return true;\n                        },\n                        initPreviousStep: () => new Promise((resolve, reject) => {\n                            if (index === 0) {\n                                window.editor.setValue(defaultQuery);\n                                resolve();\n                            } else {\n                                const haveToReload = '/sparql' !== $location.url();\n                                GuideUtils.executeSparqlQuery($location, $route, query, haveToReload)\n                                    .then(() => resolve())\n                                    .catch((error) => reject(error));\n                            }\n                        }),\n                        scrollToHandler: GuideUtils.scrollToTop,\n                        extraContent: queryDef.queryExtraContent,\n                        onScope: (scope) => {\n                            scope.copyQuery = () => {\n                                window.editor.setValue(query);\n                            };\n                        }\n                    }, options)\n                });\n                steps.push({\n                    guideBlockName: 'clickable-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.execute-sparql-query.run-sparql-query.content',\n                        url: '/sparql',\n                        elementSelector: GuideUtils.getGuideElementSelector('runSparqlQuery'),\n                        onNextClick: (guide) => GuideUtils.clickOnGuideElement('runSparqlQuery')().then(() => guide.next()),\n                        scrollToHandler: GuideUtils.scrollToTop,\n                        canBePaused: false,\n                        initPreviousStep: (services, stepId) => new Promise((resolve, reject) => {\n                            const previousStep = services.ShepherdService.getPreviousStepFromHistory(stepId);\n                            previousStep.options.initPreviousStep(services, previousStep.options.id)\n                                .then(() => {\n                                    const currentStepId = services.ShepherdService.getCurrentStepId();\n                                    // Skip expanding of node if last step is \"visual-graph-expand\"\n                                    if (currentStepId === stepId) {\n                                        resolve();\n                                    } else {\n                                        GuideUtils.clickOnGuideElement('runSparqlQuery')().then(() => resolve()).catch((error) => reject(error));\n                                    }\n                                })\n                                .catch((error) => reject(error));\n                        })\n                    }, options)\n                });\n                steps.push({\n                    guideBlockName: 'read-only-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.execute-sparql-query.result-explain.content',\n                        url: '/sparql',\n                        placement: 'top',\n                        elementSelector: GuideUtils.getSparqlResultsSelector(),\n                        fileName: options.fileName,\n                        scrollToHandler: GuideUtils.scrollToTop,\n                        extraContent: queryDef.resultExtraContent,\n                        canBePaused: false,\n                        initPreviousStep: (services, stepId) => new Promise((resolve, reject) => {\n                            if ('/sparql' !== $location.url()) {\n                                GuideUtils.executeSparqlQuery($location, $route, query, true)\n                                    .then(() => resolve())\n                                    .catch((error) => reject(error));\n                            } else {\n                                const previousStep = services.ShepherdService.getPreviousStepFromHistory(stepId);\n                                previousStep.options.initPreviousStep(services, previousStep.options.id)\n                                    .then(() => {\n                                        window.editor.setValue(query);\n                                        resolve();\n                                    })\n                                    .catch((error) => reject(error));\n                            }\n                        })\n                    }, options)\n                });\n            });\n\n            return steps;\n        }\n    }\n]);\n"],"sourceRoot":""}