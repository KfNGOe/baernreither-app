{"version":3,"sources":["webpack:///./src/js/angular/utils/file-types.js","webpack:///./src/js/angular/export/controllers.js"],"names":["angular","module","value","name","type","extension","controller","$scope","$http","$location","$timeout","ModalService","filterFilter","$repositories","toastr","RDF4JRepositoriesRestService","FileTypes","$translate","getActiveRepository","exportFormats","deleting","showExportDDTooltip","page","pageSize","pageSizeOptions","displayGraphs","exportFilter","export","exportMultipleGraphs","repoExportFormat","selectedGraphs","exportGraphs","$watch","getGraphs","selectedAll","changePageSize","isShacl","iri","loader","success","data","results","bindings","unshift","contextID","graphsByValue","Object","keys","forEach","key","binding","uri","encodeURIComponent","clearUri","exportUri","longName","graphs","filteredGraphs","slice","matchedElements","error","status","msg","getError","setRepository","instant","onGraphSearch","deselectAll","filterResults","item","indexOf","push","downloadExport","downloadUrl","format","url","auth","localStorage","getItem","win","window","open","document","location","href","close","openExportDDTooltip","$","trigger","exportRepo","openSimpleModal","title","message","warning","result","then","startDownload","repo","getActiveRepositoryObject","id","hasMultipleSelected","_","isEmpty","index","exportSelectedGraphs","contextStr","substring","length","element","find","valueOfFilteredGraphsButton","innerHTML","trim","valueOfFilteredGraphs","changePagination","isDefined","size","removeClass","checkAll","dropRepository","canWriteActiveRepo","addStatements","err","errMsg","dropContext","ctx","updateResults","dropGraph","selectedGraphsForDelete","counterOfClearedGraphs","dropSelectedGraphs"],"mappings":"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","file":"37.94c7de8b5c741c465ffa.bundle.js","sourcesContent":["angular.module('graphdb.workbench.utils.filetypes', [])\n    .value('FileTypes', [\n        {name: 'JSON', type: 'application/rdf+json', extension: '.json'},\n        {name: 'JSON-LD', type: 'application/ld+json', extension: '.jsonld'},\n        {name: 'RDF-XML', type: 'application/rdf+xml', extension: '.rdf'},\n        {name: 'N3', type: 'text/rdf+n3', extension: '.n3'},\n        {name: 'N-Triples', type: 'text/plain', extension: '.nt'},\n        {name: 'N-Quads', type: 'text/x-nquads', extension: '.nq'},\n        {name: 'Turtle', type: 'text/turtle', extension: '.ttl'},\n        {name: 'Turtle*', type: 'application/x-turtlestar', extension: '.ttls'},\n        {name: 'TriX', type: 'application/trix', extension: '.trix'},\n        {name: 'TriG', type: 'application/x-trig', extension: '.trig'},\n        {name: 'TriG*', type: 'application/x-trigstar', extension: '.trigs'},\n        {name: 'Binary RDF', type: 'application/x-binary-rdf', extension: '.brf'}\n    ]);\n","import 'angular/core/services';\nimport 'angular/core/services/repositories.service';\nimport 'angular/core/services/jwt-auth.service';\nimport 'angular/utils/file-types';\nimport {decodeHTML} from \"../../../app\";\nimport {cloneDeep} from \"lodash\";\n\nconst modules = [\n    'ngCookies',\n    'ui.bootstrap',\n    'toastr',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.core.services.jwtauth',\n    'graphdb.workbench.utils.filetypes'\n];\n\nconst exportCtrl = angular.module('graphdb.framework.impex.export.controllers', modules);\n\nexportCtrl.controller('ExportCtrl',\n    ['$scope', '$http', '$location', '$timeout', 'ModalService', 'filterFilter', '$repositories', 'toastr', 'RDF4JRepositoriesRestService', 'FileTypes', '$translate',\n        function ($scope, $http, $location, $timeout, ModalService, filterFilter, $repositories, toastr, RDF4JRepositoriesRestService, FileTypes, $translate) {\n\n            $scope.getActiveRepository = function () {\n                return $repositories.getActiveRepository();\n            };\n\n            $scope.exportFormats = FileTypes;\n            $scope.deleting = {};\n            $scope.showExportDDTooltip = true;\n            $scope.page = 1;\n            $scope.pageSize = 10;\n            $scope.pageSizeOptions = [10, 20, 50, 100];\n            $scope.displayGraphs = [];\n            $scope.exportFilter = '';\n            $scope.export = true;\n            $scope.exportMultipleGraphs = false;\n            $scope.repoExportFormat = {\n                name: 'TriG',\n                type: 'application/x-trig',\n                extension: '.trig'\n            };\n            $scope.selectedGraphs = {\n                exportGraphs: {}\n            };\n\n            $scope.$watch(function () {\n                return $repositories.getActiveRepository();\n            }, function () {\n                $scope.exportFilter = '';\n                $scope.getGraphs();\n                $scope.selectedAll = false;\n                $timeout(function () {\n                    $scope.changePageSize(10);\n                }, 100);\n            });\n\n            $scope.isShacl = function (iri) {\n                return iri === \"http%3A%2F%2Frdf4j.org%2Fschema%2Frdf4j%23SHACLShapeGraph\";\n            };\n\n            /// <summary>Get Graphs that are part of the Active Repository.</summary>\n            $scope.getGraphs = function () {\n                if ($scope.getActiveRepository()) {\n                    $scope.loader = true;\n                    RDF4JRepositoriesRestService.getGraphs($scope.getActiveRepository()).success(function (data) {\n                        data.results.bindings.unshift({\n                            contextID: {\n                                type: 'default',\n                                value: 'import.default.graph'\n                            }\n                        });\n                        $scope.graphsByValue = {};\n                        Object.keys(data.results.bindings).forEach(function (key) {\n                            const binding = data.results.bindings[key];\n                            if (binding.contextID.type === 'bnode') {\n                                binding.contextID.value = '_:' + binding.contextID.value;\n                            } else if (binding.contextID.type === 'default') {\n                                binding.contextID.uri = encodeURIComponent('http://www.openrdf.org/schema/sesame#nil');\n                                binding.contextID.clearUri = 'DEFAULT';\n                                binding.contextID.exportUri = 'null';\n                                binding.contextID.longName = 'default graph';\n                            } else {\n                                binding.contextID.uri = encodeURIComponent(binding.contextID.value);\n                                binding.contextID.clearUri = 'GRAPH <' + binding.contextID.value + '>';\n                                binding.contextID.exportUri = encodeURIComponent('<' + binding.contextID.value + '>');\n                                binding.contextID.longName = 'named graph ' + binding.contextID.value;\n                            }\n                            $scope.graphsByValue[binding.contextID.value] = binding.contextID;\n                        });\n                        $scope.graphs = data.results.bindings;\n                        $scope.filteredGraphs = cloneDeep($scope.graphs);\n                        $scope.displayGraphs = $scope.filteredGraphs.slice($scope.pageSize * ($scope.page - 1), $scope.pageSize * $scope.page);\n                        $scope.loader = false;\n                        $scope.selectedGraphs.exportGraphs = {};\n                        $scope.matchedElements = $scope.graphs;\n                    }).error(function (data, status) {\n                        const msg = getError(data, status);\n                        if (msg === 'There is no active location!') {\n                            $repositories.setRepository('');\n                            toastr.error(msg, $translate.instant('common.error'));\n                        }\n                        $scope.loader = false;\n                    });\n                } else {\n                    $scope.loader = false;\n                }\n            };\n\n            $scope.onGraphSearch = function () {\n                $scope.matchedElements = [];\n                $scope.deselectAll();\n                $scope.filterResults();\n            };\n\n            $scope.filterResults = function () {\n                angular.forEach($scope.graphs, function (item) {\n                    if (item.contextID.value.indexOf($scope.exportFilter) !== -1) {\n                        $scope.matchedElements.push(item);\n                    }\n                });\n            };\n\n            $scope.downloadExport = function (downloadUrl, format) {\n                let url = downloadUrl + '&Accept=' + encodeURIComponent(format.type);\n                const auth = localStorage.getItem('com.ontotext.graphdb.auth');\n                if (auth) {\n                    url = url + '&authToken=' + encodeURIComponent(auth);\n                }\n                let win = window.open(url);\n                $timeout(function () {\n                    if (win.document.location.href !== 'about:blank') {\n                        win.close();\n                        toastr.error('Could not export graph. Check GraphDB logs for detailed reason.');\n                    }\n                }, 100);\n\n            };\n\n            /// <summary>Trigger the custom event for DD tooltip.</summary>\n            $scope.openExportDDTooltip = function () {\n                if ($scope.showExportDDTooltip) {\n                    $timeout(function () {\n                        $('#tooltipTarget').trigger('showExportDDTooltip');\n                    }, 0);\n                    $timeout(function () {\n                        $('#tooltipTarget').trigger('showExportDDTooltip');\n                    }, 3000);\n\n                    //Set to false so the tooltip shows only once\n                    $scope.showExportDDTooltip = false;\n\n                }\n            };\n\n            /// <summary>Fill the hidden form and submit it to start download document.</summary>\n            $scope.exportRepo = function (format, contextID) {\n                if (format.type === 'application/rdf+xml' || format.type === 'text/plain' || format.type === 'text/turtle' || format.type === 'application/x-turtlestar' || format.type === 'text/rdf+n3') {\n                    ModalService.openSimpleModal({\n                        title: $translate.instant('common.warning'),\n                        message: decodeHTML($translate.instant('export.format.warning.msg')),\n                        warning: true\n                    }).result\n                        .then(function () {\n                            $scope.startDownload(format, contextID);\n                        });\n                } else {\n                    $scope.startDownload(format, contextID);\n                }\n            };\n\n            $scope.startDownload = function (format, contextID) {\n                //If it's graph set the url for ?context=\n                let downloadUrl;\n                const repo = $repositories.getActiveRepositoryObject();\n                if (contextID) {\n                    downloadUrl = `repositories/${repo.id}/statements?infer=false&context=${$scope.graphsByValue[contextID.value].exportUri}&location=${encodeURIComponent(repo.location)}`;\n                } else {\n                    downloadUrl = `repositories/${repo.id}/statements?infer=false&location=${encodeURIComponent(repo.location)}`;\n                }\n                $scope.downloadExport(downloadUrl, format);\n            };\n\n            $scope.hasMultipleSelected = function () {\n                if (_.isEmpty($scope.selectedGraphs.exportGraphs)) {\n                    return !_.isEmpty($scope.selectedGraphs.exportGraphs);\n                } else {\n                    for (const index in $scope.selectedGraphs.exportGraphs) {\n                        if ($scope.selectedGraphs.exportGraphs[index] === true) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            };\n\n            $scope.exportSelectedGraphs = function (format) {\n                let contextStr = '';\n                for (const index in $scope.selectedGraphs.exportGraphs) {\n                    if ($scope.selectedGraphs.exportGraphs[index]) {\n                        contextStr += 'context=' + $scope.graphsByValue[index].exportUri + '&';\n                    }\n                }\n\n                if (contextStr) {\n                    const startDownload = function () {\n                        contextStr = contextStr.substring(0, contextStr.length - 1);\n                        const downloadUrl = 'repositories/' + $scope.getActiveRepository() + '/statements?infer=false&' + contextStr;\n                        $scope.downloadExport(downloadUrl, format);\n                    };\n\n                    if (format.type === 'application/rdf+xml' || format.type === 'text/plain' || format.type === 'text/turtle' || format.type === 'application/x-turtlestar' || format.type === 'text/rdf+n3') {\n                        ModalService.openSimpleModal({\n                            title: $translate.instant('common.warning'),\n                            message: decodeHTML($translate.instant('export.format.warning.msg')),\n                            warning: true\n                        }).result\n                            .then(function () {\n                                startDownload();\n                            });\n                    } else {\n                        startDownload();\n                    }\n                } else {\n                    ModalService.openSimpleModal({\n                        title: $translate.instant('export.multiple.graph'),\n                        message: $translate.instant('export.check.graphs.msg'),\n                        warning: true\n                    });\n                }\n            };\n\n            $scope.$watch('exportFilter', function () {\n                $scope.filteredGraphs = filterFilter($scope.graphs, $scope.exportFilter);\n                if ($scope.getActiveRepository() && angular.element(document).find('.btn.btn-secondary.btn-sm.dropdown-toggle span').length) {\n                    const valueOfFilteredGraphsButton = angular.element(document).find('.btn.btn-secondary.btn-sm.dropdown-toggle span')[0].innerHTML.trim();\n                    let valueOfFilteredGraphs;\n                    if (valueOfFilteredGraphsButton === 'All') {\n                        valueOfFilteredGraphs = $scope.filteredGraphs.length;\n                    }\n                    if ($scope.filteredGraphs && $scope.filteredGraphs.length > $scope.pageSize && valueOfFilteredGraphsButton !== 'All') {\n                        valueOfFilteredGraphs = $scope.pageSize;\n                    }\n                    $scope.changePageSize(valueOfFilteredGraphs);\n                    $scope.changePagination();\n                }\n            });\n\n            $scope.changePagination = function () {\n                $scope.selectedAll = false;\n                if (angular.isDefined($scope.filteredGraphs)) {\n                    $scope.displayGraphs = $scope.filteredGraphs.slice($scope.pageSize * ($scope.page - 1), $scope.pageSize * $scope.page);\n                }\n            };\n\n            $scope.changePageSize = function (size) {\n                $('.ot-graph-page-size').removeClass('active');\n                $scope.page = 1;\n                if (size) {\n                    $scope.pageSize = size;\n                    $scope.changePagination();\n                }\n                if ($scope.filteredGraphs && $scope.exportFilter !== '') {\n                    $scope.displayGraphs = $scope.filteredGraphs;\n                }\n            };\n\n            $scope.checkAll = function () {\n                $scope.selectedAll = $scope.selectedAll || false;\n\n                angular.forEach($scope.displayGraphs, function (item) {\n                    if (item.contextID.uri) {\n                        $scope.selectedGraphs.exportGraphs[item.contextID.value] = $scope.selectedAll;\n                    }\n                });\n            };\n\n            $scope.deselectAll = function () {\n                $scope.selectedAll = false;\n                angular.forEach($scope.displayGraphs, function (item) {\n                    if (item.contextID.uri) {\n                        $scope.selectedGraphs.exportGraphs[item.contextID.value] = false;\n                    }\n                });\n            };\n\n            $scope.dropRepository = function () {\n                if (!$scope.canWriteActiveRepo()) {\n                    return;\n                }\n                $scope.deleting['*'] = true;\n\n                ModalService.openSimpleModal({\n                    title: $translate.instant('export.confirm.clear.msg'),\n                    message: $translate.instant('export.warning.clear.repo.msg', {repo: $repositories.getActiveRepository()}),\n                    warning: true\n                }).result\n                    .then(function () {\n                        $timeout(function () {\n                            RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), 'update=CLEAR ALL')\n                                .then(function () {\n                                    $scope.deleting['*'] = false;\n                                    toastr.success($translate.instant('export.cleared.repo', {repo: $repositories.getActiveRepository()}));\n                                    $scope.getGraphs();\n                                }, function (err) {\n                                    $scope.deleting['*'] = false;\n                                    const errMsg = err.data;\n                                    if (typeof errMsg == \"string\" && errMsg.indexOf(\"Clearing all statements in the \" +\n                                        \"repository is incompatible with collecting history\") > -1) {\n                                        toastr.error($translate.instant('export.clearing.statements.warning'));\n                                    } else {\n                                        toastr.error($translate.instant('export.cleared.repo.failed.msg', {repo: $repositories.getActiveRepository()}), err);\n                                    }\n                                });\n                        }, 100);\n                    });\n            };\n\n            function dropGraph(ctx) {\n                const longName = ctx.contextID.longName;\n                $scope.deleting[ctx] = true;\n                ModalService.openSimpleModal({\n                    title: $translate.instant('export.confirm.clear.graph'),\n                    message: $translate.instant('export.clear.graph.warning', {longName: longName}),\n                    warning: true\n                }).result\n                    .then(function () {\n                        $timeout(function () {\n                            const data = `update=CLEAR ${ctx.contextID.clearUri}`;\n                            RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), data)\n                                .then(function () {\n                                    $scope.deleting[ctx] = false;\n                                    toastr.success($translate.instant('export.cleared.graph', {longName: longName}));\n                                    $scope.getGraphs();\n                                    $scope.exportFilter = '';\n                                    $scope.filteredGraphs.length = 0;\n                                    $scope.updateResults();\n                                    $scope.changePageSize($scope.pageSize);\n                                }, function (err) {\n                                    $scope.deleting[ctx] = false;\n                                    toastr.error($translate.instant('export.clear.graph.msg', {longName: longName}), getError(err, err.status));\n                                });\n                        }, 100);\n                    }, function () {\n                        $scope.deleting[ctx] = false;\n                    });\n            }\n\n            function dropSelectedGraphs(ctx) {\n                const selectedGraphsForDelete = [];\n                angular.forEach($scope.selectedGraphs.exportGraphs, function (value, key) {\n                    if (value) {\n                        selectedGraphsForDelete.push(key);\n                    }\n                });\n\n                if (selectedGraphsForDelete.length > 0) {\n                    $scope.deleting[ctx] = true;\n                    ModalService.openSimpleModal({\n                        title: $translate.instant('export.confirm.clear.graph'),\n                        message: $translate.instant('export.warning.clear.graph.msg'),\n                        warning: true\n                    }).result.then(function () {\n                        $timeout(function () {\n                            let counterOfClearedGraphs = 0;\n                            angular.forEach(selectedGraphsForDelete, function (contextID) {\n                                const data = `update=CLEAR ${$scope.graphsByValue[contextID].clearUri}`;\n                                RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), data)\n                                    .then(function () {\n                                        $scope.loader = true;\n                                        $scope.selectedGraphs.exportGraphs[contextID] = false;\n                                        delete $scope.selectedGraphs.exportGraphs[contextID];\n                                        counterOfClearedGraphs++;\n                                        if (selectedGraphsForDelete.length === counterOfClearedGraphs) {\n                                            $scope.selectedAll = false;\n                                            $scope.exportFilter = '';\n                                            $scope.filteredGraphs.length = 0;\n                                            $scope.getGraphs();\n                                            $scope.updateResults();\n                                            $scope.changePageSize($scope.pageSize);\n                                            toastr.success($translate.instant('export.cleared.graph.msg'));\n                                            $scope.loader = false;\n                                        }\n                                    }, function (err) {\n                                        const longName = $scope.graphsByValue[contextID].longName;\n                                        toastr.error($translate.instant('export.clear.graph.msg', {longName: longName}), getError(err, err.status));\n                                        $scope.selectedAll = false;\n                                    });\n                            });\n                        }, 100);\n                    }, function () {\n                        $scope.deleting[ctx] = false;\n                    });\n                }\n            }\n\n            $scope.dropContext = function (ctx) {\n                if (!$scope.canWriteActiveRepo()) {\n                    return;\n                }\n                if (angular.isDefined(ctx)) {\n                    dropGraph(ctx);\n                } else {\n                    dropSelectedGraphs(ctx);\n                }\n            };\n        }]);\n"],"sourceRoot":""}