{"version":3,"sources":["webpack:///./src/js/angular/guides/steps/complex/main-menu/plugin.js"],"names":["PluginRegistry","add","guideBlockName","getSteps","options","services","GuideUtils","steps","menuSelector","menuTitle","submenuSelector","submenuTitle","viewName","helpInfo","menu","mainMenuClickElementPostSelector","showIntro","mainAction","push","angular","extend","content","extraContent","extraContentClass","skipPoint","menuLabelKey","elementSelector","getGuideElementSelector","showOn","isGuideElementVisible","clickOnGuideElement","onNextClick","guide","then","next","initPreviousStep","stepId","Promise","resolve","reject","previousStep","ShepherdService","getPreviousStepFromHistory","id","catch","error","placement","canBePaused"],"mappings":"4EAAAA,eAAeC,IAAI,aAAc,CAC7B,CACIC,eAAgB,kBAChBC,SAAU,CAACC,EAASC,KAChB,MAAMC,EAAaD,EAASC,WACtBC,EAAQ,GAEd,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,OAAQT,EAAQU,MACZ,IAAK,eACDN,EAAe,aACfC,EAAY,mBACZC,EAAkB,wBAClBC,EAAe,0BACfC,EAAW,0BACXC,EAAW,6BAEX,MACJ,IAAK,SACDL,EAAe,cACfC,EAAY,gBACZG,EAAW,gBACXC,EAAW,uBAEX,MACJ,IAAK,eACDL,EAAe,aACfC,EAAY,mBACZC,EAAkB,wBAClBC,EAAe,0BACfC,EAAW,0BACXC,EAAW,6BAEX,MACJ,IAAK,eACDL,EAAe,eACfC,EAAY,qBACZC,EAAkB,wBAClBC,EAAe,qBACfC,EAAW,qBACXC,EAAW,6BAEX,MACJ,IAAK,SACDL,EAAe,cACfC,EAAY,oBACZG,EAAW,oBACXC,EAAW,uBAEX,MACJ,IAAK,kBACDL,EAAe,eACfC,EAAY,qBACZC,EAAkB,uBAClBC,EAAe,6BACfC,EAAW,6BACXC,EAAW,gCAKnB,MAAME,EAAmCL,EAAkB,OAAS,KAgFpE,OA/EAN,EAAQQ,SAAWA,EAGfR,EAAQY,WAAaZ,EAAQa,YAC7BV,EAAMW,KAAK,CACPhB,eAAgB,eAChBE,QAASe,QAAQC,OAAO,GAAI,CACxBC,QAAS,oBAAsBjB,EAAQa,WACvCK,aAAcT,EACdU,kBAAmB,6BACnBC,WAAW,GACZpB,KAKXG,EAAMW,KAAK,CACPhB,eAAgB,oBAChBE,QAASe,QAAQC,OAAO,GAAI,CACxBC,QAAS,6BACTI,aAAchB,EACdiB,gBAAiBpB,EAAWqB,wBAAwBnB,GACpDoB,OAAQ,KAEElB,GAAmBJ,EAAWuB,sBAAsBnB,IACtDJ,EAAWwB,oBAAoBtB,EAAcO,EAA7CT,IAEG,GAEXyB,YAAcC,GACV1B,EAAWwB,oBAAoBtB,EAAcO,EAA7CT,GACK2B,KAAK,KACGvB,GACDsB,EAAME,SAGtBC,iBAAkB,CAAC9B,EAAU+B,IAAW,IAAIC,QAAQ,CAACC,EAASC,KAC1D,MAAMC,EAAenC,EAASoC,gBAAgBC,2BAA2BN,GACrEI,EACAA,EAAapC,QAAQ+B,iBAAiB9B,EAAUmC,EAAapC,QAAQuC,IAChEV,KAAK,IAAMK,KACXM,MAAOC,GAAUN,EAAOM,IAE7BP,OAGTlC,KAGHM,GACAH,EAAMW,KAAK,CACPhB,eAAgB,oBAChBE,QAASe,QAAQC,OAAO,GAAI,CACxBC,QAAS,6BACTI,aAAcd,EACde,gBAAiBpB,EAAWqB,wBAAwBjB,GACpDoC,UAAW,QACXC,aAAa,EACbnB,OAAQ,KAECtB,EAAWuB,sBAAsBnB,IAClCJ,EAAWwB,oBAAoBtB,EAAc,OAA7CF,IAEG,GAEXyB,YAAcC,GAAU1B,EAAWwB,oBAAoBpB,EAAiB,KAAhDJ,GAAwD2B,KAAK,IAAMD,EAAME,QACjGC,iBAAkB,CAAC9B,EAAU+B,IAAW,IAAIC,QAAQ,CAACC,EAASC,KAC1D,MAAMC,EAAenC,EAASoC,gBAAgBC,2BAA2BN,GACrEI,EACAA,EAAapC,QAAQ+B,iBAAiB9B,EAAUmC,EAAapC,QAAQuC,IAChEV,KAAK,IAAMK,KACXM,MAAOC,GAAUN,EAAOM,IAE7BP,OAGTlC,KAGJG","file":"88.a4d0937ab1960653a0fc.bundle.js","sourcesContent":["PluginRegistry.add('guide.step', [\n    {\n        guideBlockName: 'click-main-menu',\n        getSteps: (options, services) => {\n            const GuideUtils = services.GuideUtils;\n            const steps = [];\n\n            let menuSelector;\n            let menuTitle;\n            let submenuSelector;\n            let submenuTitle;\n            let viewName;\n            let helpInfo;\n\n            switch (options.menu) {\n                case \"repositories\":\n                    menuSelector = 'menu-setup';\n                    menuTitle = 'menu.setup.label';\n                    submenuSelector = 'sub-menu-repositories';\n                    submenuTitle = 'menu.repositories.label';\n                    viewName = 'menu.repositories.label';\n                    helpInfo = 'view.repositories.helpInfo';\n\n                    break;\n                case \"import\":\n                    menuSelector = 'menu-import';\n                    menuTitle = 'common.import';\n                    viewName = 'common.import';\n                    helpInfo = 'view.import.helpInfo';\n\n                    break;\n                case \"autocomplete\":\n                    menuSelector = 'menu-setup';\n                    menuTitle = 'menu.setup.label';\n                    submenuSelector = 'sub-menu-autocomplete';\n                    submenuTitle = 'menu.autocomplete.label';\n                    viewName = 'view.autocomplete.title';\n                    helpInfo = 'view.autocomplete.helpInfo';\n\n                    break;\n                case \"visual-graph\":\n                    menuSelector = 'menu-explore';\n                    menuTitle = 'menu.explore.label';\n                    submenuSelector = 'sub-menu-visual-graph';\n                    submenuTitle = 'visual.graph.label';\n                    viewName = 'visual.graph.label';\n                    helpInfo = 'view.visual.graph.helpInfo';\n\n                    break;\n                case \"sparql\":\n                    menuSelector = 'menu-sparql';\n                    menuTitle = 'menu.sparql.label';\n                    viewName = 'view.sparql.title';\n                    helpInfo = 'view.sparql.helpInfo';\n\n                    break;\n                case \"class-hierarchy\":\n                    menuSelector = 'menu-explore';\n                    menuTitle = 'menu.explore.label';\n                    submenuSelector = 'menu-class-hierarchy';\n                    submenuTitle = 'menu.class.hierarchy.label';\n                    viewName = 'view.class.hierarchy.title';\n                    helpInfo = 'view.class.hierarchy.helpInfo';\n\n                    break;\n            }\n\n            const mainMenuClickElementPostSelector = submenuSelector ? ' div' : ' a';\n            options.viewName = viewName;\n\n            // View intro element\n            if (options.showIntro && options.mainAction) {\n                steps.push({\n                    guideBlockName: 'info-message',\n                    options: angular.extend({}, {\n                        content: 'guide.step-intro.' + options.mainAction,\n                        extraContent: helpInfo,\n                        extraContentClass: 'alert alert-help text-left',\n                        skipPoint: true\n                    }, options)\n                });\n            }\n\n            // Main menu element\n            steps.push({\n                guideBlockName: 'clickable-element',\n                options: angular.extend({}, {\n                    content: 'guide.step-menu.click-menu',\n                    menuLabelKey: menuTitle,\n                    elementSelector: GuideUtils.getGuideElementSelector(menuSelector),\n                    showOn: () => {\n                        // If submenu is visible this mean that we have to close menu.\n                        if (!!submenuSelector && GuideUtils.isGuideElementVisible(submenuSelector)) {\n                            GuideUtils.clickOnGuideElement(menuSelector, mainMenuClickElementPostSelector)();\n                        }\n                        return true;\n                    },\n                    onNextClick: (guide) =>\n                        GuideUtils.clickOnGuideElement(menuSelector, mainMenuClickElementPostSelector)()\n                            .then(() => {\n                                if (!submenuSelector) {\n                                    guide.next();\n                                }\n                            }),\n                    initPreviousStep: (services, stepId) => new Promise((resolve, reject) => {\n                        const previousStep = services.ShepherdService.getPreviousStepFromHistory(stepId);\n                        if (previousStep) {\n                            previousStep.options.initPreviousStep(services, previousStep.options.id)\n                                .then(() => resolve())\n                                .catch((error) => reject(error));\n                        } else {\n                            resolve();\n                        }\n                    })\n                }, options)\n            });\n\n            if (submenuSelector) {\n                steps.push({\n                    guideBlockName: 'clickable-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step-menu.click-menu',\n                        menuLabelKey: submenuTitle,\n                        elementSelector: GuideUtils.getGuideElementSelector(submenuSelector),\n                        placement: 'right',\n                        canBePaused: false,\n                        showOn: () => {\n                            // If submenu is visible this mean that we have to close menu.\n                            if (!GuideUtils.isGuideElementVisible(submenuSelector)) {\n                                GuideUtils.clickOnGuideElement(menuSelector, ' div')();\n                            }\n                            return true;\n                        },\n                        onNextClick: (guide) => GuideUtils.clickOnGuideElement(submenuSelector, ' a')().then(() => guide.next()),\n                        initPreviousStep: (services, stepId) => new Promise((resolve, reject) => {\n                            const previousStep = services.ShepherdService.getPreviousStepFromHistory(stepId);\n                            if (previousStep) {\n                                previousStep.options.initPreviousStep(services, previousStep.options.id)\n                                    .then(() => resolve())\n                                    .catch((error) => reject(error));\n                            } else {\n                                resolve();\n                            }\n                        })\n                    }, options)\n                });\n            }\n            return steps;\n        }\n    }\n]);\n"],"sourceRoot":""}