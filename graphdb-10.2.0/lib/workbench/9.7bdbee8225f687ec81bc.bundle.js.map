{"version":3,"sources":["webpack:///./src/js/angular/import/controllers.js"],"names":["FILE_STATUS","importCtrl","angular","module","controller","$scope","$http","toastr","$interval","$repositories","$modal","$filter","$jwtAuth","$location","$translate","LicenseRestService","GuidesService","files","fileChecked","checkAll","popoverTemplateUrl","fileQuery","getAppData","getInfo","success","data","appData","properties","i","length","key","source","value","maxUploadFileSizeMB","error","msg","getError","instant","fileFormats","gzs","_","map","f","basics","fileFormatsExtended","reduce","union","el","all","fileFormatsHuman","textFileFormatsHuman","filter","updateListHttp","force","method","url","getBaseUrl","forEach","type","defaultType","rebatch","remoteStatus","find","matches","name","status","assign","viewType","undefined","showClearStatuses","file","savedSettings","mapKeys","loader","warning","$watch","$","tabId","is","hash","updateList","canWriteActiveRepo","init","setRestricted","isRestricted","getSettings","$on","pullList","timer","updating","cancel","getVisibleFiles","getTypeFilter","showItems","selectAllFiles","importable","getSettingsFor","fileName","withDefaultSettings","isEmpty","copy","defaultSettings","setSettingsFor","settingsFor","settings","options","templateUrl","resolve","hasParserSettings","isLocalLocation","isMultiple","size","isActive","backdrop","keyboard","open","result","then","importSelected","importFile","updateImport","stopImport","params","hasImportable","showTable","switchBatch","batch","newFileChecked","each","getSelectedFiles","overrideSettings","selectedFileNames","importNext","shift","resetStatusOrRemoveEntry","names","remove","headers","resetStatus","resetStatusSelected","removeEntry","removeEntrySelected","location","getActiveLocation","local","filterSettings","filtered","omitBy","isNull","omit","keys","getActiveRepository","viewUrl","pritifySettings","JSON","stringify","toTitleCase","s","upperFirst","toLowerCase","$controller","extend","this","importServerFiles","importSettings","fileNames","Upload","currentFiles","fileSelected","$files","$file","$newFiles","$duplicateFiles","$invalidFiles","Math","floor","$watchCollection","substr","lastIndexOf","fileIdx","indexOf","splice","uniqBy","startImport","nextCallback","fileIndex","findIndex","format","message","finally","jsonBlob","upload","progress","evt","progressPercentage","parseInt","loaded","total","updateTextImport","pastedDataIdx","formattedDate","date","Date","getFullYear","padStart","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","pasteData","text","unshift","rdfDataFromURL","scope","existing","$modalInstance","importFormat","dismiss","ok","close","dataUrl","importFormats","rdfText","setFormat","isCollapsed","changeHelpTemplate","templateFile","commonUrl","UriUtils","hasError","input","o","context","target","enableReplace","replaceGraphs","fixSettings","settingsForm","replaceGraph","$setValidity","$valid","reset","addReplaceGraph","graph","valid","isValidIri","$setTouched","push","checkEnterReplaceGraph","event","keyCode","preventDefault","showAdvancedSettings","switchParserSettings"],"mappings":"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","file":"9.7bdbee8225f687ec81bc.bundle.js","sourcesContent":["import 'angular/core/services';\nimport 'angular/utils/uri-utils';\n\nconst FILE_STATUS = {\n    'UPLOADING': 'UPLOADING',\n    'PENDING': 'PENDING',\n    'ERROR': 'ERROR',\n    'DONE': 'DONE',\n    'NONE': 'NONE'\n};\n\nconst modules = [\n    'ui.bootstrap',\n    'toastr',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.utils.uriutils',\n    'graphdb.framework.guides.services'\n];\n\nconst importCtrl = angular.module('graphdb.framework.impex.import.controllers', modules);\n\nimportCtrl.controller('CommonCtrl', ['$scope', '$http', 'toastr', '$interval', '$repositories', '$modal', '$filter', '$jwtAuth', '$location', '$translate', 'LicenseRestService', 'GuidesService',\n    function ($scope, $http, toastr, $interval, $repositories, $modal, $filter, $jwtAuth, $location, $translate, LicenseRestService, GuidesService) {\n        $scope.files = [];\n        $scope.fileChecked = {};\n        $scope.checkAll = false;\n        $scope.popoverTemplateUrl = 'settingsPopoverTemplate.html';\n        $scope.fileQuery = '';\n\n        $scope.getAppData = function () {\n            LicenseRestService.getInfo().success(function (data) {\n                $scope.appData = {};\n\n                $scope.appData.properties = {};\n\n                for (let i = 0; i < data.length; i++) {\n                    $scope.appData.properties[data[i].key] = {\n                        source: data[i].source,\n                        value: data[i].value\n                    };\n                }\n                $scope.maxUploadFileSizeMB = $scope.appData.properties['graphdb.workbench.maxUploadSize'].value / (1024 * 1024);\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('common.error'));\n            });\n        };\n\n        $scope.getAppData();\n\n        $scope.fileFormats = ['ttl', 'ttls',  'rdf', 'rj', 'n3', 'nt', 'nq', 'trig', 'trigs', 'trix', 'brf', 'owl', 'jsonld'];\n\n        {\n            const gzs = _.map($scope.fileFormats, function (f) {\n                return '.' + f + '.gz';\n            });\n            const basics = _.map($scope.fileFormats, function (f) {\n                return '.' + f;\n            });\n            $scope.fileFormatsExtended = _.reduce(_.union(gzs, basics, ['.zip']), function (el, all) {\n                return el + ', ' + all;\n            });\n            $scope.fileFormatsHuman = _.reduce(basics, function (el, all) {\n                return el + ' ' + all;\n            }) + $translate.instant('import.gz.zip');\n            $scope.textFileFormatsHuman = _.reduce(_.filter(basics, function (el) {\n                    return el !== '.brf';\n                }),\n                function (el, all) {\n                    return el + ' ' + all;\n                });\n        }\n\n        $scope.updateListHttp = function (force) {\n            $http({\n                method: 'GET',\n                url: $scope.getBaseUrl()\n            }).success(function (data) {\n                if ($scope.files.length === 0 || force) {\n                    $scope.files = data;\n                    _.forEach($scope.files, function (f) {\n                        if (!f.type) {\n                            f.type = $scope.defaultType;\n                        }\n                    });\n                    $scope.rebatch();\n                } else {\n                    $scope.files.forEach(function (f) {\n                        const remoteStatus = _.find(data, _.matches({'name': f.name}));\n                        if (f.status && remoteStatus) {\n                            _.assign(f, remoteStatus);\n                        }\n                        if (!f.type) {\n                            f.type = $scope.defaultType;\n                        }\n                    });\n                }\n                // Need new status here\n                if (force && 'user' === $scope.viewType) {\n                    $scope.files = _.filter($scope.files, function (f) {\n                        return f.status !== undefined;\n                    });\n                }\n                $scope.showClearStatuses = _.filter($scope.files, function (file) {\n                    return file.status === FILE_STATUS.DONE || file.status === FILE_STATUS.ERROR;\n                }).length > 0;\n\n                $scope.savedSettings = _.mapKeys(_.filter($scope.files, 'parserSettings'), 'name');\n\n                $scope.loader = false;\n            }).error(function (data) {\n                toastr.warning($translate.instant('import.error.could.not.get.files', {data: getError(data)}));\n                $scope.loader = false;\n            });\n        };\n\n        // update the list instantly when the tab is changed\n        $scope.$watch(function () {\n            return $($scope.tabId).is(':visible');\n        }, function () {\n            if ($($scope.tabId).is(':visible')) {\n                $scope.updateListHttp(false);\n                $location.hash($scope.viewType);\n            }\n        });\n\n        $scope.updateList = function (force) {\n            if (!$scope.canWriteActiveRepo()) {\n                return;\n            }\n\n            if (!$($scope.tabId).is(':visible')) {\n                return;\n            }\n            $scope.updateListHttp(force);\n        };\n\n        $scope.init = function () {\n            // Update restricted on repositoryIsSet\n            $scope.setRestricted();\n            if ($scope.isRestricted) {\n                return;\n            }\n            $scope.updateList(true);\n            $scope.getSettings();\n        };\n\n        $scope.$on('repositoryIsSet', $scope.init);\n\n        $scope.pullList = function () {\n            const timer = $interval(function () {\n                // Skip iteration if we are updating something\n                if (!$scope.updating) {\n                    $scope.updateList(false);\n                }\n            }, 4000);\n            $scope.$on('$destroy', function () {\n                $interval.cancel(timer);\n            });\n        };\n\n        $scope.getVisibleFiles = function () {\n            return $filter('filter')($scope.files, {name: $scope.fileQuery, type: $scope.getTypeFilter()});\n        };\n\n        $scope.getTypeFilter = function () {\n            if ($scope.viewType === 'server' && ($scope.showItems === 'file' || $scope.showItems === 'directory')) {\n                return $scope.showItems;\n            } else {\n                return '';\n            }\n        };\n\n        $scope.selectAllFiles = function () {\n            $scope.getVisibleFiles().forEach(function (file) {\n                $scope.fileChecked[file.name] = $scope.checkAll && $scope.importable(file);\n            });\n        };\n\n        $scope.getSettingsFor = function (fileName, withDefaultSettings) {\n            if (!withDefaultSettings && !_.isEmpty(fileName) && !_.isEmpty($scope.savedSettings[fileName])) {\n                return $scope.savedSettings[fileName];\n            } else {\n                return angular.copy($scope.defaultSettings);\n            }\n        };\n\n        $scope.setSettingsFor = function (fileName, withDefaultSettings) {\n            $scope.settingsFor = fileName;\n            $scope.settings = $scope.getSettingsFor(fileName, withDefaultSettings);\n\n            const options = {\n                templateUrl: 'js/angular/import/templates/settingsModal.html',\n                controller: 'SettingsModalCtrl',\n                resolve: {\n                    settings: function () {\n                        return angular.copy($scope.settings);\n                    },\n                    hasParserSettings: $scope.isLocalLocation,\n                    defaultSettings: function () {\n                        return $scope.defaultSettings;\n                    },\n                    isMultiple: function () {\n                        return !fileName;\n                    }\n                },\n                size: 'lg'\n            };\n\n            if (GuidesService.isActive()) {\n                // Prevents closing dialog when user click outside the if.\n                options.backdrop = 'static';\n                options.keyboard = false;\n            }\n\n            const modalInstance = $modal.open(options);\n\n\n            modalInstance.result.then(function (settings) {\n                $scope.settings = settings;\n                if ($scope.settingsFor === '') {\n                    $scope.importSelected();\n                } else {\n                    $scope.importFile($scope.settingsFor, true);\n                }\n\n            }, function (settings) {\n                $scope.settings = settings;\n            });\n        };\n\n        $scope.updateImport = function (fileName, withDefaultSettings) {\n            $scope.settingsFor = fileName;\n            $scope.settings = $scope.getSettingsFor(fileName, withDefaultSettings);\n\n            $scope.importFile(fileName, false);\n        };\n\n        $scope.stopImport = function (file) {\n            $http({\n                method: 'DELETE',\n                url: $scope.getBaseUrl(),\n                params: {name: file.name, type: file.type}\n            }).success(function () {\n                $scope.updateList();\n            }).error(function (data) {\n                toastr.warning($translate.instant('import.error.could.not.stop', {data: getError(data)}));\n            });\n        };\n\n        $scope.importable = function () {\n            return true;\n        };\n\n        $scope.hasImportable = function () {\n            return _.filter($scope.files, function (f) {\n                return $scope.importable(f);\n            }).length > 0;\n        };\n\n        $scope.showTable = function () {\n            const showTable = $scope.files.length > 0 && ('user' === $scope.viewType || 'server' === $scope.viewType);\n            if ($scope.checkAll) {\n                $scope.switchBatch(true);\n            }\n            return showTable;\n        };\n\n        $scope.switchBatch = function (all) {\n            if (all) {\n                $scope.selectAllFiles();\n            } else {\n                if ($scope.checkAll) {\n                    $scope.checkAll = false;\n                }\n            }\n            $scope.batch = _.map(_.filter($scope.files, function (f) {\n                return $scope.fileChecked[f.name] && $scope.importable(f);\n            }), 'name').length > 0;\n        };\n\n        $scope.rebatch = function () {\n            const newFileChecked = {};\n            $scope.batch = false;\n            _.each($scope.files, function (file) {\n                newFileChecked[file.name] = $scope.fileChecked[file.name];\n                $scope.batch |= $scope.fileChecked[file.name];\n            });\n            if (!$scope.batch) {\n                $scope.checkAll = false;\n            }\n            $scope.fileChecked = newFileChecked;\n        };\n\n        $scope.getSelectedFiles = function () {\n            return _.map(_.filter($scope.getVisibleFiles(), function (f) {\n                return $scope.fileChecked[f.name] && $scope.importable(f);\n            }), 'name');\n        };\n\n        $scope.importSelected = function (overrideSettings) {\n            const selectedFileNames = $scope.getSelectedFiles();\n\n            // Calls the REST API sequentially for the selected files\n            const importNext = function () {\n                const fileName = selectedFileNames.shift();\n                if (fileName) {\n                    if (overrideSettings) {\n                        $scope.settings = $scope.getSettingsFor(fileName);\n                    }\n                    $scope.importFile(fileName, true, importNext);\n                }\n            };\n\n            importNext();\n        };\n\n        const resetStatusOrRemoveEntry = function (names, remove) {\n            $http({\n                method: 'DELETE',\n                url: $scope.getBaseUrl() + '/status',\n                params: {remove: remove},\n                data: names,\n                headers: {'Content-type': 'application/json;charset=utf-8'}\n            }).success(function () {\n                $scope.updateList(true);\n            }).error(function (data) {\n                toastr.warning($translate.instant('import.error.could.not.clear', {data: getError(data)}));\n            });\n        };\n\n        $scope.resetStatus = function (names) {\n            resetStatusOrRemoveEntry(names, false);\n        };\n\n        $scope.resetStatusSelected = function () {\n            $scope.resetStatus($scope.getSelectedFiles());\n        };\n\n        $scope.removeEntry = function (names) {\n            resetStatusOrRemoveEntry(names, true);\n        };\n\n        $scope.removeEntrySelected = function () {\n            $scope.removeEntry($scope.getSelectedFiles());\n        };\n\n        $scope.isLocalLocation = function () {\n            const location = $repositories.getActiveLocation();\n            return location && location.local;\n        };\n        // Settings\n\n        $scope.filterSettings = function (fileName) {\n            let filtered = _.omitBy($scope.savedSettings[fileName], _.isNull);\n            filtered = _.omit(filtered, ['repoLocationHash', 'status', 'message', 'name', 'data', 'type', 'format', 'fileNames', '$$hashKey']);\n            return _.map(_.keys(filtered), function (key) {\n                return [key, filtered[key]];\n            });\n        };\n\n        $scope.getSettings = function () {\n            if (!$scope.canWriteActiveRepo()) {\n                return;\n            }\n\n            $http({\n                method: 'GET',\n                url: 'rest/repositories/' + $repositories.getActiveRepository() + '/import/settings/default'\n            }).success(function (data) {\n                $scope.defaultSettings = data;\n            }).error(function (data) {\n                toastr.warning($translate.instant('import.error.default.settings', {data: getError(data)}));\n            });\n        };\n\n        $scope.getBaseUrl = function () {\n            return 'rest/repositories/' + $repositories.getActiveRepository() + '/import/' + $scope.viewUrl;\n        };\n\n        $scope.pritifySettings = function (settings) {\n            return JSON.stringify(settings, null, ' ');\n        };\n\n        $scope.toTitleCase = function (s) {\n            if (!s) {\n                return s;\n            }\n            return _.upperFirst(s.toLowerCase());\n        };\n    }]);\n\nimportCtrl.controller('ImportCtrl', ['$scope', '$http', 'toastr', '$controller', function ($scope, $http, toastr, $controller) {\n    $scope.loader = true;\n    angular.extend(this, $controller('CommonCtrl', {$scope: $scope}));\n    $scope.viewUrl = 'server';\n    $scope.defaultType = 'server';\n    $scope.tabId = '#import-server';\n    $scope.showItems = 'all';\n\n    $scope.pullList();\n\n    const importServerFiles = function (selectedFileNames, overrideSettings) {\n        if (!$scope.canWriteActiveRepo()) {\n            return;\n        }\n\n        $http({\n            method: 'POST',\n            url: $scope.getBaseUrl(),\n            data: {importSettings: overrideSettings ? null : $scope.settings, fileNames: selectedFileNames}\n        }).success(function () {\n            $scope.updateList();\n            $scope.batch = false;\n            $scope.fileChecked = {};\n        }).error(function (data) {\n            toastr.error($translate.instant('import.could.not.send.file', {data: getError(data)}));\n        });\n    };\n\n    $scope.importSelected = function (overrideSettings) {\n        const selectedFileNames = $scope.getSelectedFiles();\n        importServerFiles(selectedFileNames, overrideSettings);\n    };\n\n    $scope.importFile = function (fileName) {\n        importServerFiles([fileName]);\n    };\n\n    $scope.init();\n}]);\n\nimportCtrl.controller('UploadCtrl', ['$scope', 'Upload', '$http', 'toastr', '$controller', '$modal', '$translate', function ($scope, Upload, $http, toastr, $controller, $modal, $translate) {\n    $scope.loader = true;\n    angular.extend(this, $controller('CommonCtrl', {$scope: $scope}));\n    $scope.viewUrl = 'upload';\n    $scope.defaultType = 'file';\n    $scope.tabId = '#import-user';\n\n    $scope.pullList();\n\n    $scope.currentFiles = [];\n\n    $scope.importable = function () {\n        return true;\n    };\n\n    $scope.fileSelected = function ($files, $file, $newFiles, $duplicateFiles, $invalidFiles) {\n        if ($invalidFiles.length > 0) {\n            $invalidFiles.forEach(function (f) {\n                toastr.warning($translate.instant('import.large.file', {name: f.name, size: Math.floor(f.size / (1024 * 1024))}));\n            });\n        }\n    };\n\n    $scope.$watchCollection('currentFiles', function () {\n        function disallowBZip2Files() {\n            $scope.currentFiles.forEach(function (f) {\n                if (f.name.substr(f.name.lastIndexOf('.') + 1) === 'bz2') {\n                    const fileIdx = $scope.currentFiles.indexOf(f);\n                    if (fileIdx > -1) {\n                        $scope.currentFiles.splice(fileIdx, 1);\n                    }\n                    toastr.error($translate.instant('import.could.not.upload', {name: f.name}));\n                }\n            });\n        }\n\n        if ($scope.currentFiles) {\n            // RDF4J does not support decompressing .bz2 files so we want to reject importing them\n            disallowBZip2Files();\n        }\n        $scope.files = _.uniqBy(\n            _.union(\n                _.map($scope.currentFiles, function (file) {\n                    return {name: file.name, type: 'file', file: file}\n                }),\n                $scope.files\n            ),\n            function (file) {\n                return file.name;\n            }\n        );\n        $scope.savedSettings = _.mapKeys(_.filter($scope.files, 'parserSettings'), 'name');\n        _.each($scope.currentFiles, function (file) {\n            $scope.updateImport(file.name);\n        });\n    });\n\n    $scope.importFile = function (fileName, startImport, nextCallback) {\n        const fileIndex = _.findIndex($scope.files, {name: fileName});\n        if (fileIndex < 0) {\n            toastr.warning($translate.instant('import.no.such.file', {name: fileName}));\n        } else {\n            const file = $scope.files[fileIndex];\n            if (file.type === 'text') {\n                // Import text snippet\n                $scope.settings.name = file.name;\n                $scope.settings.type = file.type;\n                $scope.settings.data = file.data;\n                $scope.settings.format = file.format;\n                file.status = FILE_STATUS.PENDING;\n                $http({\n                    method: 'POST',\n                    url: $scope.getBaseUrl() + (startImport ? '' : '/update') + '/text',\n                    data: $scope.settings\n                }).success(function () {\n                    $scope.updateList();\n                }).error(function (data) {\n                    toastr.error($translate.instant('import.could.not.send.data', {data: getError(data)}));\n                    file.status = FILE_STATUS.ERROR;\n                    file.message = getError(data);\n                }).finally(nextCallback || function () {\n                });\n            } else if (file.type === 'url') {\n                // Submit URL\n                $scope.settings.name = file.name;\n                $scope.settings.type = file.type;\n                $scope.settings.data = file.data;\n                $scope.settings.format = file.format;\n                file.status = FILE_STATUS.PENDING;\n                $http({\n                    method: 'POST',\n                    url: $scope.getBaseUrl() + (startImport ? '' : '/update') + '/url',\n                    data: $scope.settings\n                }).success(function () {\n                    $scope.updateList();\n                }).error(function (data) {\n                    toastr.error($translate.instant('import.could.not.send.url', {data: getError(data)}));\n                }).finally(nextCallback || function () {\n                });\n            } else {\n                // Upload real file\n                $scope.settings.name = file.name;\n                let data;\n                if (file.file) {\n                    data = {file: file.file, importSettings: Upload.jsonBlob($scope.settings)};\n                } else {\n                    data = {importSettings: Upload.jsonBlob($scope.settings)};\n                }\n                Upload.upload({\n                    url: $scope.getBaseUrl() + (startImport ? '' : '/update') + '/file',\n                    data: data\n                }).progress(function (evt) {\n                    if (file.file) {\n                        file.file = null;\n                        file.status = FILE_STATUS.UPLOADING;\n                    } else if (file.status !== FILE_STATUS.UPLOADING) {\n                        file.status = FILE_STATUS.PENDING;\n                    }\n\n                    if (file.status === FILE_STATUS.UPLOADING) {\n                        const progressPercentage = parseInt(100.0 * evt.loaded / evt.total);\n                        file.message = progressPercentage + '% uploaded';\n                    }\n                }).success(function () {\n                    $scope.updateList();\n                }).error(function (data) {\n                    toastr.error($translate.instant('import.could.not.upload.file', {data: getError(data)}));\n                    file.status = FILE_STATUS.ERROR;\n                    file.message = getError(data);\n                }).finally(nextCallback || function () {\n                });\n            }\n        }\n    };\n\n    $scope.updateTextImport = function (settings) {\n        $scope.updating = true;\n        $http({\n            method: 'POST',\n            url: $scope.getBaseUrl() + '/update/text',\n            data: settings\n        }).success(function (data) {\n        }).error(function (data) {\n            toastr.error($translate.instant('import.could.not.update.text', {data: getError(data)}));\n        }).finally(function () {\n            $scope.updating = false;\n        });\n    };\n\n    $scope.pastedDataIdx = 1;\n\n    const formattedDate = function () {\n        const date = new Date();\n        return date.getFullYear() + '-' + _.padStart(date.getMonth() + 1, 2, '0') + '-' + _.padStart(date.getDate(), 2, '0')\n            + ' ' + _.padStart(date.getHours(), 2, '0') + ':' + _.padStart(date.getMinutes(), 2, '0') + ':' + _.padStart(date.getSeconds(), 2, '0')\n            + '.' + _.padStart(date.getMilliseconds(), 3, '0');\n    };\n\n    $scope.pasteData = function (file) {\n        const scope = {};\n        if (file) {\n            scope.rdfText = file.data;\n        }\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/import/templates/textSnippet.html',\n            controller: 'TextCtrl',\n            resolve: {\n                text: function () {\n                    return file ? file.data : '';\n                },\n                format: function () {\n                    return file ? file.format : 'text/turtle';\n                }\n            }\n        });\n\n        modalInstance.result.then(function (data) {\n            if (file) {\n                if ((file.data !== data.text || file.format !== data.format) && file.status !== FILE_STATUS.NONE) {\n                    file.status = FILE_STATUS.NONE;\n                    file.message = $translate.instant('import.text.snippet.not.imported');\n                }\n                file.data = data.text;\n                file.format = data.format;\n                $scope.updateTextImport(file);\n            } else {\n                file = {type: 'text', name: 'Text snippet ' + formattedDate(), format: data.format, data: data.text};\n                $scope.files.unshift(file);\n                $scope.updateImport(file.name);\n            }\n            if (data.startImport) {\n                $scope.setSettingsFor(file.name);\n            }\n        });\n    };\n\n    $scope.rdfDataFromURL = function () {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/import/templates/urlImport.html',\n            controller: 'UrlCtrl',\n            scope: $scope\n        });\n\n        modalInstance.result.then(function (data) {\n            // URL may already exist\n            const existing = _.find($scope.files, {type: 'url', name: data.url});\n            if (existing) {\n                existing.format = data.format;\n            } else {\n                $scope.files.unshift({type: 'url', name: data.url, format: data.format, data: data.url});\n            }\n            $scope.updateImport(data.url, true);\n            if (data.startImport) {\n                $scope.setSettingsFor(data.url, true);\n            }\n        });\n    };\n\n    $scope.init();\n}]);\n\nimportCtrl.controller('UrlCtrl', ['$scope', '$modalInstance', 'toastr', function ($scope, $modalInstance) {\n    $scope.importFormat = {name: 'Auto', type: ''};\n    $scope.startImport = true;\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss();\n    };\n\n    $scope.ok = function () {\n        $modalInstance.close({\n            url: $scope.dataUrl,\n            format: $scope.importFormat.type,\n            startImport: $scope.startImport\n        });\n    };\n}]);\n\nimportCtrl.controller('TextCtrl', ['$scope', '$modalInstance', 'text', 'format', function ($scope, $modalInstance, text, format) {\n    $scope.importFormats = [\n        {name: 'RDF/JSON', type: 'application/rdf+json'},\n        {name: 'JSON-LD', type: 'application/ld+json'},\n        {name: 'RDF/XML', type: 'application/rdf+xml'},\n        {name: 'N3', type: 'text/rdf+n3'},\n        {name: 'N-Triples', type: 'text/plain'},\n        {name: 'N-Quads', type: 'text/x-nquads'},\n        {name: 'Turtle', type: 'text/turtle'},\n        {name: 'Turtle*', type: 'application/x-turtlestar'},\n        {name: 'TriX', type: 'application/trix'},\n        {name: 'TriG', type: 'application/x-trig'},\n        {name: 'TriG*', type: 'application/x-trigstar'},\n    ];\n\n    $scope.rdfText = text;\n    $scope.importFormat = _.find($scope.importFormats, {type: format});\n    $scope.startImport = true;\n\n    $scope.setFormat = function (format) {\n        $scope.importFormat = format;\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss();\n    };\n\n    $scope.ok = function () {\n        $modalInstance.close({\n            text: $scope.rdfText,\n            format: $scope.importFormat.type,\n            startImport: $scope.startImport\n        });\n    };\n}]);\n\nimportCtrl.controller('TabCtrl', ['$scope', '$location', function ($scope, $location) {\n    $scope.viewType = $location.hash();\n    if ($scope.viewType !== 'user' && $scope.viewType !== 'server') {\n        $scope.viewType = 'user';\n    }\n    $scope.isCollapsed = false;\n    if ($scope.viewType === 'user') {\n        $scope.templateUrl = 'js/angular/import/templates/uploadInfo.html';\n    } else {\n        $scope.templateUrl = 'js/angular/import/templates/importInfo.html';\n    }\n    $scope.changeHelpTemplate = function (templateFile) {\n        $scope.templateUrl = 'js/angular/import/templates/' + templateFile;\n    };\n    $scope.commonUrl = 'js/angular/import/templates/commonInfo.html';\n}]);\n\nimportCtrl.controller('SettingsModalCtrl', ['$scope', '$modalInstance', 'toastr', 'UriUtils', 'settings', 'hasParserSettings', 'defaultSettings', 'isMultiple', '$translate',\n    function ($scope, $modalInstance, toastr, UriUtils, settings, hasParserSettings, defaultSettings, isMultiple, $translate) {\n    $scope.hasError = function (error, input) {\n        return _.find(error, function (o) {\n            return input === o['$name'];\n        });\n    };\n\n    $scope.settings = settings;\n    $scope.hasParserSettings = hasParserSettings;\n    if ($scope.settings.context) {\n        if ($scope.settings.context === 'default') {\n            $scope.target = 'default';\n            $scope.settings.context = '';\n        } else {\n            $scope.target = 'named';\n        }\n    } else {\n        $scope.target = 'data';\n    }\n    $scope.isMultiple = isMultiple;\n    $scope.enableReplace = !!($scope.settings.replaceGraphs && $scope.settings.replaceGraphs.length);\n\n    const fixSettings = function () {\n        if ($scope.target === 'default') {\n            $scope.settings.context = 'default';\n        } else if ($scope.target === 'data') {\n            $scope.settings.context = '';\n        }\n        if ($scope.enableReplace) {\n            if ($scope.target === 'default' || $scope.target === 'named') {\n                $scope.settings.replaceGraphs = [$scope.settings.context];\n            }\n        } else {\n            $scope.settings.replaceGraphs = [];\n        }\n    };\n\n    $scope.ok = function () {\n        // resets the validity of a field only used for temporary things\n        $scope.settingsForm.replaceGraph.$setValidity('replaceGraph', true);\n\n        if ($scope.settingsForm.$valid) {\n            fixSettings();\n            $modalInstance.close($scope.settings);\n        }\n    };\n\n    $scope.cancel = function () {\n        fixSettings();\n        $modalInstance.dismiss($scope.settings);\n    };\n\n    $scope.reset = function () {\n        $scope.settings = angular.copy(defaultSettings);\n        $scope.target = 'data';\n    };\n\n    $scope.addReplaceGraph = function (graph) {\n        let valid = true;\n        if (graph !== 'default') {\n            valid = UriUtils.isValidIri(graph);\n        }\n        $scope.settingsForm.replaceGraph.$setTouched();\n        $scope.settingsForm.replaceGraph.$setValidity('replaceGraph', valid);\n\n        if ($scope.settingsForm.replaceGraph.$valid) {\n            $scope.settings.replaceGraphs = $scope.settings.replaceGraphs || [];\n            if (_.indexOf($scope.settings.replaceGraphs, graph) === -1) {\n                $scope.replaceGraph = '';\n                $scope.settings.replaceGraphs.push(graph);\n            } else {\n                toastr.warning($translate.instant('import.graph.already.in.list'));\n            }\n        }\n    };\n\n    $scope.checkEnterReplaceGraph = function (event, graph) {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n\n            $scope.addReplaceGraph(graph);\n        }\n    };\n\n    $scope.showAdvancedSettings = false;\n    $scope.switchParserSettings = function () {\n        $scope.showAdvancedSettings = !$scope.showAdvancedSettings;\n    };\n}]);\n"],"sourceRoot":""}