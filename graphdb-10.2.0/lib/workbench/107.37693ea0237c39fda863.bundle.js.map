{"version":3,"sources":["webpack:///./src/js/angular/repositories/fedx-repo.directive.js"],"names":["fedxRepoDirective","$modal","RepositoriesRestService","toastr","$translate","restrict","scope","templateUrl","link","$scope","LOCAL_REPO_STORE","fedxMembers","knownRepos","allAttachedRepos","editRepoPage","repositoryInfo","params","member","value","slice","populateKnownRepos","filter","repo","repositoryServer","id","repositoryName","location","local","getKnownRepos","getRepositories","success","response","repos","_","values","forEach","push","apply","cloneDeep","error","msg","getError","instant","then","setWritableRepo","currentWritable","find","writable","store","JSON","stringify","getActiveClass","checkIfRepoExist","length","getRepositoryServer","localReposTimer","setInterval","updateMembers","removeEndingSlash","url","checkEditMode","model","editMode","$on","clearInterval","addMember","repository","repoType","type","respectRights","username","password","supportsASKQueries","removeMember","el","endpoint","repositoryLocation","addRemoteMember","mode","sparqlEndpoint","$modalInstance","open","getMemberIcon","editFedXRepository","resolveName","cancel","dismiss","ok","resolvedName","name","close","angular","module","directive","$inject"],"mappings":"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","file":"107.37693ea0237c39fda863.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.repositories.fedx-repo.directive', [])\n    .directive('fedxRepo', fedxRepoDirective);\n\nfedxRepoDirective.$inject = ['$modal', 'RepositoriesRestService', 'toastr', '$translate'];\n\nfunction fedxRepoDirective($modal, RepositoriesRestService, toastr, $translate) {\n    return {\n        restrict: 'E',\n        scope: true,\n        templateUrl: 'js/angular/repositories/templates/fedx-repo.html',\n\n        link: linkFunc\n    };\n\n    function linkFunc($scope) {\n\n        const LOCAL_REPO_STORE = 'ResolvableRepository';\n        const REMOTE_REPO_STORE = 'RemoteRepository';\n        const SPARQL_ENDPOINT_STORE = 'SPARQLEndpoint';\n        const NATIVE_STORE = 'NativeStore';\n\n        $scope.fedxMembers = [];\n        $scope.knownRepos = [];\n        $scope.allAttachedRepos = [];\n\n        if ($scope.editRepoPage) {\n            $scope.fedxMembers = $scope.repositoryInfo.params.member.value.slice();\n        }\n\n        function getRepositories() {\n            return RepositoriesRestService.getRepositories($scope.repositoryInfo.location)\n                .success(function (response) {\n                    let repos = [];\n                    _.values(response).forEach((value) => {\n                        repos.push.apply(repos, value);\n                    });\n                    $scope.allAttachedRepos = _.cloneDeep(repos);\n                }).error(function (response) {\n                    const msg = getError(response);\n                    toastr.error(msg, $translate.instant('common.error'));\n                });\n        }\n\n        function populateKnownRepos() {\n            for (const member of $scope.fedxMembers) {\n                $scope.knownRepos = $scope.knownRepos.filter(function (repo) {\n                    if (member.repositoryServer) {\n                        // if the member is a remote attached member\n                        return repo.id !== member.repositoryName || repo.location !== member.repositoryServer;\n                    } else {\n                        // if the member is a local one\n                        return repo.id !== member.repositoryName || !repo.local;\n                    }\n                });\n            }\n        }\n\n        $scope.setWritableRepo = function (member) {\n            let currentWritable = getWritableRepo();\n            if (currentWritable) {\n                if (currentWritable.store === LOCAL_REPO_STORE && (member.store !== LOCAL_REPO_STORE || currentWritable.repositoryName !== member.repositoryName) ) {\n                    currentWritable.writable = 'false';\n                } else if (currentWritable.store === REMOTE_REPO_STORE && (member.store !== REMOTE_REPO_STORE || currentWritable.repositoryName !== member.repositoryName || currentWritable.repositoryServer !== member.repositoryServer)) {\n                    currentWritable.writable = 'false';\n                }\n            }\n            member.writable = JSON.stringify(member.writable === 'false');\n        }\n\n        $scope.getActiveClass = function (member) {\n            return member.writable === 'true' ? ' active' : '';\n        }\n\n        function getWritableRepo() {\n            return $scope.fedxMembers.find(member => member.writable === \"true\");\n        }\n\n        function getKnownRepos() {\n            getRepositories()\n                .then(function () {\n                    $scope.knownRepos = $scope.allAttachedRepos.slice();\n                    populateKnownRepos();\n                });\n        }\n\n        $scope.checkIfRepoExist = function (member) {\n            if (!$scope.allAttachedRepos.length) {\n                return true;\n            }\n            if (member.store === LOCAL_REPO_STORE) {\n                return $scope.allAttachedRepos.find(repo => repo.id === member.repositoryName && !repo.location);\n            } else if (member.store === REMOTE_REPO_STORE) {\n                return $scope.allAttachedRepos.find(repo => repo.id === member.repositoryName && repo.location === member.repositoryServer);\n            } else {\n                return true;\n            }\n        }\n\n        $scope.getRepositoryServer = function (repo) {\n            if (repo.local) {\n                return \"Local\";\n            } else {\n                return repo.location;\n            }\n        }\n\n        const localReposTimer = setInterval(function () {\n            getKnownRepos();\n        }, 5000);\n\n        $scope.$on('$destroy', function () {\n            clearInterval(localReposTimer);\n        });\n\n        $scope.addMember = function(repository) {\n            let member;\n            if ($scope.getRepositoryServer(repository) === \"Local\") {\n                member = {\n                    store: LOCAL_REPO_STORE,\n                    repositoryName: repository.id,\n                    repoType: repository.type,\n                    respectRights: \"true\",\n                    writable: \"false\"\n                };\n            } else {\n                member = {\n                    store: REMOTE_REPO_STORE,\n                    repositoryName: repository.id,\n                    repositoryServer: repository.location,\n                    username: '',\n                    password: '',\n                    supportsASKQueries: \"true\",\n                    writable: \"false\"\n                };\n            }\n            $scope.knownRepos = $scope.knownRepos.filter(repo => repo.id !== repository.id || repo.location !== repository.location);\n            updateMembers(member);\n        }\n\n        $scope.removeMember = function (member) {\n            if (member.store && member.store === LOCAL_REPO_STORE) {\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.store !== member.store || el.repositoryName !== member.repositoryName && !el.repositoryServer);\n                getKnownRepos();\n            } else if (member.store && member.store === SPARQL_ENDPOINT_STORE) {\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.endpoint !== member.endpoint);\n            } else if (member.store && member.store === NATIVE_STORE) {\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryLocation !== member.repositoryLocation);\n            } else if (member.store && member.store === REMOTE_REPO_STORE) {\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.store !== member.store || el.repositoryName !== member.repositoryName\n                                                                                                || el.repositoryServer !== member.repositoryServer);\n                getKnownRepos();\n            }\n            $scope.repositoryInfo.params['member'].value = $scope.fedxMembers;\n        }\n\n        $scope.addRemoteMember = function () {\n            $scope.mode = 'remote';\n            $scope.model = {\n                editMode: false,\n                store: REMOTE_REPO_STORE,\n                repositoryName: '',\n                repositoryServer: '',\n                sparqlEndpoint: '',\n                username: '',\n                password: '',\n                supportsASKQueries: \"true\",\n                writable: \"false\"\n            }\n\n            $scope.$modalInstance = $modal.open({\n                templateUrl: 'js/angular/templates/modal/add-fedx-remote-repo.html',\n                scope: $scope,\n            });\n        };\n\n        $scope.getMemberIcon = function (member) {\n            if (member.repoType) {\n                return 'icon-repo-' + member.repoType;\n            } else if (member.store === NATIVE_STORE) {\n                return 'icon-warning';\n            } else {\n                return 'icon-link';\n            }\n        }\n\n        $scope.editFedXRepository = function (member) {\n            if (member.store === LOCAL_REPO_STORE) {\n                $scope.mode = 'local';\n                $scope.model = {\n                    editMode: true,\n                    store: member.store,\n                    respectRights: member.respectRights,\n                    repositoryName: member.repositoryName,\n                    repoType: member.repoType,\n                    writable: member.writable\n                }\n            } else {\n                $scope.mode = 'remote';\n                $scope.model = {\n                    editMode: true,\n                    store: member.store,\n                    repositoryName: member.repositoryName,\n                    repositoryServer: member.repositoryServer,\n                    sparqlEndpoint: member.store === SPARQL_ENDPOINT_STORE ? member.endpoint : member.repositoryLocation,\n                    username: member.username,\n                    password: member.password,\n                    supportsASKQueries: member.supportsASKQueries,\n                    writable: member.writable\n                }\n            }\n\n            $scope.$modalInstance = $modal.open({\n                templateUrl: 'js/angular/templates/modal/add-fedx-remote-repo.html',\n                scope: $scope\n            });\n        };\n\n        $scope.resolveName = function (member) {\n            switch (member.store) {\n                case LOCAL_REPO_STORE : {\n                    return member.repositoryName;\n                }\n                case REMOTE_REPO_STORE : {\n                    return member.repositoryName + '@' + member.repositoryServer;\n                }\n                case SPARQL_ENDPOINT_STORE : {\n                    return member.endpoint;\n                }\n                case NATIVE_STORE : {\n                    return member.repositoryLocation;\n                }\n                default :\n                    return \"\";\n            }\n        }\n\n        $scope.cancel = function () {\n            $scope.$modalInstance.dismiss('cancel');\n        };\n\n        function updateMembers(member) {\n            $scope.fedxMembers.push(member);\n            $scope.repositoryInfo.params['member'].value = $scope.fedxMembers;\n        }\n\n        function removeEndingSlash(url) {\n            return url.slice(-1) === '/' ? url.slice(0, -1) : url\n        }\n\n        function checkEditMode() {\n            return $scope.editRepoPage && !$scope.editRepoPage || !$scope.model.editMode;\n        }\n\n        $scope.ok = function () {\n            let member;\n            if ($scope.model.repositoryName && $scope.model.store === LOCAL_REPO_STORE) {\n                member = {\n                    store: LOCAL_REPO_STORE,\n                    repositoryName: $scope.model.repositoryName,\n                    repoType: $scope.model.repoType,\n                    respectRights: $scope.model.respectRights,\n                    writable: $scope.model.writable\n                }\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryName !== member.repositoryName || el.store !== member.store );\n            } else if ($scope.model.repositoryName && $scope.model.store === REMOTE_REPO_STORE) {\n                member = {\n                    store: REMOTE_REPO_STORE,\n                    repositoryName: $scope.model.repositoryName,\n                    repositoryServer: removeEndingSlash($scope.model.repositoryServer),\n                    username: $scope.model.username,\n                    password: $scope.model.password,\n                    writable: $scope.model.writable\n                };\n                if (checkEditMode() && $scope.fedxMembers.find(el => el.repositoryName === member.repositoryName\n                    && el.repositoryServer === member.repositoryServer)) {\n                    let resolvedName = $scope.resolveName(member);\n                    toastr.error($translate.instant('fedx.repo.already.added.member.error', {name: resolvedName}));\n                    $scope.$modalInstance.close();\n                    return;\n                }\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryName !== member.repositoryName\n                    || el.repositoryServer !== member.repositoryServer);\n            } else {\n                member = {\n                    store: SPARQL_ENDPOINT_STORE,\n                    endpoint: removeEndingSlash($scope.model.sparqlEndpoint),\n                    username: $scope.model.username,\n                    password: $scope.model.password,\n                    supportsASKQueries: $scope.model.supportsASKQueries,\n                    writable: $scope.model.writable\n                };\n\n                if (checkEditMode() && $scope.fedxMembers.find(el => el.endpoint === member.endpoint)) {\n                    let resolvedName = $scope.resolveName(member);\n                    toastr.error($translate.instant('fedx.repo.already.added.sparql.endpoint.error', {name: resolvedName}));\n                    $scope.$modalInstance.close();\n                    return;\n                }\n\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.endpoint !== member.endpoint);\n            }\n\n            updateMembers(member);\n            populateKnownRepos();\n            $scope.$modalInstance.close();\n        };\n\n        $scope.$on('changedLocation', function () {\n            $scope.fedxMembers = [];\n            getKnownRepos();\n        });\n\n        getKnownRepos();\n    }\n}\n"],"sourceRoot":""}