{"version":3,"sources":["webpack:///./src/js/angular/guides/steps/core/plugin.js"],"names":["BASIC_STEP","title","content","elementSelector","undefined","placement","url","type","maxWaitTime","canBePaused","onNextClick","onNextValidate","onPreviousClick","skipPoint","beforeShowPromise","services","GuideUtils","waitFor","catch","error","toastr","$translate","instant","PluginRegistry","add","guideBlockName","getStep","options","stepDescription","angular","extend","advanceOn","selector","event","initPreviousStep","defaultInitPreviousStep","show","guide","confirmCancel","hide"],"mappings":"4EAAA,MAAMA,EAAa,CACfC,MAAO,GACPC,QAAS,GACTC,qBAAiBC,EACjBC,UAAW,SACXC,SAAKF,EACLG,KAAM,oBACNC,YAAa,EACbC,aAAa,EACbC,iBAAaN,EACbO,oBAAgBP,EAChBQ,qBAAiBR,EACjBS,WAAW,GAUTC,EAAoB,CAACC,EAAUZ,EAAiBK,IAC3C,IACIO,EAASC,WAAWC,QAAQd,EAAiBK,GAC/CU,MAAOC,IAIJ,MAFAJ,EAASK,OAAOD,MAAMJ,EAASM,WAAWC,QAAQ,mCAE5CH,IAKtBI,eAAeC,IAAI,aAAc,CAC7B,CACIC,eAAgB,oBAChBC,QAAS,CAACC,EAASZ,KACf,MAIMa,EAAkBC,QAAQC,OAAO,GAAI9B,EAAY,CACnD+B,UAAW,CACPC,SAAUL,EAAQxB,gBAClB8B,MAAO,SAEXC,iBAAkBnB,EAASC,WAAWmB,yBACvCR,EAVoB,CACnBpB,KAAM,cAcV,OAHKqB,EAAgBd,oBACjBc,EAAgBd,kBAAoBA,EAAkBC,EAAUa,EAAgBzB,gBAAiByB,EAAgBpB,cAE9GoB,IAGf,CACIH,eAAgB,oBAChBC,QAAS,CAACC,EAASZ,KACf,MAGMa,EAAkBC,QAAQC,OAAO,GAAI9B,EAAY,CAC/CkC,iBAAkBnB,EAASC,WAAWmB,yBAE1CR,EANmB,CACnBpB,KAAM,aASV,OAHKqB,EAAgBd,oBACjBc,EAAgBd,kBAAoBA,EAAkBC,EAAUa,EAAgBzB,gBAAiByB,EAAgBpB,cAE9GoB,IAGf,CACIH,eAAgB,gBAChBC,QAAS,CAACC,EAASZ,KACf,MAGMa,EAAkBC,QAAQC,OAAO,GAAI9B,EAAY,CACnDkC,iBAAkBnB,EAASC,WAAWmB,yBACvCR,EALoB,CACnBpB,KAAM,UAQV,OAHKqB,EAAgBd,oBACjBc,EAAgBd,kBAAoBA,EAAkBC,EAAUa,EAAgBzB,gBAAiByB,EAAgBpB,cAE9GoB,IAGf,CACIH,eAAgB,eAChBC,QAAS,CAACC,EAASZ,IAIRc,QAAQC,OAAO,GAAI9B,EAAY,CAClCkC,iBAAkBnB,EAASC,WAAWmB,yBACvCR,EALoB,CACnBpB,KAAM,cAOlB,CACIkB,eAAgB,YAChBC,QAAS,CAACC,EAASZ,IAYRc,QAAQC,OAAO,GAAI9B,EAAY,CAClCkC,iBAAkBnB,EAASC,WAAWmB,yBACvCR,EAboB,CACnBpB,KAAM,WACNN,MAAO,sCACPC,QAAS,wCACTkC,KAAOC,GAAU,KACbA,EAAMV,QAAQW,eAAgB,GAElCC,KAAOF,GAAU,KACbA,EAAMV,QAAQW,eAAgB","file":"93.b1246b5bd0829d1b06e4.bundle.js","sourcesContent":["const BASIC_STEP = {\n    title: '',\n    content: '',\n    elementSelector: undefined,\n    placement: 'bottom',\n    url: undefined,\n    type: 'read-only-element',\n    maxWaitTime: 3,\n    canBePaused: true,\n    onNextClick: undefined,\n    onNextValidate: undefined,\n    onPreviousClick: undefined,\n    skipPoint: false\n};\n\n/**\n * This function will be called before show a step. Step will be shown after promise is resolve. It waits element of step to be visible on the page.\n * @param {*} services\n * @param {string} elementSelector\n * @param {number} maxWaitTime\n * @return {function(): *}\n */\nconst beforeShowPromise = (services, elementSelector, maxWaitTime) => {\n    return () => {\n        return services.GuideUtils.waitFor(elementSelector, maxWaitTime)\n            .catch((error) => {\n                // error is caught just to show notification in generic way.\n                services.toastr.error(services.$translate.instant('guide.unexpected.error.message'));\n                // throw the error, otherwise guide will continue with the next step.\n                throw error;\n            });\n    };\n};\n\nPluginRegistry.add('guide.step', [\n    {\n        guideBlockName: 'clickable-element',\n        getStep: (options, services) => {\n            const notOverridable = {\n                type: 'clickable'\n            };\n\n            const stepDescription = angular.extend({}, BASIC_STEP, {\n                advanceOn: {\n                    selector: options.elementSelector,\n                    event: 'click'\n                },\n                initPreviousStep: services.GuideUtils.defaultInitPreviousStep\n            }, options, notOverridable);\n\n            if (!stepDescription.beforeShowPromise) {\n                stepDescription.beforeShowPromise = beforeShowPromise(services, stepDescription.elementSelector, stepDescription.maxWaitTime);\n            }\n            return stepDescription;\n        }\n    },\n    {\n        guideBlockName: 'read-only-element',\n        getStep: (options, services) => {\n            const notOverridable = {\n                type: 'readonly'\n            };\n            const stepDescription = angular.extend({}, BASIC_STEP, {\n                    initPreviousStep: services.GuideUtils.defaultInitPreviousStep\n                },\n                options, notOverridable);\n            if (!stepDescription.beforeShowPromise) {\n                stepDescription.beforeShowPromise = beforeShowPromise(services, stepDescription.elementSelector, stepDescription.maxWaitTime);\n            }\n            return stepDescription;\n        }\n    },\n    {\n        guideBlockName: 'input-element',\n        getStep: (options, services) => {\n            const notOverridable = {\n                type: 'input'\n            };\n            const stepDescription = angular.extend({}, BASIC_STEP, {\n                initPreviousStep: services.GuideUtils.defaultInitPreviousStep\n            }, options, notOverridable);\n            if (!stepDescription.beforeShowPromise) {\n                stepDescription.beforeShowPromise = beforeShowPromise(services, stepDescription.elementSelector, stepDescription.maxWaitTime);\n            }\n            return stepDescription;\n        }\n    },\n    {\n        guideBlockName: 'info-message',\n        getStep: (options, services) => {\n            const notOverridable = {\n                type: 'readonly'\n            };\n            return angular.extend({}, BASIC_STEP, {\n                initPreviousStep: services.GuideUtils.defaultInitPreviousStep\n            }, options, notOverridable);\n        }\n    },\n    {\n        guideBlockName: 'guide-end',\n        getStep: (options, services) => {\n            const notOverridable = {\n                type: 'readonly',\n                title: 'guide.step_plugin.guide-ended.title',\n                content: 'guide.step_plugin.guide-ended.content',\n                show: (guide) => () => {\n                    guide.options.confirmCancel = false;\n                },\n                hide: (guide) => () => {\n                    guide.options.confirmCancel = true;\n                }\n            };\n            return angular.extend({}, BASIC_STEP, {\n                initPreviousStep: services.GuideUtils.defaultInitPreviousStep\n            }, options, notOverridable);\n        }\n    }\n]);\n"],"sourceRoot":""}