{"version":3,"sources":["webpack:///./src/js/angular/queries/app.js","webpack:///./src/js/angular/queries/controllers.js"],"names":["angular","module","queriesCtrl","controller","$scope","$modal","toastr","$interval","$repositories","$jwtAuth","ModalService","MonitoringRestService","$translate","loader","stringLimit","expanded","error","paused","parser","document","createElement","parseNode","node","shortUrl","indexOf","href","hostname","ip","blocks","split","i","sequence","length","parseInt","containsIPV4","port","match","togglePause","getQueries","getQueriesRunning","getActiveRepository","monitorQuery","success","data","newQueries","noQueries","queries","parsedNode","trackId","noActiveRepository","getError","timer","isActiveRepoOntopType","$on","cancel","deleteQueryHttp","queryId","deleteQuery","instant","msg","abortQuery","openSimpleModal","title","message","warning","result","then","downloadQuery","filename","link","encodeURIComponent","isAuthenticated","getAuthToken","window","open","toggleQueryExpanded","$modalInstance","ok","close","dismiss"],"mappings":"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","file":"43.34060633fa9548ec3437.bundle.js","sourcesContent":["import 'angular/core/services';\nimport 'angular/core/directives';\nimport 'angular/queries/controllers';\n\nconst modules = [\n    'toastr',\n    'ui.bootstrap',\n    'graphdb.framework.jmx.queries.controllers',\n    'graphdb.framework.core.directives'\n];\n\nangular.module('graphdb.framework.jmx.queries', modules);\n","import 'angular/core/services';\nimport 'angular/rest/monitoring.rest.service';\n\nconst queriesCtrl = angular.module('graphdb.framework.jmx.queries.controllers', [\n    'ui.bootstrap',\n    'toastr',\n    'graphdb.framework.rest.monitoring.service'\n]);\n\nqueriesCtrl.controller('QueriesCtrl', ['$scope', '$modal', 'toastr', '$interval', '$repositories', '$jwtAuth', 'ModalService', 'MonitoringRestService', '$translate',\n    function ($scope, $modal, toastr, $interval, $repositories, $jwtAuth, ModalService, MonitoringRestService, $translate) {\n\n        $scope.loader = true;\n        $scope.stringLimit = 500;\n        $scope.expanded = {};\n        $scope.error = '';\n        $scope.paused = false;\n\n        function containsIPV4(ip) {\n            const blocks = ip.split('.');\n            for (let i = 0, sequence = 0; i < blocks.length; i++) {\n                if (parseInt(blocks[i], 10) >= 0 && parseInt(blocks[i], 10) <= 255) {\n                    sequence++;\n                } else {\n                    sequence = 0;\n                }\n                if (sequence === 4) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        const parser = document.createElement('a');\n\n        // Parses a node of the kind http://host.example.com:7200/repositories/repo#NN,\n        // where NN is the track ID into an array [NN, host:7200, repo].\n        $scope.parseNode = function (node) {\n            if (node == null) {\n                return null;\n            }\n\n            let shortUrl = 'local';\n            if (node.indexOf('://localhost:') < 0 && node.indexOf('://localhost/') < 0) {\n                parser.href = node;\n                let hostname = parser.hostname;\n                if (!containsIPV4(parser.hostname)) {\n                    hostname = parser.hostname.split('.')[0];\n                }\n                shortUrl = hostname + ':' + parser.port;\n            }\n            const match = node.match(/\\/repositories\\/([^\\/]+)#(\\d+)/); // eslint-disable-line no-useless-escape\n\n            return [match[2], shortUrl, match[1]];\n        };\n\n        $scope.togglePause = function () {\n            $scope.paused = !$scope.paused;\n        }\n\n        $scope.getQueries = function () {\n            // Skip execution if already getting from previous call, if paused, if jolokia returned an error,\n            // or if no repository is available\n            if ($scope.getQueriesRunning || $scope.paused || $scope.error || !$repositories.getActiveRepository()) {\n                return;\n            }\n\n            $scope.getQueriesRunning = true;\n            MonitoringRestService.monitorQuery($repositories.getActiveRepository()).success(function (data) {\n                const newQueries = data;\n                $scope.noQueries = newQueries.length === 0;\n\n                // Converts array to object. Angular seems to handle updates on objects better, i.e.\n                // it doesn't recreate DOM elements for queries that are already displayed.\n                $scope.queries = {};\n                for (let i = 0; i < newQueries.length; i++) {\n                    newQueries[i].parsedNode = $scope.parseNode(newQueries[i].node);\n                    $scope.queries[newQueries[i].trackId] = newQueries[i];\n                }\n\n                $scope.noActiveRepository = false;\n                $scope.loader = false;\n                $scope.getQueriesRunning = false;\n            }).error(function (data) {\n                $scope.error = getError(data);\n                $scope.loader = false;\n                $scope.getQueriesRunning = false;\n            });\n        };\n\n        const timer = $interval(function () {\n            // Don't call getQueries for Ontop type repository\n            if ($repositories.isActiveRepoOntopType()) {\n                return;\n            }\n            $scope.getQueries();\n        }, 1000);\n\n        $scope.$on('$destroy', function () {\n            $interval.cancel(timer);\n        });\n\n        $scope.deleteQueryHttp = function (queryId) {\n\n            $scope.loader = true;\n            MonitoringRestService.deleteQuery(queryId, $repositories.getActiveRepository()).success(function () {\n                toastr.success($translate.instant('abort.request.sent.msg'));\n                $scope.loader = false;\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('common.error'));\n\n                $scope.loader = false;\n            });\n        };\n\n        $scope.abortQuery = function (queryId) {\n            ModalService.openSimpleModal({\n                title: $translate.instant('confirm.abort'),\n                message: $translate.instant('confirm.abort.warning.msg'),\n                warning: true\n            }).result.then(function () {\n                $scope.deleteQueryHttp(queryId);\n            });\n        };\n\n        $scope.downloadQuery = function (queryId) {\n            const filename = 'query_' + queryId + '.rq';\n            let link = '/rest/monitor/repository/' + $repositories.getActiveRepository()\n                + '/query/download?query=' + encodeURIComponent(queryId)\n                + '&filename=' + encodeURIComponent(filename);\n            if ($jwtAuth.isAuthenticated()) {\n                link = link + '&authToken=' + encodeURIComponent($jwtAuth.getAuthToken());\n            }\n\n            window.open(link, '_blank');\n        };\n\n        $scope.toggleQueryExpanded = function (queryId) {\n            $scope.expanded[queryId] = !$scope.expanded[queryId];\n        };\n    }]);\n\n\nqueriesCtrl.controller('DeleteQueryCtrl', ['$scope', '$modalInstance', function ($scope, $modalInstance) {\n\n    $scope.ok = function () {\n        $modalInstance.close();\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}]);\n"],"sourceRoot":""}