{"version":3,"sources":["webpack:///./src/js/angular/settings/app.js","webpack:///./src/js/angular/settings/controllers.js"],"names":["config","$httpProvider","interceptors","push","run","$rootScope","$location","$licenseService","$on","isLicenseHardcoded","url","path","angular","module","$inject","ActiveLocationSettingsCtrl","$scope","toastr","$modalInstance","LicenseRestService","$translate","supportsStatistics","settings","statistics","getSettings","loader","getStatistics","then","response","data","status","msg","getError","error","instant","setSettings","toggleStatistics","close","success","submitForm","cancel","dismiss","LicenseCtrl","ModalService","loadingLicense","checkLicenseStatus","revertToFree","openSimpleModal","title","message","warning","result","unregisterLicense","RegisterLicenseCtrl","$modal","$window","$jwtAuth","isAdmin","sendLicenseToValidateAndActivate","textAreaSel","$","licenseCode","sendLicenseToValidate","validatedLicense","licensee","val","license","open","templateUrl","controller","size","resolve","decodedLicense","atob","replace","registerLicense","history","back","confirmWantedNewLicenseDetails","$watch","currentFile","file","extractFromLicenseFile","getBackToPreviousPage","ValidateLicenseModalCtrl","ok","LoaderSamplesCtrl","setLoader"],"mappings":"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","file":"53.78084dd64a27f7a6d2e8.bundle.js","sourcesContent":["import 'angular/core/services';\nimport 'angular/core/directives';\nimport 'angular/rest/license.rest.service';\nimport 'angular/settings/controllers';\nimport 'angular/core/interceptors/unauthorized.interceptor';\nimport 'angular/core/services/jwt-auth.service';\nimport 'ng-file-upload/dist/ng-file-upload.min';\nimport 'ng-file-upload/dist/ng-file-upload-shim.min';\n\nangular.module('graphdb.framework.settings', [\n    'toastr',\n    'ui.bootstrap',\n    'graphdb.framework.rest.license.service',\n    'graphdb.framework.settings.controllers',\n    'graphdb.framework.core.interceptors.unauthorized',\n    'graphdb.framework.core.services.jwtauth'\n])\n    .config(config)\n    .run(run);\n\nconfig.$inject = ['$httpProvider', '$routeProvider'];\n\nfunction config($httpProvider) {\n    $httpProvider.interceptors.push('$unauthorizedInterceptor');\n}\n\nrun.$inject = ['$rootScope', '$location', '$licenseService'];\n\nfunction run($rootScope, $location, $licenseService) {\n    $rootScope.$on('$locationChangeStart', function () {\n        if ($licenseService.isLicenseHardcoded && $location.url() === '/license/register') {\n            $location.path('license');\n        }\n    });\n}\n","import 'angular/core/services';\nimport 'angular/core/services/jwt-auth.service';\n\nangular\n    .module('graphdb.framework.settings.controllers', [\n        'ngCookies',\n        'ui.bootstrap',\n        'graphdb.framework.core.services.jwtauth',\n        'toastr'\n    ])\n    .controller('ActiveLocationSettingsCtrl', ActiveLocationSettingsCtrl)\n    .controller('ValidateLicenseModalCtrl', ValidateLicenseModalCtrl)\n    .controller('LicenseCtrl', LicenseCtrl)\n    .controller('RegisterLicenseCtrl', RegisterLicenseCtrl)\n    .controller('LoaderSamplesCtrl', LoaderSamplesCtrl);\n\nActiveLocationSettingsCtrl.$inject = ['$scope', 'toastr', '$modalInstance', 'LicenseRestService', '$translate'];\n\nfunction ActiveLocationSettingsCtrl($scope, toastr, $modalInstance, LicenseRestService, $translate) {\n    $scope.supportsStatistics = true;\n    $scope.settings = {statistics: false};\n    $scope.getSettings = getSettings;\n\n    function getSettings() {\n        $scope.loader = true;\n        LicenseRestService.getStatistics().then(function (response) {\n            $scope.settings.statistics = response.data === 'true';\n            $scope.supportsStatistics = true;\n        }, function (response) {\n            if (response.status === 404) {\n                $scope.supportsStatistics = false;\n            } else {\n                const msg = getError(response.data);\n                toastr.error(msg, $translate.instant('error.getting.settings'));\n            }\n        });\n    }\n\n    $scope.getSettings();\n\n    $scope.setSettings = function () {\n        $scope.loader = true;\n        LicenseRestService.toggleStatistics($scope.settings.statistics).then(function () {\n            $modalInstance.close();\n            toastr.success($translate.instant('saving.settings.success'));\n        }, function (response) {\n            const msg = getError(response.data);\n            toastr.error(msg, $translate.instant('saving.settings.error'));\n        });\n    };\n\n    $scope.submitForm = function () {\n        $scope.setSettings();\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n\nLicenseCtrl.$inject = ['$scope', 'LicenseRestService', '$licenseService', 'toastr', '$rootScope', 'ModalService', '$translate'];\n\nfunction LicenseCtrl($scope, LicenseRestService, $licenseService, toastr, $rootScope, ModalService, $translate) {\n\n    $scope.loadingLicense = function() {\n        return $licenseService.loadingLicense;\n    };\n\n    $licenseService.checkLicenseStatus();\n\n    $scope.revertToFree = function () {\n        ModalService.openSimpleModal({\n            title: $translate.instant('confirm.operation'),\n            message: $translate.instant(\"revert.to.free.warning.msg\"),\n            warning: true\n        }).result\n            .then(function () {\n                LicenseRestService.unregisterLicense()\n                    .success(function () {\n                        $licenseService.checkLicenseStatus();\n                    });\n            });\n    };\n}\n\nRegisterLicenseCtrl.$inject = ['$scope', 'LicenseRestService', '$location', '$modal', 'toastr', '$window', '$jwtAuth', '$translate'];\n\nfunction RegisterLicenseCtrl($scope, LicenseRestService, $location, $modal, toastr, $window, $jwtAuth, $translate) {\n    $scope.$on('securityInit', function () {\n        if (!$jwtAuth.isAdmin()) {\n            $location.path('/license');\n        }\n    });\n\n    $scope.sendLicenseToValidateAndActivate = sendLicenseToValidateAndActivate;\n\n    const textAreaSel = $('.license-textarea');\n\n    // watch for uploaded license file\n    $scope.$watch('currentFile', function () {\n        if ($scope.currentFile) {\n            const file = $scope.currentFile;\n            LicenseRestService.extractFromLicenseFile(file)\n                .success(function (licenseCode) {\n                    sendLicenseToValidateAndActivate(licenseCode);\n                }).error(function () {\n                    toastr.error($translate.instant('could.not.upload.file.error'));\n                });\n        }\n    });\n\n    $scope.getBackToPreviousPage = function () {\n        $window.history.back();\n    };\n\n    // send license code for validation and activation\n    function sendLicenseToValidateAndActivate(licenseCode) {\n        LicenseRestService.sendLicenseToValidate(licenseCode)\n            .success(function (validatedLicense) {\n                if (validatedLicense.licensee !== 'Invalid') {\n                    // write code to textarea\n                    textAreaSel.val(licenseCode);\n                    // pop dialog for license details confirmation\n                    confirmWantedNewLicenseDetails(validatedLicense, licenseCode);\n                } else {\n                    // clear textarea on invalid license\n                    textAreaSel.val('');\n                    // show error\n                    toastr.error(validatedLicense.message);\n                }\n            })\n            .error(function () {\n                toastr.error($translate.instant('invalid.license'));\n            });\n    }\n\n\n    // pops a modal dialog which asks you if your expected license details are correct\n    // and sends license to GraphDB upon confirmation\n    function confirmWantedNewLicenseDetails(license, licenseCode) {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/settings/modal/validate-license.html',\n            controller: 'ValidateLicenseModalCtrl',\n            size: 'lg',\n            resolve: {\n                license: function () {\n                    return license;\n                }\n            }\n        });\n\n        modalInstance.result.then(function () {\n            registerLicense(licenseCode);\n        });\n    }\n\n    // send license code to GraphDB for activation\n    function registerLicense(licenseCode) {\n        if (!licenseCode) {\n            licenseCode = textAreaSel.val();\n        }\n\n        if (licenseCode) {\n            // replacing whitespace makes this work on Safari too,\n            // whereas other browser happily ignore the whitespace\n            const decodedLicense = atob(licenseCode.replace(/\\s/g, ''));\n            LicenseRestService.registerLicense(decodedLicense)\n                .success(function () {\n                    $window.history.back();\n                }).error(function () {\n                    toastr.error($translate.instant('license.register.error'));\n                });\n        } else {\n            toastr.error($translate.instant('no.license.code.error'));\n        }\n    }\n}\n\nValidateLicenseModalCtrl.$inject = ['$scope', '$modalInstance', 'license'];\n\nfunction ValidateLicenseModalCtrl($scope, $modalInstance, license) {\n    $scope.ok = ok;\n    $scope.cancel = cancel;\n    $scope.license = license;\n\n    function ok() {\n        $modalInstance.close();\n    }\n\n    function cancel() {\n        $modalInstance.dismiss('cancel');\n    }\n}\n\nLoaderSamplesCtrl.$inject = ['$scope'];\n\nfunction LoaderSamplesCtrl($scope) {\n    $scope.loader = true;\n    $scope.setLoader = function (loader) {\n        $scope.loader = loader;\n    };\n}\n"],"sourceRoot":""}