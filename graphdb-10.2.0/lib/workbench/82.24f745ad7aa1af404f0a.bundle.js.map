{"version":3,"sources":["webpack:///./src/js/angular/guides/steps/complex/class-hierarchy/plugin.js"],"names":["reloadAndOpenInfoPanel","services","clasInstanceSelector","resolve","reject","$location","url","$route","reload","GuideUtils","waitFor","then","classHierarchyFocus","deferredShow","catch","error","PluginRegistry","add","guideBlockName","getSteps","options","mainAction","steps","angular","extend","menu","showIntro","content","elementSelector","placement","introExtraContent","push","extraContent","isArray","zoomIris","forEach","zoomIri","selector","getGuideElementSelector","iri","onNextClick","guide","step","classHierarchyZoom","next","postExtraContent","beforeShowPromise","title","closeButtonSelector","initPreviousStep","Promise","isVisible","canBePaused","onPreviousClick","$","trigger","focusInstances","focusInstance","isObject","instance","message","instanceCountSelector","followCountLink","getSparqlEditorSelector","scrollToHandler","scrollToTop","showExtraCommentSparql","getSparqlResultsSelector","fileName","window","history","back","advanceOn","event","stepId","ShepherdService","getCurrentStepId"],"mappings":"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","file":"82.24f745ad7aa1af404f0a.bundle.js","sourcesContent":["const reloadAndOpenInfoPanel = (services, clasInstanceSelector, resolve, reject) => {\n    services.$location.url('/hierarchy');\n    services.$route.reload();\n    services.GuideUtils.waitFor(clasInstanceSelector, 3)\n        .then(() => {\n            services.GuideUtils.classHierarchyFocus(clasInstanceSelector);\n            // Wait a little time animation to complete.\n            services.GuideUtils.deferredShow(500)()\n                .then(() => resolve());\n        })\n        .catch((error) => reject(error));\n};\n\nPluginRegistry.add('guide.step', [\n    {\n        guideBlockName: 'class-hierarchy',\n        getSteps: (options, services) => {\n            const GuideUtils = services.GuideUtils;\n            options.mainAction = 'class-hierarchy';\n\n            const steps = [\n                {\n                    guideBlockName: 'click-main-menu',\n                    options: angular.extend({}, {\n                        menu: 'class-hierarchy',\n                        showIntro: true\n                    }, options)\n                }, {\n                    guideBlockName: 'read-only-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.class_hierarchy_intro.content',\n                        url: '/hierarchy',\n                        elementSelector: '#classChart',\n                        placement: 'left'\n                    }, options)\n                }\n            ];\n\n            if (options.introExtraContent) {\n                steps.push({\n                    guideBlockName: 'read-only-element',\n                    options: angular.extend({}, {\n                        content: '',\n                        extraContent: options.introExtraContent,\n                        url: '/hierarchy',\n                        elementSelector: '#classChart #main-group',\n                        placement: 'left'\n                    }, options)\n                });\n            }\n\n            if (angular.isArray(options.zoomIris)) {\n                options.zoomIris.forEach((zoomIri) => {\n                    const selector = GuideUtils.getGuideElementSelector('class-' + zoomIri.iri);\n                    steps.push({\n                        guideBlockName: 'clickable-element',\n                        options: angular.extend({}, {\n                            content: 'guide.step_plugin.class_hierarchy_zoom.content',\n                            url: '/hierarchy',\n                            placement: 'left',\n                            elementSelector: selector,\n                            onNextClick: (guide, step) => {\n                                GuideUtils.classHierarchyZoom(step.elementSelector);\n                                guide.next();\n                            }\n                        }, options, zoomIri)\n                    });\n                    if (zoomIri.postExtraContent) {\n                        steps.push({\n                            guideBlockName: 'read-only-element',\n                            options: angular.extend({}, {\n                                content: '',\n                                extraContent: zoomIri.postExtraContent,\n                                url: '/hierarchy',\n                                placement: 'left',\n                                beforeShowPromise: GuideUtils.deferredShow(800),\n                                elementSelector: selector\n                            }, options)\n                        });\n                    }\n                });\n            }\n\n            return steps;\n        }\n    },\n    {\n        guideBlockName: 'class-hierarchy-instances',\n        getSteps: (options, services) => {\n            const GuideUtils = services.GuideUtils;\n            const $location = services.$location;\n            const $route = services.$route;\n            options.title = 'guide.step_plugin.class-hierarchy-instances.title';\n            const closeButtonSelector = GuideUtils.getGuideElementSelector('close-info-panel');\n            const clasInstanceSelector = GuideUtils.getGuideElementSelector('class-' + options.iri);\n            const steps = [\n                {\n                    guideBlockName: 'clickable-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.class-hierarchy-instances.content',\n                        url: '/hierarchy',\n                        elementSelector: clasInstanceSelector,\n                        onNextClick: (guide) => {\n                            GuideUtils.classHierarchyFocus(clasInstanceSelector);\n                            guide.next();\n                        },\n                        initPreviousStep: () => new Promise((resolve, reject) => {\n                            if (!GuideUtils.isVisible(closeButtonSelector)) {\n                                reloadAndOpenInfoPanel({$location, $route, GuideUtils}, clasInstanceSelector, resolve, reject);\n                            } else {\n                                resolve();\n                            }\n                        })\n                    }, options)\n                },\n                {\n                    guideBlockName: 'read-only-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.class-hierarchy-instances-side-panel.content',\n                        url: '/hierarchy',\n                        elementSelector: '.rdf-info-side-panel div',\n                        canBePaused: false,\n                        placement: 'left',\n                        beforeShowPromise: GuideUtils.deferredShow(800),\n                        onPreviousClick: () => new Promise(function (resolve) {\n                            GuideUtils.waitFor(closeButtonSelector, 1)\n                                .then(() => $(closeButtonSelector).trigger('click'));\n                            resolve();\n                        })\n                    }, options)\n                }\n            ];\n\n            if (angular.isArray(options.focusInstances)) {\n                options.focusInstances.forEach((focusInstance) => {\n                    if (!angular.isObject(focusInstance)) {\n                        focusInstance = {\n                            instance: focusInstance\n                        };\n                    }\n                    steps.push({\n                        guideBlockName: 'read-only-element',\n                        options: angular.extend({}, {\n                            content: 'guide.step_plugin.class-hierarchy-instances-focus.content',\n                            url: '/hierarchy',\n                            canBePaused: false,\n                            elementSelector: GuideUtils.getGuideElementSelector('instance-' + focusInstance.instance),\n                            focusInstance: focusInstance.instance,\n                            extraContent: focusInstance.message\n                        }, options)\n                    });\n                });\n            }\n\n            const instanceCountSelector = GuideUtils.getGuideElementSelector('instances-count');\n            if (options.followCountLink) {\n                steps.push({\n                    guideBlockName: 'clickable-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.class-hierarchy-instances-count.content',\n                        url: '/hierarchy',\n                        canBePaused: false,\n                        elementSelector: instanceCountSelector,\n                        onNextClick: (guide, step) => {\n                            GuideUtils.waitFor(step.elementSelector, 3)\n                                .then(() => $(step.elementSelector).trigger('click'));\n                            guide.next();\n                        }\n                    }, options)\n                });\n\n                steps.push({\n                    guideBlockName: 'read-only-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.class-hierarchy-instances-query.content',\n                        url: '/sparql',\n                        elementSelector: GuideUtils.getSparqlEditorSelector(),\n                        scrollToHandler: GuideUtils.scrollToTop\n                    }, options)\n                });\n                steps.push({\n                    guideBlockName: 'read-only-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.class-hierarchy-instances-results.content',\n                        extraContent: options.showExtraCommentSparql !== false ?\n                            'guide.step_plugin.class-hierarchy-instances-results.extraContent' : null,\n                        url: '/sparql',\n                        placement: 'top',\n                        elementSelector: GuideUtils.getSparqlResultsSelector(),\n                        fileName: options.fileName,\n                        scrollToHandler: GuideUtils.scrollToTop,\n                        onNextClick: (guide) => {\n                            window.history.back();\n                            guide.next();\n                        },\n                        initPreviousStep: () => Promise.resolve()\n                    }, options)\n                });\n            }\n\n            steps.push({\n                guideBlockName: 'clickable-element',\n                options: angular.extend({}, {\n                    content: 'guide.step_plugin.class-hierarchy-instances-side-panel-close.content',\n                    url: '/hierarchy',\n                    canBePaused: false,\n                    elementSelector: closeButtonSelector,\n                    placement: 'left',\n                    // If we followed the count link we come back here from another view\n                    // and the side panel needs time to open\n                    beforeShowPromise: options.followCountLink ? GuideUtils.deferredShow(1500) : Promise.resolve(),\n                    advanceOn: {\n                        selector: closeButtonSelector,\n                        event: 'click'\n                    },\n                    onNextClick: () => GuideUtils.waitFor(closeButtonSelector, 3)\n                        .then(() => $(closeButtonSelector).trigger('click')),\n                    initPreviousStep: (services, stepId) => new Promise((resolve, reject) => {\n\n                        const currentStepId = services.ShepherdService.getCurrentStepId();\n                        // If method is called from same step just click count link\n                        if (currentStepId === stepId && options.followCountLink) {\n                            GuideUtils.waitFor(instanceCountSelector, 3)\n                                .then(() => {\n                                    $(instanceCountSelector).trigger('click');\n                                    GuideUtils.waitFor(GuideUtils.getSparqlResultsSelector(), 3)\n                                        .then(() => {\n                                            GuideUtils.deferredShow(50)()\n                                                .then(() => resolve())\n                                                .catch((error) => reject(error));\n                                        })\n                                        .catch((error) => reject(error));\n                                    resolve();\n                                })\n                                .catch((error) => reject(error));\n                        } else {\n                            // If is called from other step we have to reload and open the info panel.\n                            reloadAndOpenInfoPanel({$location, $route, GuideUtils}, clasInstanceSelector, resolve, reject);\n                        }\n                    })\n                }, options)\n            });\n\n            return steps;\n        }\n    }\n]);\n"],"sourceRoot":""}