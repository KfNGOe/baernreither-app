{"version":3,"sources":["webpack:///./src/js/angular/graphexplore/controllers/domain-range-graph.controller.js"],"names":["DomainRangeGraphCtlr","$scope","$location","$rootScope","$timeout","$repositories","$window","LocalStorageAdapter","LSKeys","GraphDataRestService","UiScrollService","ModalService","toastr","$translate","predicatesObj","predicatesQueryObj","items","query","predicatesListNotFiltered","predicatesSearchPlaceholder","onopen","onclose","angular","noop","datasource","position","current","key","get","index","count","success","initLazyList","$watch","_","each","item","revision","adapterContainer","adapter","remain","doCollapseEdges","DOMAIN_RANGE_COLLAPSE_EDGES","goToClassHierarchyView","lastSelectedClass","CLASS_HIERARCHY_LAST_SELECTED_CLASS","search","hash","path","collapseEdges","$on","event","selectedClass","uri","objectPropClassUri","name","objectPropClassName","collapsed","currentActiveRepository","getActiveRepository","set","copyToClipboard","openCopyToClipboardModal","toggleCollapseEdgesState","history","pushState","predicatesListFilterFunc","pred","resolvedUri","toLowerCase","indexOf","reload","showPredicatesInfoPanel","selectedPredicate","targetNode","target","sourceNode","source","encodedUri","encodeURIComponent","sourceTargetObjectNodeUri","encodedSourceTargetObjectNodeUri","sourceTargetObjectNodeName","getRdfsLabelAndComment","response","rdfsLabel","label","rdfsComment","comment","error","instant","undefined","allEdges","obj","absUri","absUriNonEncoded","isImplicit","implicit","push","prepareDataForPredicatesInfoSidePanel","$","document","ready","click","hide","module","controller","$inject"],"mappings":"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","file":"72.d9002d30d871f2414870.bundle.js","sourcesContent":["import 'angular/utils/local-storage-adapter';\n\nangular\n    .module('graphdb.framework.graphexplore.controllers.domainrange', [\n        'ui.scroll.jqlite',\n        'ui.scroll',\n        'ngSanitize',\n        'graphdb.framework.utils.localstorageadapter'\n    ])\n    .controller('DomainRangeGraphCtlr', DomainRangeGraphCtlr);\n\nDomainRangeGraphCtlr.$inject = ['$scope', '$location', '$rootScope', '$timeout', '$repositories', '$window', 'LocalStorageAdapter', 'LSKeys', 'GraphDataRestService', 'UiScrollService', 'ModalService', 'toastr', '$translate'];\n\nfunction DomainRangeGraphCtlr($scope, $location, $rootScope, $timeout, $repositories, $window, LocalStorageAdapter, LSKeys, GraphDataRestService, UiScrollService, ModalService, toastr, $translate) {\n    $scope.predicatesObj = {};\n    $scope.predicatesQueryObj = {};\n    $scope.predicatesObj.items = [];\n    $scope.predicatesQueryObj.query = '';\n    $scope.predicatesListNotFiltered = [];\n    $scope.predicatesSearchPlaceholder = 'Search predicates';\n\n    // Handle pageslide directive callbacks which incidentally appeared to be present in the angular's\n    // scope, so we need to define our's and pass them to pageslide, otherwise it throws an error.\n    $scope.onopen = $scope.onclose = () => angular.noop();\n\n    // creating datasource for predicates data\n    const datasource = {};\n    let position = 0;\n    let current = 0;\n    $rootScope.key = '';\n    datasource.get = function (index, count, success) {\n        return UiScrollService.initLazyList(index, count, success, position, $scope.predicatesObj.items);\n    };\n    $rootScope.$watch(function () {\n        return $rootScope.key;\n    }, function () {\n        position = 0;\n        _.each($scope.predicatesObj.items, function (item) {\n            if ($rootScope.key > item) position++;\n        });\n        current++;\n    });\n\n    datasource.revision = function () {\n        return current;\n    };\n\n    // adapter implementation for ui-scroll directive\n    $scope.adapterContainer = {adapter: {remain: true}};\n\n\n    const doCollapseEdges = LocalStorageAdapter.get(LSKeys.DOMAIN_RANGE_COLLAPSE_EDGES);\n    if (doCollapseEdges === null) {\n        $scope.collapseEdges = true;\n    } else {\n        $scope.collapseEdges = doCollapseEdges === 'true';\n    }\n\n    $scope.datasource = datasource;\n\n    $scope.$on('reloadDomainRangeGraphView', reloadDomainRangeGraphView);\n    $scope.$on('switchEdgeMode', switchEdgeMode);\n    $scope.$on('repositoryIsSet', onRepositoryIsSet);\n    $scope.$on('changeCollapsedEdgesState', function (event, collapsed) {\n        $scope.collapseEdges = !collapsed;\n        LocalStorageAdapter.set(LSKeys.DOMAIN_RANGE_COLLAPSE_EDGES, $scope.collapseEdges);\n    });\n\n    $scope.goToClassHierarchyView = goToClassHierarchyView;\n    $scope.copyToClipboard = copyToClipboard;\n    $scope.toggleCollapseEdgesState = toggleCollapseEdgesState;\n    $scope.predicatesListFilterFunc = predicatesListFilterFunc;\n\n    $scope.$watch('predicatesObj.items', function () {\n        if ($scope.predicatesObj.items > 0) {\n            $timeout(function () {\n                $scope.adapterContainer.adapter.reload();\n            }, 30);\n        }\n    });\n\n    $scope.$watch('selectedPredicate', function () {\n        if ($scope.showPredicatesInfoPanel) {\n            prepareDataForPredicatesInfoSidePanel($scope.selectedPredicate);\n        }\n    });\n\n    function predicatesListFilterFunc(pred) {\n        return pred.resolvedUri\n            .toLowerCase()\n            .indexOf($scope.predicatesQueryObj.query.toLowerCase()) >= 0;\n    }\n\n    function prepareDataForPredicatesInfoSidePanel(selectedPredicate) {\n        const targetNode = selectedPredicate.target;\n        const sourceNode = selectedPredicate.source;\n\n        $scope.encodedUri = encodeURIComponent(selectedPredicate.uri);\n\n        $scope.sourceTargetObjectNodeUri = targetNode.objectPropClassUri\n            ? targetNode.objectPropClassUri\n            : sourceNode.objectPropClassUri;\n\n        $scope.encodedSourceTargetObjectNodeUri = encodeURIComponent($scope.sourceTargetObjectNodeUri);\n\n        $scope.sourceTargetObjectNodeName = targetNode.objectPropClassName\n            ? targetNode.objectPropClassName\n            : sourceNode.objectPropClassName\n                ? sourceNode.objectPropClassName\n                : '<i>Literal</i>';\n\n        if ($scope.sourceTargetObjectNodeName.indexOf('Literal') === -1) {\n            GraphDataRestService.getRdfsLabelAndComment($scope.sourceTargetObjectNodeUri)\n                .success(function (response) {\n                    $scope.rdfsLabel = response.label;\n                    $scope.rdfsComment = response.comment;\n                })\n                .error(function () {\n                    toastr.error($translate.instant('domain.range.error.get.label.comment'));\n                });\n        } else {\n            $scope.rdfsComment = undefined;\n            $scope.rdfsLabel = undefined;\n        }\n\n        $scope.predicatesObj.items = [];\n\n        // clear predicates search input field when changing edges\n        $scope.predicatesQueryObj.query = '';\n\n        // if target node of selected predicate has no edges then it is a left edge and edges should\n        // come from the source node\n        const allEdges = targetNode.allEdges\n            ? targetNode.allEdges\n            : sourceNode.allEdges;\n\n        _.each(allEdges, function (pred) {\n            const obj = {};\n            obj.absUri = encodeURIComponent(pred.uri);\n            obj.absUriNonEncoded = pred.uri;\n            obj.resolvedUri = pred.name;\n            obj.isImplicit = pred.implicit;\n            $scope.predicatesObj.items.push(obj);\n        });\n        $scope.predicatesListNotFiltered = $scope.predicatesObj.items;\n    }\n\n\n    // Hack needed to force hide collapsed-mode toggle tooltip in order not be\n    // visible after icon is switched\n    $(document).ready(function () {\n        $('.compact-mode-toggle').click(function () {\n            $('.tooltip').hide();\n        });\n    });\n\n    function reloadDomainRangeGraphView(event, selectedClass) {\n        const uri = selectedClass.objectPropClassUri;\n        const name = selectedClass.objectPropClassName;\n\n        $location\n            .path('domain-range-graph')\n            .search('uri', uri)\n            .search('name', name);\n    }\n\n    function switchEdgeMode(event, selectedClass) {\n        $location\n            .path('domain-range-graph')\n            .search('uri', selectedClass.uri)\n            .search('name', selectedClass.name)\n            .search('collapsed', selectedClass.collapsed);\n    }\n\n    function goToClassHierarchyView() {\n        const lastSelectedClass = LocalStorageAdapter.get(LSKeys.CLASS_HIERARCHY_LAST_SELECTED_CLASS);\n\n        $location\n            .search('')\n            .hash(lastSelectedClass)\n            .path('hierarchy');\n    }\n\n    function toggleCollapseEdgesState() {\n        $scope.collapseEdges = !$scope.collapseEdges;\n        $window.history.pushState({collapsed: $scope.collapseEdges}, 'domainRangePage', null);\n    }\n\n    function copyToClipboard(uri) {\n        ModalService.openCopyToClipboardModal(uri);\n    }\n\n\n    let currentActiveRepository = $repositories.getActiveRepository();\n\n    function onRepositoryIsSet() {\n        if (currentActiveRepository === $repositories.getActiveRepository()) {\n            return;\n        } else {\n            currentActiveRepository = $repositories.getActiveRepository();\n        }\n        goToClassHierarchyView();\n    }\n}\n"],"sourceRoot":""}