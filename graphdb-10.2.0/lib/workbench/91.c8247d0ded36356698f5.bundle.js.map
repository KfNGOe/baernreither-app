{"version":3,"sources":["webpack:///./src/js/angular/guides/steps/complex/visual-graph/plugin.js"],"names":["disableAllNodes","$","addClass","enableAllNodes","removeClass","PluginRegistry","add","guideBlockName","getSteps","options","services","GuideUtils","$location","$route","mainAction","angular","extend","menu","showIntro","content","forceReload","url","elementSelector","getGuideElementSelector","onNextValidate","step","validateTextInput","easyGraphInputText","iri","onNextClick","guide","waitFor","then","trigger","canBePaused","placement","onPreviousClick","Promise","resolve","reject","reload","searchInputSelector","catch","error","initPreviousStep","decodeURIComponent","$rootScope","title","advanceOn","undefined","graphVizExpandNode","getCurrentStep","hide","awaitAlphaDropD3","next","show","on","dblClickFunction","off","beforeShowPromise","deferredShow","stepId","previousStep","ShepherdService","getPreviousStepFromHistory","id","getCurrentStepId","mouseClickTimeStamp","mouseEventTimer","steps","event","timeStamp","$timeout","cancel","graphVizShowNodeInfo","onClick","closeButtonSelector","isArray","focusProperties","forEach","focusProperty","isObject","property","translationIdSuffix","skipGenericMessage","message","push","extraContent","selector","fromIri","toIri","extraPadding","isVisible"],"mappings":"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","file":"91.c8247d0ded36356698f5.bundle.js","sourcesContent":["const disableAllNodes = () => () => {\n    $('.node-wrapper').addClass('disable-visual-graph-node');\n};\n\nconst enableAllNodes = () => () => {\n    $('.node-wrapper').removeClass('disable-visual-graph-node');\n};\n\nPluginRegistry.add('guide.step', [\n    {\n        guideBlockName: 'visual-graph',\n        getSteps: (options, services) => {\n            const GuideUtils = services.GuideUtils;\n            const $location = services.$location;\n            const $route = services.$route;\n            options.mainAction = 'visual-graph';\n\n            return [\n                {\n                    guideBlockName: 'click-main-menu',\n                    options: angular.extend({}, {\n                        menu: 'visual-graph',\n                        showIntro: true\n                    }, options)\n                }, {\n                    guideBlockName: 'input-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.visual_graph_input_IRI.content',\n                        forceReload: true,\n                        url: '/graphs-visualizations',\n                        elementSelector: GuideUtils.getGuideElementSelector('graphVisualisationSearchInputNotConfigured', ' input'),\n                        onNextValidate: (step) => GuideUtils.validateTextInput(step.elementSelector, step.easyGraphInputText)\n                    }, options)\n                }, {\n                    guideBlockName: 'clickable-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.visual_graph_show_autocomplete.content',\n                        url: '/graphs-visualizations',\n                        elementSelector: GuideUtils.getGuideElementSelector(`autocomplete-${options.iri}`),\n                        onNextClick: (guide, step) => GuideUtils.waitFor(step.elementSelector, 3).then(() => $(step.elementSelector).trigger('click')),\n                        canBePaused: false,\n                        forceReload: true\n                    }, options)\n                }, {\n                    guideBlockName: 'read-only-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.visual_graph_intro.content',\n                        url: '/graphs-visualizations',\n                        elementSelector: '.graph-visualization',\n                        placement: 'left',\n                        onPreviousClick: () => new Promise(function (resolve, reject) {\n                            $location.url('/graphs-visualizations');\n                            $route.reload();\n                            const searchInputSelector = GuideUtils.getGuideElementSelector('graphVisualisationSearchInputNotConfigured', ' input');\n                            GuideUtils.waitFor(searchInputSelector, 3)\n                                .then(() => {\n                                    GuideUtils.validateTextInput(searchInputSelector, options.easyGraphInputText);\n                                    resolve();\n                                })\n                                .catch((error) => reject(error));\n                        }),\n                        initPreviousStep: () => new Promise(function (resolve, reject) {\n                            const url = '/graphs-visualizations?uri=' + options.iri;\n                            if (url !== decodeURIComponent($location.url())) {\n                                $location.url(url);\n                                $route.reload();\n                                GuideUtils.waitFor(`.node-wrapper[id^=\"${options.iri}\"] circle`, 3)\n                                    .then(() => resolve())\n                                    .catch((error) => reject(error));\n                            } else {\n                                resolve();\n                            }\n                        }),\n                        canBePaused: false,\n                        forceReload: true\n                    }, options)\n                }\n            ];\n        }\n    },\n    {\n        guideBlockName: 'visual-graph-expand',\n        getSteps: (options, services) => {\n            const GuideUtils = services.GuideUtils;\n            const $rootScope = services.$rootScope;\n            const $route = services.$route;\n            const elementSelector = `.node-wrapper[id^=\"${options.iri}\"] circle`;\n\n            // Expands visual graph when a node is double-clicked.\n            const dblClickFunction = (guide) => () => {\n                GuideUtils.graphVizExpandNode(elementSelector);\n                guide.getCurrentStep().hide();\n                GuideUtils.awaitAlphaDropD3(null, $rootScope)()\n                    .then(() => {\n                        guide.next();\n                    });\n            };\n\n            return [\n                {\n                    guideBlockName: 'clickable-element',\n                    options: angular.extend({}, {\n                        title: 'guide.step_plugin.visual-graph-expand.title',\n                        content: 'guide.step_plugin.visual-graph-expand.content',\n                        url: '/graphs-visualizations',\n                        canBePaused: false,\n                        elementSelector,\n                        // Disable default behavior of service when element is clicked.\n                        advanceOn: undefined,\n                        onNextClick: (guide) => {\n                            GuideUtils.graphVizExpandNode(elementSelector);\n                            guide.getCurrentStep().hide();\n                            GuideUtils.awaitAlphaDropD3(null, $rootScope)()\n                                .then(() => {\n                                    guide.next();\n                                });\n                        },\n                        show: (guide) => () => {\n                            // Add \"dblclick\" listener to the element. Processing of double-click event is disabled for the visual graph when guide is started.\n                            // So we have expanded the graph manually when a selected node is double-clicked.\n                            $(elementSelector).on('dblclick.onNodeDbClicked', dblClickFunction(guide));\n                        },\n                        hide: () => () => {\n                            // Remove the \"dblclick\" listener of element. It is important when step is hided.\n                            $(elementSelector).off('dblclick.onNodeDbClicked');\n                        },\n                        beforeShowPromise: () => new Promise(function (resolve, reject) {\n                            $route.reload();\n                            GuideUtils.deferredShow(50)()\n                                .then(() => {\n                                    GuideUtils.awaitAlphaDropD3(elementSelector, $rootScope)()\n                                        .then(() => resolve())\n                                        .catch((error) => reject(error));\n                                });\n                        }),\n                        initPreviousStep: (services, stepId) => new Promise(function (resolve, reject) {\n                            const previousStep = services.ShepherdService.getPreviousStepFromHistory(stepId);\n                            previousStep.options.initPreviousStep(services, previousStep.id)\n                                .then(() => {\n                                    const currentStepId = services.ShepherdService.getCurrentStepId();\n                                    // Skip expanding of node if last step is \"visual-graph-expand\"\n                                    if (currentStepId === stepId) {\n                                        resolve();\n                                    } else {\n                                        GuideUtils.graphVizExpandNode(elementSelector);\n                                        GuideUtils.deferredShow(50)()\n                                            .then(() => {\n                                                GuideUtils.awaitAlphaDropD3(null, $rootScope)()\n                                                    .then(() => resolve())\n                                                    .catch((error) => reject(error));\n                                            });\n                                    }\n                                })\n                                .catch((error) => reject(error));\n                        })\n                    }, options)\n                }\n            ];\n        }\n    },\n    {\n        guideBlockName: 'visual-graph-properties',\n        getSteps: (options, services) => {\n            const GuideUtils = services.GuideUtils;\n            const $rootScope = services.$rootScope;\n            const elementSelector = `.node-wrapper[id^=\"${options.iri}\"] circle`;\n\n            let mouseClickTimeStamp;\n            let mouseEventTimer;\n\n            // Expands Node info sidebar panel when a node is clicked.\n            const onClick = (services, guide) => (event) => {\n                if (mouseEventTimer) {\n                    // Cancels expansion of the sidebar panel if user double-clicked.\n                    if (event.timeStamp - mouseClickTimeStamp < 400) {\n                        services.$timeout.cancel(mouseEventTimer);\n                        mouseEventTimer = null;\n                    }\n                } else {\n                    mouseClickTimeStamp = event.timeStamp;\n                    mouseEventTimer = services.$timeout(function () {\n                        GuideUtils.graphVizShowNodeInfo(elementSelector);\n                        mouseEventTimer = null;\n                        guide.next();\n                    }, 500);\n                }\n            };\n\n            const steps = [\n                {\n                    guideBlockName: 'clickable-element',\n                    options: angular.extend({}, {\n                        title: 'guide.step_plugin.visual-graph-properties.title',\n                        content: 'guide.step_plugin.visual-graph-properties.content',\n                        url: '/graphs-visualizations',\n                        elementSelector,\n                        canBePaused: false,\n                        // Disable default behavior of service when element is clicked.\n                        advanceOn: undefined,\n                        show: (guide) => () => {\n                            // Add \"click\" listener to the element. Processing of click event is disabled for the visual graph when guide is started.\n                            // So we have to open side panel info manually when a selected node is clicked.\n                            $(elementSelector).on('click.onNodeClicked', onClick(services, guide));\n                        },\n                        hide: () => () => {\n                            // Remove the \"click\" listener of element. It is important when step is hided.\n                            $(elementSelector).off('click.onNodeClicked');\n                        },\n                        onNextClick: (guide, step) => {\n                            GuideUtils.graphVizShowNodeInfo(step.elementSelector);\n                            guide.next();\n                        },\n                        beforeShowPromise: GuideUtils.awaitAlphaDropD3(elementSelector, $rootScope)\n                    }, options)\n                },\n                {\n                    guideBlockName: 'read-only-element',\n                    options: angular.extend({}, {\n                        title: 'guide.step_plugin.visual-graph-properties-side-panel.title',\n                        content: 'guide.step_plugin.visual-graph-properties-side-panel.content',\n                        url: '/graphs-visualizations',\n                        elementSelector: '.rdf-side-panel-content',\n                        canBePaused: false,\n                        placement: 'left',\n                        beforeShowPromise: GuideUtils.deferredShow(500),\n                        onPreviousClick: () => new Promise(function (resolve) {\n                            GuideUtils.waitFor(closeButtonSelector, 3)\n                                .then(() => {\n                                    $(closeButtonSelector).trigger('click');\n                                    resolve();\n                                }).catch(() => resolve());\n                        })\n                    }, options)\n                }\n            ];\n\n            if (angular.isArray(options.focusProperties)) {\n                options.focusProperties.forEach((focusProperty) => {\n                    if (!angular.isObject(focusProperty)) {\n                        focusProperty = {\n                            property: focusProperty\n                        };\n                    }\n                    const translationIdSuffix = focusProperty.property === 'types' ? '-types' : '-property';\n                    const content = focusProperty.skipGenericMessage && focusProperty.message ?\n                        null : 'guide.step_plugin.visual-graph-properties-focus' + translationIdSuffix + '.content';\n                    steps.push({\n                        guideBlockName: 'read-only-element',\n                        options: angular.extend({}, {\n                            title: 'guide.step_plugin.visual-graph-properties-focus' + translationIdSuffix + '.title',\n                            content: content,\n                            url: '/graphs-visualizations',\n                            canBePaused: false,\n                            placement: 'left',\n                            elementSelector: GuideUtils.getGuideElementSelector('graph-visualization-node-info-' + focusProperty.property),\n                            focusProperty: focusProperty.property,\n                            extraContent: focusProperty.message\n                        }, options)\n                    });\n                });\n            }\n\n            const closeButtonSelector = GuideUtils.getGuideElementSelector('close-info-panel');\n            steps.push({\n                guideBlockName: 'clickable-element',\n                options: angular.extend({}, {\n                    title: 'guide.step_plugin.visual-graph-properties-side-panel-close.title',\n                    content: 'guide.step_plugin.visual-graph-properties-side-panel-close.content',\n                    url: '/graphs-visualizations',\n                    canBePaused: false,\n                    placement: 'left',\n                    elementSelector: closeButtonSelector,\n                    advanceOn: {\n                        selector: closeButtonSelector,\n                        event: 'click'\n                    },\n                    beforeShowPromise: () => new Promise(function (resolve) {\n                        // We have to be sure that node info sidebar is open. It is needed when this step is loaded when next step \"Previous\"\n                        // button is clicked.\n                        GuideUtils.graphVizShowNodeInfo(elementSelector);\n                        GuideUtils.deferredShow(500)()\n                            .then(() => resolve());\n                    }),\n                    onNextClick: () => GuideUtils.waitFor(closeButtonSelector, 3).then(() => $(closeButtonSelector).trigger('click'))\n                }, options)\n            });\n\n            return steps;\n        }\n    },\n    {\n        guideBlockName: 'visual-graph-link-focus',\n        getSteps: (options, services) => {\n            const GuideUtils = services.GuideUtils;\n            const $rootScope = services.$rootScope;\n            const elementSelector = `.link-wrapper[id^=\"${options.fromIri}>${options.toIri}\"]`;\n            return [\n                {\n                    guideBlockName: 'read-only-element',\n                    options: angular.extend({}, {\n                        title: 'guide.step_plugin.visual-graph-link-focus.title',\n                        content: 'guide.step_plugin.visual-graph-link-focus.content',\n                        url: '/graphs-visualizations',\n                        canBePaused: false,\n                        extraPadding: 40,\n                        elementSelector,\n                        show: disableAllNodes,\n                        hide: enableAllNodes,\n                        beforeShowPromise: GuideUtils.awaitAlphaDropD3(elementSelector, $rootScope)\n                    }, options)\n                }\n            ];\n        }\n    },\n    {\n        guideBlockName: 'visual-graph-node-focus',\n        getSteps: (options, services) => {\n            const GuideUtils = services.GuideUtils;\n            const $rootScope = services.$rootScope;\n            const elementSelector = `.node-wrapper[id^=\"${options.iri}\"] circle`;\n            return [\n                {\n                    guideBlockName: 'read-only-element',\n                    options: angular.extend({}, {\n                        title: 'guide.step_plugin.visual-graph-node-focus.title',\n                        content: 'guide.step_plugin.visual-graph-node-focus.content',\n                        url: '/graphs-visualizations',\n                        canBePaused: false,\n                        extraPadding: 10,\n                        elementSelector,\n                        show: disableAllNodes,\n                        hide: enableAllNodes,\n                        beforeShowPromise: GuideUtils.awaitAlphaDropD3(elementSelector, $rootScope),\n                        initPreviousStep: (services, stepId) => new Promise((resolve, reject) => {\n                            if (GuideUtils.isVisible(elementSelector)) {\n                                resolve();\n                            } else {\n                                const previousStep = services.ShepherdService.getPreviousStepFromHistory(stepId);\n                                previousStep.options.initPreviousStep(services, previousStep.id)\n                                    .then(() => resolve())\n                                    .catch((error) => reject(error));\n                            }\n                        })\n                    }, options)\n                }\n            ];\n        }\n    }\n]);\n"],"sourceRoot":""}