{"version":3,"sources":["webpack:///./src/js/angular/guides/steps/complex/table-graph/plugin.js"],"names":["PluginRegistry","add","guideBlockName","getSteps","options","services","GuideUtils","$location","$route","mainAction","steps","angular","extend","content","scrollToHandler","scrollToTop","elementSelector","getSparqlResultsSelectorForIri","iri","onNextClick","guide","step","waitFor","then","$","trigger","next","initPreviousStep","stepId","Promise","resolve","reject","ShepherdService","getCurrentStepId","previousStep","getPreviousStepFromHistory","id","catch","error","getSparqlResultsSelector","placement","defaultInitPreviousStep","url","decodeURIComponent","reload","isArray","subSteps","forEach","subStep","type","push","linkUrl","tableGraphLinkUrl","currentStepId","getGuideElementSelector","role","substring","indexOf","extraContent","extraContentVisualIntro","canBePaused","forceReload","window","history","back","getSparqlResultsSelectorForRow","row"],"mappings":"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","file":"90.290428a0a0abc82c4750.bundle.js","sourcesContent":["PluginRegistry.add('guide.step', [\n    {\n        guideBlockName: 'table-graph-explore',\n        getSteps: (options, services) => {\n            const GuideUtils = services.GuideUtils;\n            const $location = services.$location;\n            const $route = services.$route;\n            options.mainAction = 'table-graph';\n\n            const steps = [\n                {\n                    guideBlockName: 'clickable-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step-intro.table-graph',\n                        scrollToHandler: GuideUtils.scrollToTop,\n                        elementSelector: GuideUtils.getSparqlResultsSelectorForIri(options.iri),\n                        onNextClick: (guide, step) => {\n                            GuideUtils.waitFor(step.elementSelector, 3)\n                                .then(() => $(step.elementSelector).trigger('click'))\n                                .then(() => guide.next());\n                        },\n                        initPreviousStep: (services, stepId) => new Promise((resolve, reject) => {\n                            const currentStepId = services.ShepherdService.getCurrentStepId();\n                            if (currentStepId === stepId) {\n                                resolve();\n                            } else {\n                                const previousStep = services.ShepherdService.getPreviousStepFromHistory(stepId);\n                                previousStep.options.initPreviousStep(services, previousStep.options.id)\n                                    .then(() => {\n                                        resolve();\n                                    })\n                                    .catch((error) => {\n                                        reject(error);\n                                    });\n                            }\n                        })\n                    }, options)\n                }, {\n                    guideBlockName: 'read-only-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.table-graph-overview',\n                        scrollToHandler: GuideUtils.scrollToTop,\n                        elementSelector: GuideUtils.getSparqlResultsSelector() + ' tbody',\n                        placement: 'top',\n                        initPreviousStep: (services, stepId) => new Promise((resolve, reject) => {\n                            const currentStepId = services.ShepherdService.getCurrentStepId();\n                            if (currentStepId === stepId) {\n                                GuideUtils.defaultInitPreviousStep(services, stepId).then(() => resolve()).catch((error) => reject(error));\n                            } else {\n                                const url = `/resource?uri=${options.iri}&role=subject`;\n                                if (url !== decodeURIComponent($location.url())) {\n                                    $location.url(url);\n                                    $route.reload();\n                                    GuideUtils.waitFor(GuideUtils.getSparqlResultsSelector(' tbody'))\n                                        .then(() => resolve())\n                                        .catch((error) => reject(error));\n                                } else {\n                                    resolve();\n                                }\n                            }\n                        })\n                    }, options)\n                }\n            ];\n\n            if (angular.isArray(options.subSteps)) {\n                options.subSteps.forEach((subStep) => {\n\n                    switch (subStep.type) {\n                        case 'link':\n                            steps.push({\n                                guideBlockName: 'clickable-element',\n                                options: angular.extend({}, {\n                                    content: 'guide.step_plugin.table-graph-link',\n                                    elementSelector: GuideUtils.getSparqlResultsSelectorForIri(subStep.iri),\n                                    onNextClick: (guide, step) => {\n                                        GuideUtils.waitFor(step.elementSelector, 3)\n                                            .then(() => $(step.elementSelector).trigger('click'))\n                                            .then(() => guide.next());\n                                    },\n                                    initPreviousStep: (services, stepId) => new Promise((resolve, reject) => {\n                                        const linkUrl = `/resource?uri=${subStep.iri}&role=subject`;\n                                        const tableGraphLinkUrl = `/resource?uri=${options.iri}&role=subject`;\n                                        const url = decodeURIComponent($location.url());\n\n                                        const currentStepId = services.ShepherdService.getCurrentStepId();\n\n                                        if (currentStepId === stepId && tableGraphLinkUrl === url) {\n                                            // this case is first link in the sequence before click the link, so we have to resolve it.\n                                            resolve();\n                                        } else if (currentStepId !== stepId && linkUrl === url) {\n                                            // this case is first link in the sequence after click the link, so we have to call previous step.\n                                            GuideUtils.defaultInitPreviousStep(services, stepId).then(() => resolve()).catch((error) => reject(error));\n                                        } else {\n                                            // this case is from second link we have to reload\n                                            $location.url(linkUrl);\n                                            $route.reload();\n                                            GuideUtils.waitFor(GuideUtils.getSparqlResultsSelector(' tbody'))\n                                                .then(() => resolve())\n                                                .catch((error) => reject(error));\n                                        }\n                                    })\n                                }, angular.extend({}, options, subStep))\n                            });\n                            break;\n                        case 'role':\n                            steps.push({\n                                guideBlockName: 'clickable-element',\n                                options: angular.extend({}, {\n                                    content: 'guide.step_plugin.table-graph-role',\n                                    elementSelector: GuideUtils.getGuideElementSelector('role-' + subStep.role),\n                                    onNextClick: (guide, step) => {\n                                        GuideUtils.waitFor(step.elementSelector, 3)\n                                            .then(() => $(step.elementSelector).trigger('click'))\n                                            .then(() => guide.next());\n                                    },\n                                    initPreviousStep: (services, stepId) => new Promise((resolve, reject) => {\n                                        const currentStepId = services.ShepherdService.getCurrentStepId();\n                                        if (currentStepId === stepId) {\n                                            resolve();\n                                        } else {\n                                            const previousStep = services.ShepherdService.getPreviousStepFromHistory(stepId);\n                                            previousStep.options.initPreviousStep(services, previousStep.options.id)\n                                                .then(() => {\n                                                    let url = $location.url();\n                                                    url = url.substring(0, url.indexOf('role=') + 5);\n                                                    url += subStep.role;\n                                                    $location.url(url);\n                                                    $route.reload();\n                                                    GuideUtils.waitFor(GuideUtils.getSparqlResultsSelector(' tbody'))\n                                                        .then(() => resolve())\n                                                        .catch((error) => reject(error));\n                                                })\n                                                .catch((error) => {\n                                                    reject(error);\n                                                });\n                                        }\n                                    })\n                                }, angular.extend({}, options, subStep))\n                            });\n                            break;\n                        case 'visual':\n                            steps.push({\n                                guideBlockName: 'clickable-element',\n                                options: angular.extend({}, {\n                                    content: 'guide.step_plugin.table-graph-visual',\n                                    elementSelector: GuideUtils.getGuideElementSelector('explore-visual'),\n                                    onNextClick: (guide, step) => {\n                                        GuideUtils.waitFor(step.elementSelector, 3)\n                                            .then(() => $(step.elementSelector).trigger('click'));\n                                    },\n                                    initPreviousStep: (services, stepId) => new Promise((resolve, reject) => {\n                                        const currentStepId = services.ShepherdService.getCurrentStepId();\n\n                                        if (currentStepId === stepId) {\n                                            resolve();\n                                        } else {\n                                            GuideUtils.defaultInitPreviousStep(services, stepId).then(() => resolve()).catch((error) => reject(error));\n                                        }\n                                    })\n                                }, angular.extend({}, options, subStep))\n                            });\n                            steps.push({\n                                guideBlockName: 'read-only-element',\n                                options: angular.extend({}, {\n                                    content: 'guide.step_plugin.visual_graph_intro.content',\n                                    extraContent: subStep.extraContentVisualIntro,\n                                    url: '/graphs-visualizations',\n                                    elementSelector: '.graph-visualization',\n                                    placement: 'left',\n                                    canBePaused: false,\n                                    forceReload: true,\n                                    onNextClick: (guide) => {\n                                        window.history.back();\n                                        guide.next();\n                                    }\n                                }, angular.extend({}, options, subStep))\n                            });\n                            break;\n                        case 'row':\n                            steps.push({\n                                guideBlockName: 'read-only-element',\n                                options: angular.extend({}, {\n                                    elementSelector: GuideUtils.getSparqlResultsSelectorForRow(subStep.row)\n                                }, angular.extend({}, options, subStep))\n                            });\n                            break;\n                        case 'table':\n                            steps.push({\n                                guideBlockName: 'read-only-element',\n                                options: angular.extend({}, {\n                                    elementSelector: GuideUtils.getSparqlResultsSelector() + ' tbody'\n                                }, angular.extend({}, options, subStep))\n                            });\n                            break;\n                    }\n                });\n            }\n\n            return steps;\n        }\n    }\n]);\n"],"sourceRoot":""}