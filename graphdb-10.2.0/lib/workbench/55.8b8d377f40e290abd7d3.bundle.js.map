{"version":3,"sources":["webpack:///./src/js/angular/sparql-template/controllers.js","webpack:///./src/js/angular/utils/notifications.js"],"names":["SparqlTemplatesCtrl","$scope","$repositories","SparqlTemplatesRestService","toastr","ModalService","$licenseService","$translate","pluginName","setPluginIsActive","isPluginActive","pluginIsActive","getSparqlTemplates","isLicenseValid","getActiveRepository","isActiveRepoOntopType","isActiveRepoFedXType","success","data","sparqlTemplateIds","error","msg","getError","instant","$watch","deleteTemplate","templateID","openSimpleModal","title","message","warning","result","then","deleteSparqlTemplate","e","SparqlTemplateCreateCtrl","$location","$window","$timeout","RDF4JRepositoriesRestService","SparqlRestService","UriUtils","hash","search","getNamespaces","setLoader","getRepositoryNamespaces","usedPrefixes","results","bindings","forEach","prefix","value","namespace","namespaces","repositoryError","finally","loadTab","addKnownPrefixes","noPadding","paddingRight","paddingLeft","currentTabConfig","orientationViewMode","currentQuery","templateExist","newValue","oldValue","path","timer","goBack","history","back","locationChangeListener","$on","event","isPristine","confirm","window","removeEventListener","showBeforeunloadMessage","cancel","preventDefault","confirmExit","returnValue","addEventListener","defaultTabConfig","query","inference","sameAs","isNewTemplate","isRunning","progressMessage","extraMessage","yasrInnerContainer","angular","element","document","getElementById","queryIsRunning","queryStartTime","Date","now","countTimeouted","addClass","removeClass","$$phase","$apply","tabsData","tab","editor","setValue","queryType","resultsCount","offset","allResultsCount","page","pageSize","timeFinished","timeTook","sizeDelta","canWriteActiveRepo","options","readOnly","setQueryFromTabConfig","tabs","copy","setQuery","setDirty","JSON","stringify","getValue","isDefined","saveNewTemplate","createSparqlTemplate","saveTab","getSparqlTemplate","templateContent","saveTemplate","getQueryMode","validateQuery","isInvalidTemplateId","isValidIri","find","templateId","modalMsg","updateSparqlTemplate","$","on","module","controller","$inject","Notifications","showToastMessageWithDelay","Promise","r","setTimeout","factory"],"mappings":"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","file":"55.8b8d377f40e290abd7d3.bundle.js","sourcesContent":["import 'angular/core/services';\nimport 'angular/core/services/repositories.service';\nimport 'angular/rest/monitoring.rest.service';\nimport 'angular/utils/notifications';\nimport 'angular/utils/uri-utils';\nimport {decodeHTML} from \"../../../app\";\n\nconst modules = [\n    'ui.bootstrap',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.rest.monitoring.service',\n    'toastr'\n];\n\nangular.module('graphdb.framework.sparql-template.controllers', modules, [\n    'graphdb.framework.utils.notifications'\n])\n    .controller('SparqlTemplatesCtrl', SparqlTemplatesCtrl)\n    .controller('SparqlTemplateCreateCtrl', SparqlTemplateCreateCtrl);\n\nSparqlTemplatesCtrl.$inject = ['$scope', '$repositories', 'SparqlTemplatesRestService', 'toastr', 'ModalService', '$licenseService', '$translate'];\n\nfunction SparqlTemplatesCtrl($scope, $repositories, SparqlTemplatesRestService, toastr, ModalService, $licenseService, $translate) {\n\n    $scope.pluginName = 'sparql-template';\n\n    $scope.setPluginIsActive = function (isPluginActive) {\n        $scope.pluginIsActive = isPluginActive;\n    }\n\n    $scope.getSparqlTemplates = function () {\n        // Only do this if there is an active repo that isn't an Ontop repo.\n        // Ontop repos doesn't support update operations.\n        if ($licenseService.isLicenseValid() &&\n            $repositories.getActiveRepository()\n                && !$repositories.isActiveRepoOntopType()\n                    && !$repositories.isActiveRepoFedXType()) {\n            SparqlTemplatesRestService.getSparqlTemplates($repositories.getActiveRepository()).success(function (data) {\n                $scope.sparqlTemplateIds = data;\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('sparql.template.get.templates.error'));\n            });\n        } else {\n            $scope.sparqlTemplateIds = [];\n        }\n    };\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, function () {\n        $scope.getSparqlTemplates();\n    });\n\n    $scope.deleteTemplate = function (templateID) {\n        ModalService.openSimpleModal({\n            title: $translate.instant('common.warning'),\n            message: $translate.instant('sparql.template.delete.template.warning', {templateID: templateID}),\n            warning: true\n        }).result\n            .then(function () {\n                SparqlTemplatesRestService.deleteSparqlTemplate(templateID, $repositories.getActiveRepository())\n                    .success(function () {\n                        toastr.success(templateID, $translate.instant('sparql.template.delete.template.success'));\n                        $scope.getSparqlTemplates();\n                    }).error(function (e) {\n                    toastr.error(getError(e), $translate.instant('sparql.template.delete.template.failure', {templateID: templateID}));\n                });\n            });\n    };\n}\n\nSparqlTemplateCreateCtrl.$inject = ['$scope', '$location', 'toastr', '$repositories', '$window', '$timeout', 'SparqlTemplatesRestService', 'RDF4JRepositoriesRestService', 'SparqlRestService', 'UriUtils', 'ModalService', '$translate'];\n\nfunction SparqlTemplateCreateCtrl($scope, $location, toastr, $repositories, $window, $timeout, SparqlTemplatesRestService, RDF4JRepositoriesRestService, SparqlRestService, UriUtils, ModalService, $translate) {\n\n    const hash = $location.hash() || '';\n    $scope.templateID = ($location.search().templateID || '') + (hash ? (`#${hash}`) : '');\n    $scope.title = ($scope.templateID ? $translate.instant('edit') : $translate.instant('common.create.btn')) + ' SPARQL Template';\n    $scope.getNamespaces = getNamespaces;\n    $scope.setLoader = setLoader;\n    $scope.addKnownPrefixes = addKnownPrefixes;\n    $scope.noPadding = {paddingRight: 0, paddingLeft: 0};\n    $scope.currentTabConfig = {};\n    // This property is obligatory in order to show YASQUE and YASR properly\n    $scope.orientationViewMode = true;\n    $scope.currentQuery = {};\n    let templateExist = false;\n\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, function (newValue, oldValue) {\n        if (newValue !== oldValue) {\n            $location.path('/sparql-templates');\n        }\n    });\n\n    let timer = null;\n    $scope.goBack = function () {\n        timer = $timeout(function () {\n            $window.history.back();\n        }, 1000);\n    };\n\n    const locationChangeListener = $scope.$on('$locationChangeStart', function (event) {\n        confirmExit(event);\n    });\n\n    window.addEventListener('beforeunload', showBeforeunloadMessage);\n\n    function showBeforeunloadMessage(event) {\n        if (!$scope.currentQuery.isPristine) {\n            event.returnValue = true;\n        }\n    }\n\n    function confirmExit(event) {\n        if (!$scope.currentQuery.isPristine) {\n            if (!confirm($translate.instant('jdbc.warning.unsaved.changes'))) {\n                event.preventDefault();\n            } else {\n                window.removeEventListener('beforeunload', showBeforeunloadMessage);\n                locationChangeListener();\n                $timeout.cancel(timer);\n            }\n        }\n    }\n\n    $scope.$on('$destroy', function (event) {\n        window.removeEventListener('beforeunload', showBeforeunloadMessage);\n        locationChangeListener();\n        $timeout.cancel(timer);\n    });\n\n    const defaultTabConfig = {\n        templateID: '',\n        query: 'PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\n' +\n            'PREFIX ex: <http://example.com#>\\n' +\n            'DELETE {\\n' +\n            '  ?subject ex:myPredicate ?oldValue .\\n' +\n            '} INSERT {\\n' +\n            '  ?subject ex:myPredicate ?newValue .\\n' +\n            '} WHERE {\\n' +\n            '  ?id rdf:type ex:MyType .\\n' +\n            '  ?subject ex:isRelatedTo ?id .\\n' +\n            '}\\n',\n        inference: true,\n        sameAs: true,\n        isNewTemplate: true,\n        isPristine: true\n    };\n\n    $scope.saveTab = function () {\n        // Should have this empty function in this view\n    };\n\n    // Called when user clicks on a sample query\n    $scope.setQuery = function (query) {\n        // Hack for YASQE bug\n        window.editor.setValue(query ? query : ' ');\n    };\n\n    if ($scope.templateID) {\n        getSparqlTemplate($scope.templateID);\n    } else {\n        setQueryFromTabConfig();\n    }\n\n    // FIXME: this is copy-pasted in graphs-config.controller.js and query-editor.controller.js. Find a way to avoid duplications\n    function getNamespaces() {\n        // Signals the namespaces are to be fetched => loader will be shown\n        setLoader(true, $translate.instant('common.refreshing.namespaces'), $translate.instant('common.extra.message'));\n        RDF4JRepositoriesRestService.getRepositoryNamespaces()\n            .success(function (data) {\n                const usedPrefixes = {};\n                data.results.bindings.forEach(function (e) {\n                    usedPrefixes[e.prefix.value] = e.namespace.value;\n                });\n                $scope.namespaces = usedPrefixes;\n            })\n            .error(function (data) {\n                $scope.repositoryError = getError(data);\n            })\n            .finally(function () {\n                // Signals namespaces were fetched => loader will be hidden\n                setLoader(false);\n                loadTab();\n            });\n    }\n\n    function setLoader(isRunning, progressMessage, extraMessage) {\n        const yasrInnerContainer = angular.element(document.getElementById('yasr-inner'));\n        $scope.queryIsRunning = isRunning;\n        if (isRunning) {\n            $scope.queryStartTime = Date.now();\n            $scope.countTimeouted = false;\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n            yasrInnerContainer.addClass('hide');\n        } else {\n            $scope.progressMessage = '';\n            $scope.extraMessage = '';\n            yasrInnerContainer.removeClass('hide');\n        }\n\n        // We might call this from angular or outside angular so take care of applying the scope.\n        if ($scope.$$phase === null) {\n            $scope.$apply();\n        }\n    }\n\n    function loadTab() {\n        $scope.tabsData = [$scope.currentQuery];\n\n        const tab = $scope.currentQuery;\n\n        if (!$scope.currentQuery.query) {\n            // hack for YASQE bug\n            window.editor.setValue(' ');\n        } else {\n            window.editor.setValue($scope.currentQuery.query);\n        }\n\n        $timeout(function () {\n            $scope.currentTabConfig = {};\n            $scope.currentTabConfig.queryType = tab.queryType;\n            $scope.currentTabConfig.resultsCount = tab.resultsCount;\n\n            $scope.currentTabConfig.offset = tab.offset;\n            $scope.currentTabConfig.allResultsCount = tab.allResultsCount;\n            $scope.currentTabConfig.page = tab.page;\n            $scope.currentTabConfig.pageSize = tab.pageSize;\n\n            $scope.currentTabConfig.timeFinished = tab.timeFinished;\n            $scope.currentTabConfig.timeTook = tab.timeTook;\n            $scope.currentTabConfig.sizeDelta = tab.sizeDelta;\n            $scope.$apply();\n        }, 0);\n\n        if (!$scope.canWriteActiveRepo()) {\n            window.editor.options.readOnly = true;\n        }\n    }\n\n    function getSparqlTemplate(templateID) {\n        SparqlTemplatesRestService.getSparqlTemplate(templateID, $repositories.getActiveRepository() ).success(function (templateContent) {\n            defaultTabConfig.query = templateContent;\n            defaultTabConfig.templateID = templateID;\n\n            defaultTabConfig.isNewTemplate = !templateID;\n\n            setQueryFromTabConfig();\n        }).error(function (data) {\n            const msg = getError(data);\n            toastr.error(msg, $translate.instant('sparql.template.get.template.error', {templateID: $scope.currentQuery.templateID}));\n            $scope.repositoryError = msg;\n        });\n    }\n\n    function setQueryFromTabConfig() {\n        $scope.tabsData = $scope.tabs = [defaultTabConfig];\n        $scope.currentQuery = angular.copy(defaultTabConfig);\n\n        if (window.editor) {\n            $scope.setQuery($scope.currentQuery.query);\n            loadTab();\n        }\n\n        $scope.$watch(function () {\n            return $scope.currentQuery.query;\n        }, function (newValue, oldValue) {\n            if (newValue !== oldValue) {\n                $scope.setDirty();\n            }\n        });\n    }\n\n    $scope.saveTemplate = function () {\n        if (!validateQuery()) {\n            return;\n        }\n\n        if (!$scope.currentQuery.templateID) {\n            toastr.error($translate.instant('sparql.template.iri.constraint'));\n            return;\n        } else {\n            validateTemplateID();\n            if ($scope.isInvalidTemplateId) {\n                return;\n            }\n        }\n\n        if ($scope.currentQuery.isNewTemplate) {\n            checkIfTemplateExists()\n                .then(() => {\n                    if (templateExist) {\n                        const modalMsg = decodeHTML($translate.instant('sparql.template.existing.template.error', {templateID: $scope.currentQuery.templateID}));\n                        ModalService.openSimpleModal({\n                            title: $translate.instant('common.confirm.save'),\n                            message: modalMsg,\n                            warning: true\n                        }).result\n                            .then(function () {\n                                saveNewTemplate();\n                            });\n                    } else {\n                        saveNewTemplate();\n                    }\n                });\n        } else {\n            if (!$scope.currentQuery.isPristine) {\n                SparqlTemplatesRestService.updateSparqlTemplate($scope.currentQuery, $repositories.getActiveRepository()).success(function () {\n                    $scope.currentQuery.isPristine = true;\n                    $scope.currentQuery.isNewTemplate = false;\n                    toastr.success($scope.currentQuery.templateID, $translate.instant('update.sparql.template.success.msg'));\n                    $scope.goBack();\n                }).error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, $translate.instant('save.sparql.template.failure.msg', {templateID: $scope.currentQuery.templateID}));\n                });\n            } else {\n                // No changes to template query, go back to\n                $scope.goBack();\n            }\n        }\n    };\n\n\n    // Add known prefixes\n    function addKnownPrefixes() {\n        SparqlRestService.addKnownPrefixes(JSON.stringify(window.editor.getValue()))\n            .success(function (data) {\n                if (angular.isDefined(window.editor) && angular.isDefined(data) && data !== window.editor.getValue()) {\n                    window.editor.setValue(data);\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('common.add.known.prefixes.error'));\n                return true;\n            });\n    }\n\n    $('textarea').on('paste', function () {\n        $timeout(function () {\n            addKnownPrefixes();\n        }, 0);\n    });\n\n    $scope.setDirty = function () {\n        $scope.currentQuery.isPristine = false;\n    };\n\n    function hasValidQuery() {\n        return window.editor && window.editor.getQueryMode() === 'update';\n    }\n\n    function validateQuery() {\n        if (!hasValidQuery()) {\n            toastr.error($translate.instant('sparql.template.query.constraint'), $translate.instant('jdbc.invalid.query'));\n            return false;\n        }\n\n        return true;\n    }\n\n    function validateTemplateID() {\n        $scope.isInvalidTemplateId = !UriUtils.isValidIri($scope.currentQuery.templateID);\n    }\n\n    function saveNewTemplate() {\n        SparqlTemplatesRestService.createSparqlTemplate($scope.currentQuery, $repositories.getActiveRepository()).success(function () {\n            $scope.currentQuery.isPristine = true;\n            $scope.currentQuery.isNewTemplate = false;\n            toastr.success($scope.currentQuery.templateID, $translate.instant('save.sparql.template.success.msg'));\n            $scope.goBack();\n        }).error(function (data) {\n            const msg = getError(data);\n            toastr.error(msg, $translate.instant('save.sparql.template.failure.msg', {templateID: $scope.currentQuery.templateID}));\n        });\n    }\n\n    function checkIfTemplateExists() {\n        return SparqlTemplatesRestService\n            .getSparqlTemplates($repositories.getActiveRepository())\n                .success(function (data) {\n                    templateExist = data.find((templateId) => templateId === $scope.currentQuery.templateID);\n        }).error(function (data) {\n            const msg = getError(data);\n            toastr.error(msg, $translate.instant('sparql.template.get.templates.error'));\n        });\n    }\n}\n","angular\n    .module('graphdb.framework.utils.notifications', [])\n    .factory('Notifications', Notifications);\n\nNotifications.$inject = ['toastr', '$translate'];\n\nfunction Notifications(toastr, $translate) {\n    return {\n        showToastMessageWithDelay\n    };\n\n    /**\n     *  This method will show message with tiny delay and only after completion\n     *  of latter redirection to \"graphs-visualizations\" page will happen.\n     * @param {string} message The message to be displayed.\n     * @return {Promise<any>}\n     */\n    function showToastMessageWithDelay(message) {\n        return new Promise((r) => {\n            toastr.success($translate.instant(message));\n            setTimeout(r, 200);\n        });\n    }\n}\n"],"sourceRoot":""}