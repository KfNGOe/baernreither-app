{"version":3,"sources":["webpack:///./src/js/angular/guides/steps/complex/import-rdf-file/plugin.js"],"names":["PluginRegistry","add","guideBlockName","getSteps","options","services","GuideUtils","toastr","$translate","$interpolate","mainAction","steps","angular","extend","menu","showIntro","resourcePath","push","title","importSettingsButtonSelector","getGuideElementSelector","content","url","elementSelector","advanceOn","undefined","show","guide","$","on","waitFor","resourceFile","then","next","hide","off","onNextValidate","length","noNextErrorToast","placement","onNextClick","clickOnGuideElement","onPreviousClick","Promise","resolve","beforeShowPromise","reject","deferredShow","catch","error","instant","canBePaused"],"mappings":"4EAAAA,eAAeC,IAAI,aAAc,CAC7B,CACIC,eAAgB,kBAChBC,SAAU,CAACC,EAASC,KAChB,MAAMC,EAAaD,EAASC,WACtBC,EAASF,EAASE,OAClBC,EAAaH,EAASG,WACtBC,EAAeJ,EAASI,aAC9BL,EAAQM,WAAa,cAErB,MAAMC,EAAQ,CACV,CACIT,eAAgB,kBAChBE,QAASQ,QAAQC,OAAO,GAAI,CACxBC,KAAM,SACNC,WAAW,GACZX,KAIPA,EAAQY,cACRL,EAAMM,KACF,CACIf,eAAgB,0BAChBE,QAASQ,QAAQC,OAAO,GAAI,CACxBK,MAAO,IACRd,KAKf,MAAMe,EAA+Bb,EAAWc,wBAAwB,iCAqFxE,OApFAT,EAAMM,KACF,CACIf,eAAgB,oBAChBE,QAASQ,QAAQC,OAAO,GAAI,CACxBQ,QAAS,4CACTC,IAAK,UACLC,gBAAiBjB,EAAWc,wBAAwB,uBAEpDI,eAAWC,EACXC,KAAOC,GAAU,KAEbC,EAAE,6BACGC,GAAG,wBAAwB,WAExBvB,EAAWwB,QAAQxB,EAAWc,wBAAwB,eAAiBhB,EAAQ2B,cAAe,GACzFC,KAAK,IAAML,EAAMM,YAGlCC,KAAM,IAAM,KAERN,EAAE,6BAA6BO,IAAI,yBAEvCC,eAAgB,MACPR,EAAEtB,EAAWc,wBAAwB,eAAiBhB,EAAQ2B,eAAeM,SAC9E/B,EAAWgC,iBAAiB/B,EAAQC,EAAYC,EAC5C,0DAA2DL,IACxD,IAKhBA,IAEP,CACIF,eAAgB,oBAChBE,QAASQ,QAAQC,OAAO,GAAI,CACxBQ,QAAS,+DACTE,gBAAiBjB,EAAWc,wBAAwB,eAAiBhB,EAAQ2B,cAC7ET,IAAK,UACLiB,UAAW,OACXC,YAAa,IAAMlC,EAAWmC,oBAAoB,eAAiBrC,EAAQ2B,aAAxDzB,IACpBF,IAEP,CACIF,eAAgB,oBAChBE,QAASQ,QAAQC,OAAO,GAAI,CACxBQ,QAAS,0EACTE,gBAAiBJ,EACjBoB,UAAW,MACXG,gBAAiB,IAAM,IAAIC,SAAQ,SAAUC,GACzCtC,EAAWmC,oBAAoB,gCAA/BnC,GACK0B,KAAK,IAAMY,QAEpBC,kBAAmB,IAAM,IAAIF,SAAQ,SAAUC,EAASE,GACpDzC,EAASC,WAAWyC,aAAa,IAAjC1C,GACK2B,KAAK,KACF3B,EAASC,WAAWwB,QAAQX,EAA8B,GACrDa,KAAK,KACFY,MAEHI,MAAOC,IACJ5C,EAASE,OAAO0C,MAAM5C,EAASG,WAAW0C,QAAQ,mCAClDJ,EAAOG,UAI3BT,YAAa,IAAMlC,EAAWmC,oBAAoB,gCAA/BnC,GACnB6C,aAAa,GACd/C,IAEP,CACIF,eAAgB,oBAChBE,QAASQ,QAAQC,OAAO,GAAI,CACxBQ,QAAS,+CACTC,IAAK,UACLC,gBAAiBjB,EAAWc,wBAAwB,sBACpDsB,gBAAiB,IAAM,IAAIC,SAAQ,SAAUC,GACzCtC,EAAWmC,oBAAoB,eAAiBrC,EAAQ2B,aAAxDzB,GACK0B,KAAK,IAAMY,SAErBxC,KAIJO","file":"87.624ab629bbd1c3bafabc.bundle.js","sourcesContent":["PluginRegistry.add('guide.step', [\n    {\n        guideBlockName: 'import-rdf-file',\n        getSteps: (options, services) => {\n            const GuideUtils = services.GuideUtils;\n            const toastr = services.toastr;\n            const $translate = services.$translate;\n            const $interpolate = services.$interpolate;\n            options.mainAction = 'import-file';\n\n            const steps = [\n                {\n                    guideBlockName: 'click-main-menu',\n                    options: angular.extend({}, {\n                        menu: 'import',\n                        showIntro: true\n                    }, options)\n                }\n            ];\n\n            if (options.resourcePath) {\n                steps.push(\n                    {\n                        guideBlockName: 'download-guide-resource',\n                        options: angular.extend({}, {\n                            title: ''\n                        }, options)\n                    }\n                );\n            }\n\n            const importSettingsButtonSelector = GuideUtils.getGuideElementSelector('import-settings-import-button');\n            steps.push(...[\n                {\n                    guideBlockName: 'clickable-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.import_rdf_file.content',\n                        url: '/import',\n                        elementSelector: GuideUtils.getGuideElementSelector('uploadRdfFileButton'),\n                        // Disable default behavior of service when element is clicked.\n                        advanceOn: undefined,\n                        show: (guide) => () => {\n                            // Add \"change\" listener to the file upload input, it will be triggered when a file is selected.\n                            $('#ngf-wb-import-uploadFile')\n                                .on('change.importRdfFile', function () {\n                                    // Check if expected file is selected, then process to the next step.\n                                    GuideUtils.waitFor(GuideUtils.getGuideElementSelector('import-file-' + options.resourceFile), 2)\n                                        .then(() => guide.next());\n                                });\n                        },\n                        hide: () => () => {\n                            // Remove ths listener from element. It is important when step is hided.\n                            $('#ngf-wb-import-uploadFile').off('change.importRdfFile');\n                        },\n                        onNextValidate: () => {\n                            if (!$(GuideUtils.getGuideElementSelector('import-file-' + options.resourceFile)).length) {\n                                GuideUtils.noNextErrorToast(toastr, $translate, $interpolate,\n                                    'guide.step_plugin.import_rdf_file.file-must-be-uploaded', options);\n                                return false;\n                            } else {\n                                return true;\n                            }\n                        }\n                    }, options)\n                },\n                {\n                    guideBlockName: 'clickable-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.import_rdf_file.import-file.button.content',\n                        elementSelector: GuideUtils.getGuideElementSelector('import-file-' + options.resourceFile),\n                        url: '/import',\n                        placement: 'left',\n                        onNextClick: () => GuideUtils.clickOnGuideElement('import-file-' + options.resourceFile)()\n                    }, options)\n                },\n                {\n                    guideBlockName: 'clickable-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.import_rdf_file.import-settings.import.button.content',\n                        elementSelector: importSettingsButtonSelector,\n                        placement: 'top',\n                        onPreviousClick: () => new Promise(function (resolve) {\n                            GuideUtils.clickOnGuideElement('import-settings-cancel-button')()\n                                .then(() => resolve());\n                        }),\n                        beforeShowPromise: () => new Promise(function (resolve, reject) {\n                            services.GuideUtils.deferredShow(300)()\n                                .then(() => {\n                                    services.GuideUtils.waitFor(importSettingsButtonSelector, 3)\n                                        .then(() => {\n                                            resolve();\n                                        })\n                                        .catch((error) => {\n                                            services.toastr.error(services.$translate.instant('guide.unexpected.error.message'));\n                                            reject(error);\n                                        });\n                                });\n                        }),\n                        onNextClick: () => GuideUtils.clickOnGuideElement('import-settings-import-button')(),\n                        canBePaused: false\n                    }, options)\n                },\n                {\n                    guideBlockName: 'read-only-element',\n                    options: angular.extend({}, {\n                        content: 'guide.step_plugin.import_status_info.content',\n                        url: '/import',\n                        elementSelector: GuideUtils.getGuideElementSelector('import-status-info'),\n                        onPreviousClick: () => new Promise(function (resolve) {\n                            GuideUtils.clickOnGuideElement('import-file-' + options.resourceFile)()\n                                .then(() => resolve());\n                        })\n                    }, options)\n                }\n            ]);\n\n            return steps;\n        }\n    }\n]);\n"],"sourceRoot":""}