{"version":3,"sources":["webpack:///./src/js/angular/similarity/controllers/create-index.controller.js","webpack:///./src/js/angular/utils/notifications.js"],"names":["CreateSimilarityIdxCtrl","$scope","toastr","$modal","$timeout","SimilarityRestService","SparqlRestService","$location","productInfo","Notifications","RDF4JRepositoriesRestService","LocalStorageAdapter","LSKeys","$translate","indexType","search","type","undefined","startsWith","viewType","newIndex","info","page","defaultTabConfig","id","name","query","inference","sameAs","initForViewType","indexNameFromLocation","editSearchQuery","options","searchQueries","searchQuery","analogicalQuery","currentQuery","notoolbarInference","notoolbarSameAs","window","editor","setQuery","allSamples","samples","stopList","analyzer","isLiteralIndex","getAndRemoveOption","getIndexes","success","data","literalIndexes","concat","filter","idx","status","map","inputIndex","desiredIdx","j","length","error","msg","getError","instant","filenamePattern","RegExp","validateIndex","invalidIndexName","saveQueries","test","getQueryType","appendOption","option","value","key","optArr","split","i","join","saveQueryToLocal","currentQueryTab","setLoader","isRunning","progressMessage","extraMessage","yasrInnerContainer","angular","element","document","getElementById","queryIsRunning","queryStartTime","Date","now","countTimeouted","addClass","removeClass","$$phase","$apply","fixSizesOnHorizontalViewModeSwitch","verticalViewParam","visibleWindowHeight","innerHeight","documentElement","clientHeight","body","verticalView","orientationViewMode","viewMode","newHeight","querySelector","getBoundingClientRect","style","height","noPadding","minHeight","paddingRight","paddingLeft","timer","$on","cancel","yasr","container","resize","showHideEditor","selectTab","$","tab","runQuery","changePage","explain","executedQueryTab","warning","getQueryMode","explainRequested","currentTabConfig","resultsCount","resetCurrentTabConfig","getNamespaces","getRepositoryNamespaces","usedPrefixes","results","bindings","forEach","e","prefix","namespace","namespaces","repositoryError","finally","addKnownPrefixes","JSON","stringify","getValue","isDefined","setValue","getExistingTabId","existingTabId","tabsData","item","loadTab","queryType","offset","allResultsCount","pageSize","timeFinished","timeTook","sizeDelta","css","getQueryID","attr","getSearchQueries","getSamples","selectQuery","infer","tabs","copy","$watch","helpHidden","get","HIDE_SIMILARITY_HELP","toggleHelp","set","viewQuery","getQuery","indexName","indexOptions","indexStopList","queryInference","querySameAs","indexAnalyzer","open","templateUrl","controller","resolve","isInvalidIndexName","isEmptyIndexName","trim","goToPage","showEditor","notoolbar","createIndex","index","err","url","xhr","abort","showPreview","outputType","queryExists","saveTab","findTabIndexByID","addNewTab","callback","tabName","savedQuery","changePagination","toggleSampleQueries","querySelected","tabId","getLoaderMessage","timeSeconds","timeHuman","getHumanReadableSeconds","message","changeViewMode","tabID","remove","focusQueryEditor","find","is","focus","getActiveRepository","on","$watchCollection","tabEvent","relatedTarget","target","showSampleQueries","sampleQueries","getResultsDescription","getUpdateDescription","getStaleWarningMessage","saveSearchQuery","changedQuery","isSearchQuery","then","async","showToastMessageWithDelay","response","getCloseBtnMsg","operationType","operation","module","$inject","Promise","r","setTimeout","factory"],"mappings":"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","file":"54.fe5e554af6ba2c5778c1.bundle.js","sourcesContent":["import 'angular/utils/notifications';\nimport 'angular/utils/local-storage-adapter';\n\nangular\n    .module('graphdb.framework.similarity.controllers.create', [\n        'graphdb.framework.utils.notifications',\n        'graphdb.framework.utils.localstorageadapter'\n    ])\n    .controller('CreateSimilarityIdxCtrl', CreateSimilarityIdxCtrl);\n\nCreateSimilarityIdxCtrl.$inject = ['$scope', 'toastr', '$modal', '$timeout', 'SimilarityRestService', 'SparqlRestService', '$location', 'productInfo', 'Notifications', 'RDF4JRepositoriesRestService', 'LocalStorageAdapter', 'LSKeys', '$translate'];\n\nfunction CreateSimilarityIdxCtrl($scope, toastr, $modal, $timeout, SimilarityRestService, SparqlRestService, $location, productInfo, Notifications, RDF4JRepositoriesRestService, LocalStorageAdapter, LSKeys, $translate) {\n\n    const indexType = $location.search().type;\n    if (indexType === undefined || indexType.startsWith('text')) {\n        $scope.viewType = 'text';\n    } else {\n        $scope.viewType = indexType;\n    }\n\n    const textDefaultOptions = '-termweight idf';\n    const predDefaultOptions = '';\n    $scope.newIndex = {};\n\n    $scope.info = productInfo;\n    $scope.page = 1;\n\n    const defaultTabConfig = {\n        id: '1',\n        name: '',\n        query: '',\n        inference: true,\n        sameAs: true\n    };\n\n    let getNewIndexName = function (indexNameFromLocation) {\n        if (indexNameFromLocation) {\n            if ($scope.page !== 1) {\n                return indexNameFromLocation;\n            } else {\n                return 'Copy_of_' + indexNameFromLocation;\n            }\n        }\n        return '';\n    };\n\n    const initForViewType = function () {\n        $scope.editSearchQuery = $location.search().editSearchQuery;\n        $scope.page = $scope.editSearchQuery ? 2 : 1;\n        $scope.newIndex.name = getNewIndexName($location.search().name);\n        $scope.newIndex.options = ($location.search().options ? $location.search().options : ($scope.viewType === \"text\") ? textDefaultOptions : predDefaultOptions);\n\n        if ($scope.searchQueries) {\n            $scope.newIndex.searchQuery = $location.search().searchQuery ? $location.search().searchQuery : $scope.searchQueries[$scope.viewType];\n            if ($scope.viewType === 'predication') {\n                $scope.newIndex.analogicalQuery = $location.search().analogicalQuery ? $location.search().analogicalQuery : $scope.searchQueries['analogical'];\n            }\n        }\n\n        if ($scope.editSearchQuery) {\n            // Default will be opened search query tab for edition\n            $scope.currentQuery.query = $scope.newIndex.searchQuery;\n            $scope.notoolbarInference = true;\n            $scope.notoolbarSameAs = true;\n            if (window.editor) {\n                $scope.setQuery($scope.newIndex.searchQuery);\n            }\n        } else {\n            if ($scope.viewType === 'text' && $scope.allSamples) {\n                $scope.samples = $scope.allSamples['text'];\n                $scope.newIndex.stopList = ($location.search().stopList ? $location.search().stopList : undefined);\n                $scope.newIndex.analyzer = ($location.search().analyzer ? $location.search().analyzer : 'org.apache.lucene.analysis.en.EnglishAnalyzer');\n                const isLiteralIndex = getAndRemoveOption('-literal_index');\n                if (isLiteralIndex !== undefined) {\n                    $scope.newIndex.isLiteralIndex = isLiteralIndex;\n                }\n                if (window.editor) {\n                    $scope.setQuery($scope.samples['literals']);\n                }\n            }\n            if ($scope.viewType === 'predication' && $scope.allSamples) {\n                SimilarityRestService.getIndexes()\n                    .success(function (data) {\n                        $scope.literalIndexes = ['no-index'].concat(data\n                            .filter(function (idx) {\n                                return idx.type === 'textLiteral' && (idx.status === 'BUILT' || idx.status === 'OUTDATED')\n                            })\n                            .map(function (idx) {\n                                return idx.name;\n                            }));\n\n                    if ($scope.newIndex.inputIndex === undefined) {\n                        const desiredIdx = getAndRemoveOption('-input_index');\n                        if (desiredIdx !== undefined) {\n                            for (let j = 0; j < $scope.literalIndexes.length; j++) {\n                                if (desiredIdx === $scope.literalIndexes[j]) {\n                                    $scope.newIndex.inputIndex = $scope.literalIndexes[j];\n                                }\n                            }\n                        }\n                    }\n                    if ($scope.newIndex.inputIndex === undefined) {\n                        $scope.newIndex.inputIndex = $scope.literalIndexes[0];\n                    }\n                })\n                .error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, $translate.instant('similarity.could.not.get.indexes.error'));\n                });\n\n                $scope.samples = $scope.allSamples['predication'];\n                if (window.editor) {\n                    $scope.setQuery($scope.samples['predication']);\n                }\n            }\n        }\n    };\n\n    const filenamePattern = new RegExp('^[a-zA-Z0-9-_]+$');\n\n    const validateIndex = function () {\n        $scope.invalidIndexName = false;\n        $scope.saveQueries();\n        if (!$scope.newIndex.name) {\n            $scope.invalidIndexName = $translate.instant('similarity.empty.index.name.error');\n            return false;\n        }\n        if (!filenamePattern.test($scope.newIndex.name)) {\n            $scope.invalidIndexName = $translate.instant('similarity.index.name.constraint');\n            return false;\n        }\n\n        if (!$scope.newIndex.query) {\n            toastr.error($translate.instant('similarity.empty.select.query.error'));\n            return false;\n        }\n\n        if (!$scope.newIndex.searchQuery) {\n            toastr.error($translate.instant('similarity.empty.search.query.error'));\n            return false;\n        }\n\n        if ($scope.viewType === 'predication' && !$scope.newIndex.analogicalQuery) {\n            toastr.error($translate.instant('similarity.empty.analogical.query.error'));\n            return false;\n        }\n\n        if (window.editor.getQueryType() !== 'SELECT') {\n            toastr.error($translate.instant('similarity.index.select.queries.constraint'));\n            return;\n        }\n\n        return true;\n    };\n\n    const appendOption = function (option, value) {\n        $scope.newIndex.options = $scope.newIndex.options + ($scope.newIndex.options === '' ? '' : ' ') + option + ' ' + value;\n    };\n\n    SimilarityRestService.getSearchQueries().success(function (data) {\n        $scope.searchQueries = data;\n        SimilarityRestService.getSamples().success(function (samples) {\n            defaultTabConfig.query = $location.search().selectQuery ? $location.search().selectQuery : samples['text']['literals'];\n            defaultTabConfig.inference = !($location.search().infer === 'false');\n            defaultTabConfig.sameAs = !($location.search().sameAs === 'false');\n            $scope.tabsData = $scope.tabs = [defaultTabConfig];\n            $scope.currentQuery = angular.copy(defaultTabConfig);\n            $scope.allSamples = samples;\n            initForViewType();\n        });\n    }).error(function (data) {\n        const msg = getError(data);\n        toastr.error(msg, $translate.instant('similarity.could.not.get.search.queries.error'));\n    });\n\n    $scope.$watch('viewType', function () {\n        initForViewType();\n    });\n\n    $scope.helpHidden = LocalStorageAdapter.get(LSKeys.HIDE_SIMILARITY_HELP) === 1;\n    $scope.toggleHelp = function (value) {\n        if (value === undefined) {\n            value = LocalStorageAdapter.get(LSKeys.HIDE_SIMILARITY_HELP);\n        }\n        if (value !== 1) {\n            LocalStorageAdapter.set(LSKeys.HIDE_SIMILARITY_HELP, 1);\n            $scope.helpHidden = true;\n        } else {\n            LocalStorageAdapter.set(LSKeys.HIDE_SIMILARITY_HELP, 0);\n            $scope.helpHidden = false;\n        }\n    };\n\n    $scope.viewQuery = function () {\n        if (!validateIndex()) {\n            return;\n        }\n\n        SimilarityRestService.getQuery({\n            indexName: $scope.newIndex.name,\n            indexOptions: $scope.newIndex.options,\n            query: $scope.currentQuery.query,\n            indexStopList: $scope.newIndex.stopList,\n            queryInference: $scope.currentQuery.inference,\n            querySameAs: $scope.currentQuery.sameAs,\n            viewType: $scope.viewType,\n            indexAnalyzer: $scope.newIndex.analyzer\n        }).success(function (query) {\n            if (query) {\n                $modal.open({\n                    templateUrl: 'pages/viewQuery.html',\n                    controller: 'ViewQueryCtrl',\n                    resolve: {\n                        query: function () {\n                            return query;\n                        }\n                    }\n                });\n            }\n        }).error(function (error) {\n            const msg = getError(error);\n            toastr.error(msg);\n        });;\n    };\n\n    $scope.$watch('newIndex.name', function () {\n        $scope.isInvalidIndexName = false;\n        $scope.isEmptyIndexName = false;\n    });\n\n    $scope.saveQueries = function () {\n        // save the current query\n        const query = window.editor.getValue().trim();\n        if ($scope.page === 1) {\n            $scope.newIndex.query = query;\n        } else if ($scope.page === 2) {\n            $scope.newIndex.searchQuery = query;\n        } else if ($scope.page === 3) {\n            $scope.newIndex.analogicalQuery = query;\n        }\n    };\n\n    $scope.goToPage = function (page) {\n        // ugly fix for GDB-3099\n        if (page !== 1 && $scope.viewMode !== 'yasr') {\n            $scope.showEditor();\n            $timeout(function () {\n                if (page === 2) {\n                    $scope.currentQuery.query = $scope.newIndex.searchQuery;\n                }\n                if (page === 3) {\n                    $scope.currentQuery.query = $scope.newIndex.analogicalQuery;\n                }\n\n                window.editor.setValue($scope.currentQuery.query || ' ');\n            });\n        }\n\n        $scope.saveQueries();\n        // get the saved query\n        if (page === 1) {\n            $scope.currentQuery.query = $scope.newIndex.query;\n        } else if (page === 2) {\n            $scope.currentQuery.query = $scope.newIndex.searchQuery;\n        } else if (page === 3) {\n            $scope.currentQuery.query = $scope.newIndex.analogicalQuery;\n        }\n\n        loadTab();\n        $scope.notoolbar = page !== 1;\n\n        $scope.page = page;\n    };\n\n    $scope.createIndex = function () {\n        if (!validateIndex()) {\n            return;\n        }\n        // Check existing indexes\n        SimilarityRestService.getIndexes()\n            .success(function (data) {\n                data.forEach(function (index) {\n                    if (index.name === $scope.newIndex.name) {\n                        $scope.invalidIndexName = $translate.instant('similarity.existing.index.name.error');\n                    }\n                });\n                if (!$scope.invalidIndexName) {\n                    let indexType = $scope.viewType;\n\n                    if ($scope.literalIndexes !== undefined) {\n                        const inputIndex = $scope.newIndex.inputIndex;\n                        if (inputIndex !== $scope.literalIndexes[0]) {\n                            appendOption('-input_index', inputIndex);\n                        }\n                    }\n                    if ($scope.newIndex.isLiteralIndex === 'true') {\n                        appendOption('-literal_index', 'true');\n                        indexType = 'textLiteral';\n                    }\n\n                    SimilarityRestService.createIndex('POST',\n                        $scope.newIndex.name,\n                        $scope.newIndex.options,\n                        $scope.newIndex.query,\n                        $scope.newIndex.searchQuery,\n                        $scope.newIndex.analogicalQuery,\n                        $scope.newIndex.stopList,\n                        $scope.currentQuery.inference,\n                        $scope.currentQuery.sameAs,\n                        indexType,\n                        $scope.newIndex.analyzer)\n                        .error(function (err) {\n                            toastr.error(getError(err), $translate.instant('similarity.create.index.error'));\n                        });\n                    $location.url('similarity');\n                }\n\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('similarity.could.not.get.indexes.error'));\n            });\n    };\n\n    // Called when user clicks on a sample query\n    $scope.setQuery = function (query) {\n        // Hack for YASQE bug\n        window.editor.setValue(query ? query : ' ');\n    };\n\n    // TODO don't copy paste each time, this is the same as in the graph config\n    // DOWN HERE WE KEEP EVERYTHING PURELY QUERY EDITOR (MOSTLY BORROWED FROM query-editor.controller.js)\n\n    $scope.showEditor = function () {\n        if (window.editor.xhr) {\n            window.editor.xhr.abort();\n        }\n        $scope.viewMode = 'yasr';\n    };\n\n    $scope.showPreview = function () {\n        // For some reason YASR gets confused and sets this to rawResponse\n        // if we execute a CONSTRUCT and then a SELECT. This makes sure it's always table.\n        $scope.currentQuery.outputType = 'table';\n        $scope.runQuery();\n    };\n\n    $scope.resetCurrentTabConfig = function () {\n        $scope.currentTabConfig = {\n            pageSize: 100, // page limit 100 as this is only used for preview\n            page: 1,\n            allResultsCount: 0,\n            resultsCount: 0\n        };\n    };\n\n    $scope.queryExists = false;\n\n    $scope.resetCurrentTabConfig();\n\n    $scope.tabsData = $scope.tabs = [defaultTabConfig];\n\n    // query tab operations\n    $scope.saveTab = saveTab;\n    $scope.loadTab = loadTab;\n    $scope.addNewTab = addNewTab;\n\n    // query operations\n    $scope.runQuery = runQuery;\n    $scope.getNamespaces = getNamespaces;\n    $scope.changePagination = changePagination;\n    $scope.toggleSampleQueries = toggleSampleQueries;\n    $scope.addKnownPrefixes = addKnownPrefixes;\n    $scope.getExistingTabId = getExistingTabId;\n    $scope.querySelected = querySelected;\n    $scope.saveQueryToLocal = saveQueryToLocal;\n\n    $scope.setLoader = setLoader;\n    $scope.getLoaderMessage = getLoaderMessage;\n\n    // query editor and results orientation\n    $scope.fixSizesOnHorizontalViewModeSwitch = fixSizesOnHorizontalViewModeSwitch;\n    $scope.changeViewMode = changeViewMode;\n    $scope.showHideEditor = showHideEditor;\n    $scope.focusQueryEditor = focusQueryEditor;\n    $scope.orientationViewMode = true;\n\n    // start of repository actions\n    $scope.getActiveRepository();\n\n    function getAndRemoveOption(key) {\n        const optArr = $scope.newIndex.options.split(' ');\n        for (let i = 0; i < optArr.length; i++) {\n            if (optArr[i] === key && i + 1 < optArr.length) {\n                const value = optArr[i + 1];\n\n                delete optArr[i];\n                delete optArr[i + 1];\n                $scope.newIndex.options = optArr.join(' ');\n\n                return value;\n            }\n        }\n        return undefined;\n    }\n\n    function saveQueryToLocal(currentQueryTab) {\n    }\n\n    function setLoader(isRunning, progressMessage, extraMessage) {\n        const yasrInnerContainer = angular.element(document.getElementById('yasr-inner'));\n        $scope.queryIsRunning = isRunning;\n        if (isRunning) {\n            $scope.queryStartTime = Date.now();\n            $scope.countTimeouted = false;\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n            yasrInnerContainer.addClass('hide');\n        } else {\n            $scope.progressMessage = '';\n            $scope.extraMessage = '';\n            yasrInnerContainer.removeClass('hide');\n        }\n        // We might call this from angular or outside angular so take care of applying the scope.\n        if ($scope.$$phase === null) {\n            $scope.$apply();\n        }\n    }\n\n    function getLoaderMessage() {\n        const timeSeconds = (Date.now() - $scope.queryStartTime) / 1000;\n        const timeHuman = $scope.getHumanReadableSeconds(timeSeconds);\n        let message = '';\n\n        if ($scope.progressMessage) {\n            message = $scope.progressMessage + '... ' + timeHuman;\n        } else {\n            message = $translate.instant('common.running.operation', {timeHuman: timeHuman});\n        }\n        if ($scope.extraMessage && timeSeconds > 10) {\n            message += '\\n' + $scope.extraMessage;\n        }\n\n        return message;\n    }\n\n    // start of query editor results orientation operations\n    function fixSizesOnHorizontalViewModeSwitch(verticalViewParam) {\n        function visibleWindowHeight() {\n            return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight || 0;\n        }\n\n        const verticalView = verticalViewParam;\n        if (!$scope.orientationViewMode) {\n            $scope.noPadding = {paddingRight: 15, paddingLeft: 0};\n\n            // window.editor is undefined if no repo is selected\n            if (window.editor && document.querySelector('.CodeMirror-wrap')) {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n                document.getElementById('yasr').style.minHeight = newHeight + 'px';\n                //window.editor.refresh();\n            } else {\n                let timer;\n                if (verticalView) {\n                    timer = $timeout(function () {\n                        $scope.fixSizesOnHorizontalViewModeSwitch(verticalView);\n                    }, 100);\n                } else {\n                    timer = $timeout($scope.fixSizesOnHorizontalViewModeSwitch, 100);\n                }\n\n                $scope.$on('$destroy', function () {\n                    $timeout.cancel(timer);\n                });\n            }\n        } else {\n            if ($scope.viewMode === 'yasr') {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n            } else {\n                $scope.noPadding = {};\n                document.querySelector('.CodeMirror-wrap').style.height = '';\n            }\n            document.getElementById('yasr').style.minHeight = '';\n        }\n        if (window.yasr && window.yasr.container) {\n            $timeout(function () {\n                window.yasr.container.resize();\n            }, 100);\n        }\n    }\n\n    if (!$scope.orientationViewMode) {\n        showHideEditor();\n    }\n\n    function changeViewMode(tabID) {\n        $scope.viewMode = 'none';\n        $scope.orientationViewMode = !$scope.orientationViewMode;\n        fixSizesOnHorizontalViewModeSwitch();\n        $('.dataTables_filter').remove();\n        $('.resultsTable').remove();\n        $timeout(function () {\n            loadTab();\n            selectTab(tabID);\n        }, 100);\n    }\n\n    function showHideEditor() {\n        fixSizesOnHorizontalViewModeSwitch(true);\n    }\n\n    function focusQueryEditor() {\n        if (!angular.element(document).find('.editable-input').is(':focus')) {\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }\n    }\n\n    // end of query editor results orientation operations\n\n    function selectTab(id) {\n        $timeout(function () {\n            $('a[data-id = \"' + id + '\"]').tab('show');\n        }, 0);\n    }\n\n    // start of query operations\n    function runQuery(changePage, explain) {\n        $scope.executedQueryTab = $scope.currentQuery;\n        if (window.editor.getQueryType() !== 'SELECT') {\n            toastr.error($translate.instant('similarity.indexes.select.queries.constraint'));\n            return;\n        }\n        if (explain && window.editor.getQueryType() !== 'SELECT') {\n            toastr.warning($translate.instant('similarity.explain.select.queries.constraint'));\n            return;\n        }\n\n        if (window.editor.getQueryMode() === 'update') {\n            toastr.warning($translate.instant('cannot.execute.update.error'));\n            return;\n        }\n\n        $scope.explainRequested = explain;\n        if (!$scope.queryIsRunning) {\n            if (changePage) {\n                $scope.currentTabConfig.resultsCount = 0;\n            } else {\n                $scope.resetCurrentTabConfig();\n            }\n\n            // Hides the editor and shows the yasr results\n            $scope.viewMode = 'editor';\n            if ($scope.orientationViewMode) {\n                $scope.fixSizesOnHorizontalViewModeSwitch();\n            }\n\n            setLoader(true, $translate.instant('evaluating.query.msg'));\n            window.editor.query();\n        }\n    }\n\n    // FIXME: this is copy-pasted in graphs-config.controller.js and query-editor.controller.js. Find a way to avoid duplications\n    function getNamespaces() {\n        // Signals the namespaces are to be fetched => loader will be shown\n        setLoader(true, $translate.instant('common.refreshing.namespaces'), $translate.instant('common.extra.message'));\n        RDF4JRepositoriesRestService.getRepositoryNamespaces()\n            .success(function (data) {\n                const usedPrefixes = {};\n                data.results.bindings.forEach(function (e) {\n                    usedPrefixes[e.prefix.value] = e.namespace.value;\n                });\n                $scope.namespaces = usedPrefixes;\n            })\n            .error(function (data) {\n                $scope.repositoryError = getError(data);\n            })\n            .finally(function () {\n                // Signals namespaces were fetched => loader will be hidden\n                setLoader(false);\n            });\n    }\n\n    function changePagination() {\n        runQuery(true, $scope.explainRequested);\n    }\n\n    if ($scope.getActiveRepository()) {\n        getNamespaces();\n    }\n\n    $scope.$on('$destroy', function () {\n        window.editor = null;\n        window.yasr = null;\n    });\n\n    function toggleSampleQueries() {\n    }\n\n    // Add known prefixes\n    function addKnownPrefixes() {\n        SparqlRestService.addKnownPrefixes(JSON.stringify(window.editor.getValue()))\n            .success(function (data) {\n                if (angular.isDefined(window.editor) && angular.isDefined(data) && data !== window.editor.getValue()) {\n                    window.editor.setValue(data);\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('common.add.known.prefixes.error'));\n                return true;\n            });\n    }\n\n    $('textarea').on('paste', function () {\n        $timeout(function () {\n            addKnownPrefixes();\n        }, 0);\n    });\n\n    function querySelected(query) {\n        const tabId = getExistingTabId(query);\n        $scope.toggleSampleQueries();\n        if (!angular.isDefined(tabId)) {\n            $scope.addNewTab(null, query.name, query.body);\n        } else {\n            selectTab(tabId);\n        }\n    }\n\n    function getExistingTabId(query) {\n        let existingTabId = undefined;\n        angular.forEach($scope.tabsData, function (item) {\n            if (item.name === query.name && item.query === query.body) {\n                existingTabId = item.id;\n                return item;\n            }\n        });\n\n        return existingTabId;\n    }\n\n\n    // end of query operations\n\n    // start of query tab operations\n    function findTabIndexByID(id) {\n        for (let i = 0; i < $scope.tabsData.length; i++) {\n            const tab = $scope.tabsData[i];\n            if (tab.id === id) {\n                return i;\n            }\n        }\n    }\n\n    $scope.$watchCollection('[currentQuery.inference, currentQuery.sameAs]', function () {\n        saveQueryToLocal($scope.currentQuery);\n    });\n\n    function saveTab(id) {\n        const idx = findTabIndexByID(id);\n        // Tab was deleted, don't try to save it's state\n        if (idx === undefined) {\n            return {};\n        }\n        const tab = $scope.tabsData[idx];\n        //tab.query = window.editor.getValue();\n        $scope.saveQueryToLocal(tab);\n        return tab;\n    }\n\n    function addNewTab(callback, tabName, savedQuery) {\n    }\n\n    function loadTab() {\n        $scope.tabsData = [$scope.currentQuery];\n\n        const tab = $scope.currentQuery;\n\n        if ($scope.currentQuery.query === null || $scope.currentQuery.query === '') {\n            // hack for YASQE bug\n            window.editor.setValue(' ');\n        } else {\n            window.editor.setValue($scope.currentQuery.query || ' ');\n        }\n\n        $timeout(function () {\n            $scope.currentTabConfig = {};\n            $scope.currentTabConfig.queryType = tab.queryType;\n            $scope.currentTabConfig.resultsCount = tab.resultsCount;\n\n            $scope.currentTabConfig.offset = tab.offset;\n            $scope.currentTabConfig.allResultsCount = tab.allResultsCount;\n            $scope.currentTabConfig.page = tab.page;\n            $scope.currentTabConfig.pageSize = tab.pageSize;\n\n            $scope.currentTabConfig.timeFinished = tab.timeFinished;\n            $scope.currentTabConfig.timeTook = tab.timeTook;\n            $scope.currentTabConfig.sizeDelta = tab.sizeDelta;\n            $scope.$apply();\n        }, 0);\n\n        //Remove paddign of yasr so it will be aligned with sparql editor\n        $('#yasr').css('padding', '0');\n    }\n\n    function getQueryID(element) {\n        return $(element).attr('data-id');\n    }\n\n    $scope.$on('tabAction', function (e, tabEvent) {\n        if (tabEvent.relatedTarget) {\n            $scope.saveTab(getQueryID(tabEvent.relatedTarget));\n        }\n        $scope.loadTab(getQueryID(tabEvent.target));\n    });\n\n    $scope.$on('deleteAllexeptSelected', function (e, tabs) {\n        $scope.tabsData = tabs;\n        $scope.tabs = tabs;\n    });\n    // end of query tab operations\n\n    $scope.currentQuery = angular.copy(defaultTabConfig);\n    // $scope.state = {};\n    $scope.showSampleQueries = false;\n    $scope.savedQuery = {};\n    $scope.sampleQueries = {};\n\n    $scope.getResultsDescription = function () {\n    };\n\n    $scope.getUpdateDescription = function () {\n    };\n\n    $scope.getStaleWarningMessage = function () {\n    };\n\n    $scope.saveSearchQuery = function () {\n        // Should validate that query is SELECT\n        if (window.editor.getQueryType() !== 'SELECT') {\n            toastr.error($translate.instant('similarity.index.select.queries.constraint'));\n            return;\n        }\n        let data = {\n            name: $scope.newIndex.name,\n            changedQuery: $scope.currentQuery.query,\n            isSearchQuery: $scope.page === 2\n        };\n\n        return SimilarityRestService.saveSearchQuery(JSON.stringify(data))\n            .then(async function () {\n                await Notifications.showToastMessageWithDelay($scope.page === 2 ? 'similarity.changed.search.query.msg' : 'similarity.changed.analogical.query.msg');\n                $location.url('similarity');\n            }, function (response) {\n                toastr.error(getError(response), $translate.instant('similarity.change.query.error'));\n            });\n    };\n\n    $scope.getCloseBtnMsg = function () {\n        let operationType = $scope.editSearchQuery ? $translate.instant('similarity.query.edition.msg') : $translate.instant('similarity.index.creation.msg');\n        return $translate.instant('similarity.close.btn.msg', {operation: operationType});\n    }\n}\n","angular\n    .module('graphdb.framework.utils.notifications', [])\n    .factory('Notifications', Notifications);\n\nNotifications.$inject = ['toastr', '$translate'];\n\nfunction Notifications(toastr, $translate) {\n    return {\n        showToastMessageWithDelay\n    };\n\n    /**\n     *  This method will show message with tiny delay and only after completion\n     *  of latter redirection to \"graphs-visualizations\" page will happen.\n     * @param {string} message The message to be displayed.\n     * @return {Promise<any>}\n     */\n    function showToastMessageWithDelay(message) {\n        return new Promise((r) => {\n            toastr.success($translate.instant(message));\n            setTimeout(r, 200);\n        });\n    }\n}\n"],"sourceRoot":""}