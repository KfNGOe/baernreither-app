{"version":3,"sources":["webpack:///./src/js/angular/similarity/controllers/similarity-list.controller.js"],"names":["SimilarityCtrl","$scope","$interval","toastr","$repositories","$licenseService","ModalService","$modal","SimilarityRestService","AutocompleteRestService","productInfo","RDF4JRepositoriesRestService","$translate","PREFIX","PREFIX_PREDICATION","ANY_PREDICATE","pluginName","pluginIsActive","setPluginIsActive","isPluginActive","literalForQuery","literal","iriForQuery","iri","undefined","startsWith","endsWith","shouldSkipCall","getActiveRepository","isActiveRepoFedXType","isActiveRepoOntopType","yasr","checkAutocompleteStatus","isLicenseValid","getAutocompletePromise","info","getSearchQueries","success","data","searchQueries","error","msg","getError","instant","encodeURIComponent","param","getSimilarityIndexes","getIndexes","similarityIndexes","pullList","timer","$broadcast","$","attr","$on","cancel","$watch","getNamespacesPromise","getNamespaces","usedPrefixes","results","bindings","forEach","e","prefix","value","namespace","destroy","document","getElementById","getUsedPrefixes","persistency","hideHeader","pluginsOptions","getYasrConfiguration","loading","selected","searchType","resultType","empty","goToSimilarityIndex","index","status","lastSearch","type","collapse","toggleOntoLoader","showLoader","yasrInnerContainer","angular","element","resultsLoader","addClass","removeClass","performSearch","uri","parameters","termOrSubject","psiSubject","predicate","sparqlQuery","analogicalQuery","searchQuery","sendData","query","$index","$query","$searchType","$resultType","$parameters","$psiPredicate","searchSubject","$givenSubject","analogicalSubject","$givenObject","analogicalObject","$searchSubject","ajax","method","url","headers","Accept","done","textStatus","jqXhrOrErrorString","setResponse","fail","viewSearchQuery","queryTemplate","tokens","match","substring","indexOf","replacedQuery","replace","name","searchParameters","open","templateUrl","controller","resolve","deleteIndex","openSimpleModal","title","message","warning","result","then","err","viewCreateQuery","getQuery","indexName","indexOptions","options","selectQuery","indexStopList","stopList","queryInference","infer","querySameAs","sameAs","viewType","indexAnalyzer","analyzer","rebuildIndex","text","res","copyToClipboardResult","openCopyToClipboardModal","trimIRI","_","trim","module","$inject"],"mappings":"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","file":"126.48e00b0525b3ef8efbe8.bundle.js","sourcesContent":["import YASR from 'lib/yasr.bundled';\nimport {decodeHTML} from \"../../../../app\";\nimport {YasrUtils} from \"../../utils/yasr-utils\";\n\nangular\n    .module('graphdb.framework.similarity.controllers.list', [])\n    .controller('SimilarityCtrl', SimilarityCtrl);\n\nSimilarityCtrl.$inject = ['$scope', '$interval', 'toastr', '$repositories', '$licenseService', 'ModalService', '$modal', 'SimilarityRestService', 'AutocompleteRestService', 'productInfo', 'RDF4JRepositoriesRestService', '$translate'];\n\nfunction SimilarityCtrl($scope, $interval, toastr, $repositories, $licenseService, ModalService, $modal, SimilarityRestService, AutocompleteRestService, productInfo, RDF4JRepositoriesRestService, $translate) {\n\n    const PREFIX = 'http://www.ontotext.com/graphdb/similarity/';\n    const PREFIX_PREDICATION = 'http://www.ontotext.com/graphdb/similarity/psi/';\n    const PREFIX_INSTANCE = PREFIX + 'instance/';\n    const ANY_PREDICATE = PREFIX_PREDICATION + 'any';\n    $scope.pluginName = 'similarity';\n    $scope.pluginIsActive = true;\n\n    $scope.setPluginIsActive = function (isPluginActive) {\n        $scope.pluginIsActive = isPluginActive;\n    };\n\n    const literalForQuery = function (literal) {\n        return '\"' + literal + '\"';\n    };\n\n    // TODO: Fix cases when this function is called with undefined\n    const iriForQuery = function (iri) {\n        // Do not put brackets on nested triples\n        if (iri === undefined || iri.startsWith(\"<<\") && iri.endsWith(\">>\")) {\n            return iri;\n        }\n        return '<' + iri + '>';\n    };\n\n    $scope.info = productInfo;\n\n    $scope.getActiveRepository = function () {\n        return $repositories.getActiveRepository();\n    };\n\n    // Don't call functions if one of the following conditions are met\n    function shouldSkipCall() {\n        return !$scope.getActiveRepository() ||\n                    $scope.isActiveRepoFedXType() ||\n                         $scope.isActiveRepoOntopType();\n    }\n\n    if (!shouldSkipCall()) {\n        SimilarityRestService.getSearchQueries().success(function (data) {\n            $scope.searchQueries = data;\n        }).error(function (data) {\n            const msg = getError(data);\n            toastr.error(msg, $translate.instant('similarity.could.not.get.search.queries.error'));\n        });\n    }\n\n    $scope.encodeURIComponent = function (param) {\n        return encodeURIComponent(param);\n    };\n\n    // get similarity indexes\n    $scope.getSimilarityIndexes = function () {\n        if (shouldSkipCall() || !$scope.pluginIsActive) {\n            return;\n        }\n        SimilarityRestService.getIndexes()\n            .success(function (data) {\n                $scope.similarityIndexes = data;\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('similarity.could.not.get.indexes.error'));\n            });\n    };\n\n    $scope.pullList = function () {\n        $scope.getSimilarityIndexes();\n        const timer = $interval(function () {\n            $scope.$broadcast('checkIsActive');\n            if ($('#indexes-table').attr('aria-expanded') !== 'false') {\n                $scope.getSimilarityIndexes();\n            }\n        }, 5000);\n        $scope.$on('$destroy', function () {\n            $interval.cancel(timer);\n        });\n    };\n\n    if ($scope.getActiveRepository()) {\n        if ($licenseService.isLicenseValid()) {\n            $scope.pullList();\n        }\n    }\n\n    let yasr;\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, function () {\n        // Don't try to get namespaces for ontop or fedx repository\n        if ($scope.getActiveRepository() && !$scope.isActiveRepoOntopType() && !$scope.isActiveRepoFedXType()) {\n            $scope.getNamespacesPromise = RDF4JRepositoriesRestService.getNamespaces($scope.getActiveRepository())\n                .success(function (data) {\n                    checkAutocompleteStatus();\n                    $scope.usedPrefixes = {};\n                    data.results.bindings.forEach(function (e) {\n                        $scope.usedPrefixes[e.prefix.value] = e.namespace.value;\n                    });\n                    $scope.$on('$destroy', function () {\n                        if (yasr) {\n                            yasr.destroy();\n                        }\n                    });\n                    yasr = YASR(document.getElementById('yasr'), { // eslint-disable-line new-cap\n                        //this way, the URLs in the results are prettified using the defined prefixes\n                        getUsedPrefixes: $scope.usedPrefixes,\n                        persistency: false,\n                        hideHeader: true,\n                        pluginsOptions: YasrUtils.getYasrConfiguration()\n                    });\n                }).error(function (data) {\n                    toastr.error(getError(data), $translate.instant('get.namespaces.error.msg'));\n                });\n        }\n    });\n\n    function checkAutocompleteStatus() {\n        if ($licenseService.isLicenseValid()) {\n            $scope.getAutocompletePromise = AutocompleteRestService.checkAutocompleteStatus();\n        }\n    }\n\n    $scope.$on('autocompleteStatus', function() {\n        checkAutocompleteStatus();\n    });\n\n    $scope.loading = false;\n\n    $scope.selected = undefined;\n    $scope.searchType = 'searchTerm';\n    $scope.resultType = 'termResult';\n\n    $scope.$watch('searchType', function () {\n        $scope.empty = true;\n    });\n\n    $scope.goToSimilarityIndex = function (index) {\n        if (!('BUILT' === index.status || 'OUTDATED' === index.status || 'REBUILDING' === index.status)) {\n            return;\n        }\n        $scope.empty = true;\n        if ($scope.selected !== index) {\n            $scope.lastSearch = undefined;\n            $scope.selected = index;\n        }\n        if (index.type === 'text') {\n            $scope.searchType = 'searchTerm';\n        } else if (index.type === 'predication') {\n            $scope.searchType = 'searchEntity';\n        }\n        if (index.type === 'text' || index.type === 'predication') {\n            $('#indexes-table').collapse('hide');\n        }\n    };\n\n    const toggleOntoLoader = function (showLoader) {\n        const yasrInnerContainer = angular.element(document.getElementById('yasr-inner'));\n        const resultsLoader = angular.element(document.getElementById('results-loader'));\n        /* Angular b**it. For some reason the loader behaved strangely with ng-show not always showing */\n        if (showLoader) {\n            $scope.loading = true;\n            yasrInnerContainer.addClass('opacity-hide');\n            resultsLoader.removeClass('opacity-hide');\n        } else {\n            $scope.loading = false;\n            yasrInnerContainer.removeClass('opacity-hide');\n            resultsLoader.addClass('opacity-hide');\n        }\n    };\n\n    $scope.performSearch = function (index, uri, searchType, resultType, parameters) {\n\n        toggleOntoLoader(true);\n\n        // this is either the search term or the iri for the subject\n        let termOrSubject = uri;\n\n        $scope.lastSearch = {};\n        $scope.lastSearch.type = searchType;\n\n        if (searchType === 'searchEntityPredicate') {\n            termOrSubject = $scope.psiSubject;\n            $scope.lastSearch.predicate = uri;\n        }\n\n        if (searchType === 'searchTerm') {\n            termOrSubject = literalForQuery(termOrSubject);\n        } else {\n            termOrSubject = iriForQuery(termOrSubject);\n        }\n\n        $scope.lastSearch.termOrSubject = termOrSubject;\n\n        const headers = {Accept: 'application/x-sparqlstar-results+json, application/sparql-results+json;q=0.9, */*;q=0.8'};\n        let sparqlQuery;\n        if (searchType === 'searchAnalogical') {\n            sparqlQuery = ($scope.selected.analogicalQuery) ? $scope.selected.analogicalQuery : $scope.searchQueries['analogical'];\n        } else {\n            sparqlQuery = ($scope.selected.searchQuery) ? $scope.selected.searchQuery : $scope.searchQueries[$scope.selected.type];\n        }\n        const sendData = {\n            query: sparqlQuery,\n            $index: iriForQuery(PREFIX_INSTANCE + index),\n            $query: termOrSubject,\n            $searchType: iriForQuery(($scope.selected.type === 'text' ? PREFIX : PREFIX_PREDICATION) + (searchType === 'searchEntityPredicate' ? 'searchEntity' : searchType)),\n            $resultType: iriForQuery($scope.selected.type === 'text' ? PREFIX + resultType : PREFIX_PREDICATION + 'entityResult'),\n            $parameters: literalForQuery(parameters)\n        };\n\n        if (searchType === 'searchEntityPredicate') {\n            sendData.$psiPredicate = $scope.lastSearch.predicate ? iriForQuery($scope.lastSearch.predicate) : iriForQuery(ANY_PREDICATE);\n        }\n\n        if (searchType === 'searchAnalogical') {\n            $scope.searchSubject = uri;\n            sendData.$givenSubject = iriForQuery($scope.analogicalSubject);\n            sendData.$givenObject = iriForQuery($scope.analogicalObject);\n            sendData.$searchSubject = iriForQuery(uri);\n        }\n\n        $.ajax({\n            method: 'GET',\n            url: 'repositories/' + $repositories.getActiveRepository(),\n            data: sendData,\n            headers: headers\n        }).done(function (data, textStatus, jqXhrOrErrorString) {\n            toggleOntoLoader(false);\n            yasr.setResponse(data, textStatus, jqXhrOrErrorString);\n        }).fail(function (data) {\n            toastr.error(getError(data), $translate.instant('similarity.get.resource.error'));\n            toggleOntoLoader(false);\n        });\n    };\n\n    $scope.viewSearchQuery = function () {\n        let queryTemplate;\n        if ($scope.lastSearch.type === 'searchAnalogical') {\n            queryTemplate = ($scope.selected.analogicalQuery) ? $scope.selected.analogicalQuery : $scope.searchQueries['analogical'];\n        } else {\n            queryTemplate = ($scope.selected.searchQuery) ? $scope.selected.searchQuery : $scope.searchQueries[$scope.selected.type];\n        }\n\n        //replace template prefix for PREFIX_INSTANCE in the view mode with actual prefix from the query\n        let tokens = [];\n        let prefix = '';\n        tokens = queryTemplate.match(/[a-zA-Z0-9-]+:<http:\\/\\/www.ontotext.com\\/graphdb\\/similarity\\/instance\\/>/);\n        prefix = tokens == null ? \"similarity-index\" : tokens[0].substring(0, tokens[0].indexOf(':'));\n\n        const replacedQuery = queryTemplate\n            .replace('?index', prefix + ':' + $scope.selected.name)\n            .replace('?query', $scope.lastSearch.termOrSubject)\n            .replace('?searchType', ($scope.selected.type === 'text' ? ':' : 'psi:') + ($scope.lastSearch.type === 'searchEntityPredicate' ? 'searchEntity' : $scope.lastSearch.type))\n            .replace('?resultType', $scope.selected.type === 'text' ? ':' + $scope.resultType : 'psi:entityResult')\n            .replace('?parameters', literalForQuery((!$scope.searchParameters) ? '' : $scope.searchParameters))\n            .replace('?psiPredicate', $scope.lastSearch.predicate ? iriForQuery($scope.lastSearch.predicate) : iriForQuery(ANY_PREDICATE))\n            .replace('?givenSubject', iriForQuery($scope.analogicalSubject))\n            .replace('?givenObject', iriForQuery($scope.analogicalObject))\n            .replace('?searchSubject', iriForQuery($scope.searchSubject));\n\n        $modal.open({\n            templateUrl: 'pages/viewQuery.html',\n            controller: 'ViewQueryCtrl',\n            resolve: {\n                query: function () {\n                    return replacedQuery;\n                }\n            }\n        });\n    };\n\n\n    $scope.deleteIndex = function (index) {\n        ModalService.openSimpleModal({\n            title: $translate.instant('common.confirm'),\n            message: $translate.instant('similarity.delete.index.warning', {name: index.name}),\n            warning: true\n        }).result\n            .then(function () {\n                SimilarityRestService.deleteIndex(index)\n                    .then(function () {\n                        $scope.getSimilarityIndexes();\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    });\n            });\n    };\n\n    $scope.viewCreateQuery = function (index) {\n        SimilarityRestService.getQuery({\n            indexName: index.name,\n            indexOptions: index.options,\n            query: index.selectQuery,\n            indexStopList: index.stopList,\n            queryInference: index.infer,\n            querySameAs: index.sameAs,\n            viewType: index.type,\n            indexAnalyzer: index.analyzer\n        }).success(function (query) {\n            $modal.open({\n                templateUrl: 'pages/viewQuery.html',\n                controller: 'ViewQueryCtrl',\n                resolve: {\n                    query: function () {\n                        return query;\n                    }\n                }\n            });\n        });\n    };\n\n    $scope.rebuildIndex = function (index) {\n        // Migration\n        if (!index.searchQuery) {\n            index.searchQuery = index.type ? $scope.searchQueries[index.type] : $scope.searchQueries.text;\n        }\n        ModalService.openSimpleModal({\n            title: $translate.instant('common.confirm'),\n            message: decodeHTML($translate.instant('similarity.rebuild.index.warning', {name: index.name})),\n            warning: true\n        }).result\n            .then(function () {\n                index.status = 'REBUILDING';\n                SimilarityRestService.rebuildIndex(index)\n                    .then(function (res) {\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    });\n            });\n    };\n\n    $scope.copyToClipboardResult = function (uri) {\n        ModalService.openCopyToClipboardModal(uri);\n    };\n\n    $scope.trimIRI = function (iri) {\n        return _.trim(iri, \"<>\");\n    };\n}\n"],"sourceRoot":""}