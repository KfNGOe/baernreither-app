{"version":3,"sources":["webpack:///./src/js/angular/rest/similarity.rest.service.js","webpack:///./src/js/angular/similarity/controllers/similarity-list.controller.js","webpack:///./src/js/angular/similarity/controllers/create-index.controller.js","webpack:///./src/js/angular/similarity/app.js","webpack:///./src/js/angular/utils/notifications.js","webpack:///./src/js/angular/core/directives/queryeditor/sparql-tab.directive.js"],"names":["angular","module","factory","SimilarityRestService","$inject","$http","getIndexes","get","getSearchQueries","rebuildIndex","index","createIndex","name","options","selectQuery","searchQuery","analogicalQuery","stopList","infer","sameAs","type","deleteIndex","delete","getSamples","getQuery","data","params","indexName","indexOptions","indexStopList","query","queryInference","querySameAs","viewType","analyzer","indexAnalyzer","saveSearchQuery","method","url","noCancelOnRouteChange","SimilarityCtrl","$scope","$interval","toastr","$repositories","$licenseService","ModalService","$modal","AutocompleteRestService","productInfo","RDF4JRepositoriesRestService","$translate","PREFIX","PREFIX_PREDICATION","ANY_PREDICATE","pluginName","pluginIsActive","setPluginIsActive","isPluginActive","literalForQuery","literal","iriForQuery","iri","undefined","startsWith","endsWith","shouldSkipCall","getActiveRepository","isActiveRepoFedXType","isActiveRepoOntopType","yasr","checkAutocompleteStatus","isLicenseValid","getAutocompletePromise","info","success","searchQueries","error","msg","getError","instant","encodeURIComponent","param","getSimilarityIndexes","similarityIndexes","pullList","timer","$broadcast","$","attr","$on","cancel","$watch","getNamespacesPromise","getNamespaces","usedPrefixes","results","bindings","forEach","e","prefix","value","namespace","destroy","document","getElementById","getUsedPrefixes","persistency","hideHeader","pluginsOptions","getYasrConfiguration","loading","selected","searchType","resultType","empty","goToSimilarityIndex","status","lastSearch","collapse","toggleOntoLoader","showLoader","yasrInnerContainer","element","resultsLoader","addClass","removeClass","performSearch","uri","parameters","termOrSubject","psiSubject","predicate","sparqlQuery","sendData","$index","$query","$searchType","$resultType","$parameters","$psiPredicate","searchSubject","$givenSubject","analogicalSubject","$givenObject","analogicalObject","$searchSubject","ajax","headers","Accept","done","textStatus","jqXhrOrErrorString","setResponse","fail","viewSearchQuery","queryTemplate","tokens","match","substring","indexOf","replacedQuery","replace","searchParameters","open","templateUrl","controller","resolve","openSimpleModal","title","message","warning","result","then","err","viewCreateQuery","text","res","copyToClipboardResult","openCopyToClipboardModal","trimIRI","_","trim","CreateSimilarityIdxCtrl","$timeout","SparqlRestService","$location","Notifications","LocalStorageAdapter","LSKeys","indexType","search","newIndex","page","defaultTabConfig","id","inference","initForViewType","indexNameFromLocation","editSearchQuery","currentQuery","notoolbarInference","notoolbarSameAs","window","editor","setQuery","allSamples","samples","isLiteralIndex","getAndRemoveOption","literalIndexes","concat","filter","idx","map","inputIndex","desiredIdx","j","length","filenamePattern","RegExp","validateIndex","invalidIndexName","saveQueries","test","getQueryType","appendOption","option","key","optArr","split","i","join","saveQueryToLocal","currentQueryTab","setLoader","isRunning","progressMessage","extraMessage","queryIsRunning","queryStartTime","Date","now","countTimeouted","$$phase","$apply","fixSizesOnHorizontalViewModeSwitch","verticalViewParam","visibleWindowHeight","innerHeight","documentElement","clientHeight","body","verticalView","orientationViewMode","viewMode","newHeight","querySelector","getBoundingClientRect","style","height","noPadding","minHeight","paddingRight","paddingLeft","container","resize","showHideEditor","selectTab","tab","runQuery","changePage","explain","executedQueryTab","getQueryMode","explainRequested","currentTabConfig","resultsCount","resetCurrentTabConfig","getRepositoryNamespaces","namespaces","repositoryError","finally","addKnownPrefixes","JSON","stringify","getValue","isDefined","setValue","getExistingTabId","existingTabId","tabsData","item","loadTab","queryType","offset","allResultsCount","pageSize","timeFinished","timeTook","sizeDelta","css","getQueryID","tabs","copy","helpHidden","HIDE_SIMILARITY_HELP","toggleHelp","set","viewQuery","isInvalidIndexName","isEmptyIndexName","goToPage","showEditor","notoolbar","xhr","abort","showPreview","outputType","queryExists","saveTab","findTabIndexByID","addNewTab","callback","tabName","savedQuery","changePagination","toggleSampleQueries","querySelected","tabId","getLoaderMessage","timeSeconds","timeHuman","getHumanReadableSeconds","changeViewMode","tabID","remove","focusQueryEditor","find","is","focus","on","$watchCollection","tabEvent","relatedTarget","target","showSampleQueries","sampleQueries","getResultsDescription","getUpdateDescription","getStaleWarningMessage","changedQuery","isSearchQuery","async","showToastMessageWithDelay","response","getCloseBtnMsg","operationType","operation","Promise","r","setTimeout","sparqlTabDirective","$rootScope","restrict","template","$element","state","deleteTab","preventDefault","stopPropagation","shiftKey","selectedTabId","obj","TABS_STATE","idForDelete","isUndefined","splice","deleteTabByID","editCurrentTab","editCurrentlySelectedOnly","$show","$editableButtons","children","$el","currentTarget","$$currentValue","selectThisTab","isTabChangeOk","directive"],"mappings":"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","file":"17.545bc1027c226502e3b8.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.rest.similarity.service', [])\n    .factory('SimilarityRestService', SimilarityRestService);\n\nSimilarityRestService.$inject = ['$http', '$repositories'];\n\nconst SIMILARITY_ENDPOINT = 'rest/similarity';\n\nfunction SimilarityRestService($http) {\n\n    return {\n        getIndexes,\n        getSearchQueries,\n        rebuildIndex,\n        deleteIndex,\n        createIndex,\n        getSamples,\n        getQuery,\n        saveSearchQuery\n    };\n\n    function getIndexes() {\n        return $http.get(SIMILARITY_ENDPOINT);\n    }\n\n    function getSamples() {\n        return $http.get(`${SIMILARITY_ENDPOINT}/samples`);\n    }\n\n    function getSearchQueries() {\n        return $http.get(`${SIMILARITY_ENDPOINT}/config`);\n    }\n\n    function createIndex(method, name, options, selectQuery, searchQuery, analogicalQuery, stopList, infer, sameAs, type, analyzer) {\n        return $http({\n                method,\n                url: `${SIMILARITY_ENDPOINT}`,\n                noCancelOnRouteChange: true,\n                data: {\n                    name,\n                    options,\n                    selectQuery,\n                    stopList,\n                    infer,\n                    sameAs,\n                    type,\n                    analyzer,\n                    searchQuery,\n                    analogicalQuery\n                }\n            }\n        );\n    }\n\n    function rebuildIndex(index) {\n        return createIndex('PUT', index.name, index.options, index.selectQuery, index.searchQuery, index.analogicalQuery, index.stopList, index.infer, index.sameAs, index.type);\n    }\n\n    function deleteIndex(index) {\n        return $http.delete(`${SIMILARITY_ENDPOINT}?name=${index.name}`);\n    }\n\n    function getQuery(data) {\n        return $http.get('rest/similarity/query',\n            {\n                params: {\n                    name: data.indexName,\n                    options: data.indexOptions,\n                    stopList: data.indexStopList,\n                    selectQuery: data.query,\n                    infer: data.queryInference,\n                    sameAs: data.querySameAs,\n                    type: data.viewType,\n                    analyzer: data.indexAnalyzer\n                }\n            });\n    }\n\n    function saveSearchQuery(data) {\n        return $http({\n            method: 'put',\n            url: 'rest/similarity/search-query',\n            data\n        });\n    }\n}\n","import YASR from 'lib/yasr.bundled';\nimport {decodeHTML} from \"../../../../app\";\nimport {YasrUtils} from \"../../utils/yasr-utils\";\n\nangular\n    .module('graphdb.framework.similarity.controllers.list', [])\n    .controller('SimilarityCtrl', SimilarityCtrl);\n\nSimilarityCtrl.$inject = ['$scope', '$interval', 'toastr', '$repositories', '$licenseService', 'ModalService', '$modal', 'SimilarityRestService', 'AutocompleteRestService', 'productInfo', 'RDF4JRepositoriesRestService', '$translate'];\n\nfunction SimilarityCtrl($scope, $interval, toastr, $repositories, $licenseService, ModalService, $modal, SimilarityRestService, AutocompleteRestService, productInfo, RDF4JRepositoriesRestService, $translate) {\n\n    const PREFIX = 'http://www.ontotext.com/graphdb/similarity/';\n    const PREFIX_PREDICATION = 'http://www.ontotext.com/graphdb/similarity/psi/';\n    const PREFIX_INSTANCE = PREFIX + 'instance/';\n    const ANY_PREDICATE = PREFIX_PREDICATION + 'any';\n    $scope.pluginName = 'similarity';\n    $scope.pluginIsActive = true;\n\n    $scope.setPluginIsActive = function (isPluginActive) {\n        $scope.pluginIsActive = isPluginActive;\n    };\n\n    const literalForQuery = function (literal) {\n        return '\"' + literal + '\"';\n    };\n\n    // TODO: Fix cases when this function is called with undefined\n    const iriForQuery = function (iri) {\n        // Do not put brackets on nested triples\n        if (iri === undefined || iri.startsWith(\"<<\") && iri.endsWith(\">>\")) {\n            return iri;\n        }\n        return '<' + iri + '>';\n    };\n\n    $scope.info = productInfo;\n\n    $scope.getActiveRepository = function () {\n        return $repositories.getActiveRepository();\n    };\n\n    // Don't call functions if one of the following conditions are met\n    function shouldSkipCall() {\n        return !$scope.getActiveRepository() ||\n                    $scope.isActiveRepoFedXType() ||\n                         $scope.isActiveRepoOntopType();\n    }\n\n    if (!shouldSkipCall()) {\n        SimilarityRestService.getSearchQueries().success(function (data) {\n            $scope.searchQueries = data;\n        }).error(function (data) {\n            const msg = getError(data);\n            toastr.error(msg, $translate.instant('similarity.could.not.get.search.queries.error'));\n        });\n    }\n\n    $scope.encodeURIComponent = function (param) {\n        return encodeURIComponent(param);\n    };\n\n    // get similarity indexes\n    $scope.getSimilarityIndexes = function () {\n        if (shouldSkipCall() || !$scope.pluginIsActive) {\n            return;\n        }\n        SimilarityRestService.getIndexes()\n            .success(function (data) {\n                $scope.similarityIndexes = data;\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('similarity.could.not.get.indexes.error'));\n            });\n    };\n\n    $scope.pullList = function () {\n        $scope.getSimilarityIndexes();\n        const timer = $interval(function () {\n            $scope.$broadcast('checkIsActive');\n            if ($('#indexes-table').attr('aria-expanded') !== 'false') {\n                $scope.getSimilarityIndexes();\n            }\n        }, 5000);\n        $scope.$on('$destroy', function () {\n            $interval.cancel(timer);\n        });\n    };\n\n    if ($scope.getActiveRepository()) {\n        if ($licenseService.isLicenseValid()) {\n            $scope.pullList();\n        }\n    }\n\n    let yasr;\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, function () {\n        // Don't try to get namespaces for ontop or fedx repository\n        if ($scope.getActiveRepository() && !$scope.isActiveRepoOntopType() && !$scope.isActiveRepoFedXType()) {\n            $scope.getNamespacesPromise = RDF4JRepositoriesRestService.getNamespaces($scope.getActiveRepository())\n                .success(function (data) {\n                    checkAutocompleteStatus();\n                    $scope.usedPrefixes = {};\n                    data.results.bindings.forEach(function (e) {\n                        $scope.usedPrefixes[e.prefix.value] = e.namespace.value;\n                    });\n                    $scope.$on('$destroy', function () {\n                        if (yasr) {\n                            yasr.destroy();\n                        }\n                    });\n                    yasr = YASR(document.getElementById('yasr'), { // eslint-disable-line new-cap\n                        //this way, the URLs in the results are prettified using the defined prefixes\n                        getUsedPrefixes: $scope.usedPrefixes,\n                        persistency: false,\n                        hideHeader: true,\n                        pluginsOptions: YasrUtils.getYasrConfiguration()\n                    });\n                }).error(function (data) {\n                    toastr.error(getError(data), $translate.instant('get.namespaces.error.msg'));\n                });\n        }\n    });\n\n    function checkAutocompleteStatus() {\n        if ($licenseService.isLicenseValid()) {\n            $scope.getAutocompletePromise = AutocompleteRestService.checkAutocompleteStatus();\n        }\n    }\n\n    $scope.$on('autocompleteStatus', function() {\n        checkAutocompleteStatus();\n    });\n\n    $scope.loading = false;\n\n    $scope.selected = undefined;\n    $scope.searchType = 'searchTerm';\n    $scope.resultType = 'termResult';\n\n    $scope.$watch('searchType', function () {\n        $scope.empty = true;\n    });\n\n    $scope.goToSimilarityIndex = function (index) {\n        if (!('BUILT' === index.status || 'OUTDATED' === index.status || 'REBUILDING' === index.status)) {\n            return;\n        }\n        $scope.empty = true;\n        if ($scope.selected !== index) {\n            $scope.lastSearch = undefined;\n            $scope.selected = index;\n        }\n        if (index.type === 'text') {\n            $scope.searchType = 'searchTerm';\n        } else if (index.type === 'predication') {\n            $scope.searchType = 'searchEntity';\n        }\n        if (index.type === 'text' || index.type === 'predication') {\n            $('#indexes-table').collapse('hide');\n        }\n    };\n\n    const toggleOntoLoader = function (showLoader) {\n        const yasrInnerContainer = angular.element(document.getElementById('yasr-inner'));\n        const resultsLoader = angular.element(document.getElementById('results-loader'));\n        /* Angular b**it. For some reason the loader behaved strangely with ng-show not always showing */\n        if (showLoader) {\n            $scope.loading = true;\n            yasrInnerContainer.addClass('opacity-hide');\n            resultsLoader.removeClass('opacity-hide');\n        } else {\n            $scope.loading = false;\n            yasrInnerContainer.removeClass('opacity-hide');\n            resultsLoader.addClass('opacity-hide');\n        }\n    };\n\n    $scope.performSearch = function (index, uri, searchType, resultType, parameters) {\n\n        toggleOntoLoader(true);\n\n        // this is either the search term or the iri for the subject\n        let termOrSubject = uri;\n\n        $scope.lastSearch = {};\n        $scope.lastSearch.type = searchType;\n\n        if (searchType === 'searchEntityPredicate') {\n            termOrSubject = $scope.psiSubject;\n            $scope.lastSearch.predicate = uri;\n        }\n\n        if (searchType === 'searchTerm') {\n            termOrSubject = literalForQuery(termOrSubject);\n        } else {\n            termOrSubject = iriForQuery(termOrSubject);\n        }\n\n        $scope.lastSearch.termOrSubject = termOrSubject;\n\n        const headers = {Accept: 'application/x-sparqlstar-results+json, application/sparql-results+json;q=0.9, */*;q=0.8'};\n        let sparqlQuery;\n        if (searchType === 'searchAnalogical') {\n            sparqlQuery = ($scope.selected.analogicalQuery) ? $scope.selected.analogicalQuery : $scope.searchQueries['analogical'];\n        } else {\n            sparqlQuery = ($scope.selected.searchQuery) ? $scope.selected.searchQuery : $scope.searchQueries[$scope.selected.type];\n        }\n        const sendData = {\n            query: sparqlQuery,\n            $index: iriForQuery(PREFIX_INSTANCE + index),\n            $query: termOrSubject,\n            $searchType: iriForQuery(($scope.selected.type === 'text' ? PREFIX : PREFIX_PREDICATION) + (searchType === 'searchEntityPredicate' ? 'searchEntity' : searchType)),\n            $resultType: iriForQuery($scope.selected.type === 'text' ? PREFIX + resultType : PREFIX_PREDICATION + 'entityResult'),\n            $parameters: literalForQuery(parameters)\n        };\n\n        if (searchType === 'searchEntityPredicate') {\n            sendData.$psiPredicate = $scope.lastSearch.predicate ? iriForQuery($scope.lastSearch.predicate) : iriForQuery(ANY_PREDICATE);\n        }\n\n        if (searchType === 'searchAnalogical') {\n            $scope.searchSubject = uri;\n            sendData.$givenSubject = iriForQuery($scope.analogicalSubject);\n            sendData.$givenObject = iriForQuery($scope.analogicalObject);\n            sendData.$searchSubject = iriForQuery(uri);\n        }\n\n        $.ajax({\n            method: 'GET',\n            url: 'repositories/' + $repositories.getActiveRepository(),\n            data: sendData,\n            headers: headers\n        }).done(function (data, textStatus, jqXhrOrErrorString) {\n            toggleOntoLoader(false);\n            yasr.setResponse(data, textStatus, jqXhrOrErrorString);\n        }).fail(function (data) {\n            toastr.error(getError(data), $translate.instant('similarity.get.resource.error'));\n            toggleOntoLoader(false);\n        });\n    };\n\n    $scope.viewSearchQuery = function () {\n        let queryTemplate;\n        if ($scope.lastSearch.type === 'searchAnalogical') {\n            queryTemplate = ($scope.selected.analogicalQuery) ? $scope.selected.analogicalQuery : $scope.searchQueries['analogical'];\n        } else {\n            queryTemplate = ($scope.selected.searchQuery) ? $scope.selected.searchQuery : $scope.searchQueries[$scope.selected.type];\n        }\n\n        //replace template prefix for PREFIX_INSTANCE in the view mode with actual prefix from the query\n        let tokens = [];\n        let prefix = '';\n        tokens = queryTemplate.match(/[a-zA-Z0-9-]+:<http:\\/\\/www.ontotext.com\\/graphdb\\/similarity\\/instance\\/>/);\n        prefix = tokens == null ? \"similarity-index\" : tokens[0].substring(0, tokens[0].indexOf(':'));\n\n        const replacedQuery = queryTemplate\n            .replace('?index', prefix + ':' + $scope.selected.name)\n            .replace('?query', $scope.lastSearch.termOrSubject)\n            .replace('?searchType', ($scope.selected.type === 'text' ? ':' : 'psi:') + ($scope.lastSearch.type === 'searchEntityPredicate' ? 'searchEntity' : $scope.lastSearch.type))\n            .replace('?resultType', $scope.selected.type === 'text' ? ':' + $scope.resultType : 'psi:entityResult')\n            .replace('?parameters', literalForQuery((!$scope.searchParameters) ? '' : $scope.searchParameters))\n            .replace('?psiPredicate', $scope.lastSearch.predicate ? iriForQuery($scope.lastSearch.predicate) : iriForQuery(ANY_PREDICATE))\n            .replace('?givenSubject', iriForQuery($scope.analogicalSubject))\n            .replace('?givenObject', iriForQuery($scope.analogicalObject))\n            .replace('?searchSubject', iriForQuery($scope.searchSubject));\n\n        $modal.open({\n            templateUrl: 'pages/viewQuery.html',\n            controller: 'ViewQueryCtrl',\n            resolve: {\n                query: function () {\n                    return replacedQuery;\n                }\n            }\n        });\n    };\n\n\n    $scope.deleteIndex = function (index) {\n        ModalService.openSimpleModal({\n            title: $translate.instant('common.confirm'),\n            message: $translate.instant('similarity.delete.index.warning', {name: index.name}),\n            warning: true\n        }).result\n            .then(function () {\n                SimilarityRestService.deleteIndex(index)\n                    .then(function () {\n                        $scope.getSimilarityIndexes();\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    });\n            });\n    };\n\n    $scope.viewCreateQuery = function (index) {\n        SimilarityRestService.getQuery({\n            indexName: index.name,\n            indexOptions: index.options,\n            query: index.selectQuery,\n            indexStopList: index.stopList,\n            queryInference: index.infer,\n            querySameAs: index.sameAs,\n            viewType: index.type,\n            indexAnalyzer: index.analyzer\n        }).success(function (query) {\n            $modal.open({\n                templateUrl: 'pages/viewQuery.html',\n                controller: 'ViewQueryCtrl',\n                resolve: {\n                    query: function () {\n                        return query;\n                    }\n                }\n            });\n        });\n    };\n\n    $scope.rebuildIndex = function (index) {\n        // Migration\n        if (!index.searchQuery) {\n            index.searchQuery = index.type ? $scope.searchQueries[index.type] : $scope.searchQueries.text;\n        }\n        ModalService.openSimpleModal({\n            title: $translate.instant('common.confirm'),\n            message: decodeHTML($translate.instant('similarity.rebuild.index.warning', {name: index.name})),\n            warning: true\n        }).result\n            .then(function () {\n                index.status = 'REBUILDING';\n                SimilarityRestService.rebuildIndex(index)\n                    .then(function (res) {\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    });\n            });\n    };\n\n    $scope.copyToClipboardResult = function (uri) {\n        ModalService.openCopyToClipboardModal(uri);\n    };\n\n    $scope.trimIRI = function (iri) {\n        return _.trim(iri, \"<>\");\n    };\n}\n","import 'angular/utils/notifications';\nimport 'angular/utils/local-storage-adapter';\n\nangular\n    .module('graphdb.framework.similarity.controllers.create', [\n        'graphdb.framework.utils.notifications',\n        'graphdb.framework.utils.localstorageadapter'\n    ])\n    .controller('CreateSimilarityIdxCtrl', CreateSimilarityIdxCtrl);\n\nCreateSimilarityIdxCtrl.$inject = ['$scope', 'toastr', '$modal', '$timeout', 'SimilarityRestService', 'SparqlRestService', '$location', 'productInfo', 'Notifications', 'RDF4JRepositoriesRestService', 'LocalStorageAdapter', 'LSKeys', '$translate'];\n\nfunction CreateSimilarityIdxCtrl($scope, toastr, $modal, $timeout, SimilarityRestService, SparqlRestService, $location, productInfo, Notifications, RDF4JRepositoriesRestService, LocalStorageAdapter, LSKeys, $translate) {\n\n    const indexType = $location.search().type;\n    if (indexType === undefined || indexType.startsWith('text')) {\n        $scope.viewType = 'text';\n    } else {\n        $scope.viewType = indexType;\n    }\n\n    const textDefaultOptions = '-termweight idf';\n    const predDefaultOptions = '';\n    $scope.newIndex = {};\n\n    $scope.info = productInfo;\n    $scope.page = 1;\n\n    const defaultTabConfig = {\n        id: '1',\n        name: '',\n        query: '',\n        inference: true,\n        sameAs: true\n    };\n\n    let getNewIndexName = function (indexNameFromLocation) {\n        if (indexNameFromLocation) {\n            if ($scope.page !== 1) {\n                return indexNameFromLocation;\n            } else {\n                return 'Copy_of_' + indexNameFromLocation;\n            }\n        }\n        return '';\n    };\n\n    const initForViewType = function () {\n        $scope.editSearchQuery = $location.search().editSearchQuery;\n        $scope.page = $scope.editSearchQuery ? 2 : 1;\n        $scope.newIndex.name = getNewIndexName($location.search().name);\n        $scope.newIndex.options = ($location.search().options ? $location.search().options : ($scope.viewType === \"text\") ? textDefaultOptions : predDefaultOptions);\n\n        if ($scope.searchQueries) {\n            $scope.newIndex.searchQuery = $location.search().searchQuery ? $location.search().searchQuery : $scope.searchQueries[$scope.viewType];\n            if ($scope.viewType === 'predication') {\n                $scope.newIndex.analogicalQuery = $location.search().analogicalQuery ? $location.search().analogicalQuery : $scope.searchQueries['analogical'];\n            }\n        }\n\n        if ($scope.editSearchQuery) {\n            // Default will be opened search query tab for edition\n            $scope.currentQuery.query = $scope.newIndex.searchQuery;\n            $scope.notoolbarInference = true;\n            $scope.notoolbarSameAs = true;\n            if (window.editor) {\n                $scope.setQuery($scope.newIndex.searchQuery);\n            }\n        } else {\n            if ($scope.viewType === 'text' && $scope.allSamples) {\n                $scope.samples = $scope.allSamples['text'];\n                $scope.newIndex.stopList = ($location.search().stopList ? $location.search().stopList : undefined);\n                $scope.newIndex.analyzer = ($location.search().analyzer ? $location.search().analyzer : 'org.apache.lucene.analysis.en.EnglishAnalyzer');\n                const isLiteralIndex = getAndRemoveOption('-literal_index');\n                if (isLiteralIndex !== undefined) {\n                    $scope.newIndex.isLiteralIndex = isLiteralIndex;\n                }\n                if (window.editor) {\n                    $scope.setQuery($scope.samples['literals']);\n                }\n            }\n            if ($scope.viewType === 'predication' && $scope.allSamples) {\n                SimilarityRestService.getIndexes()\n                    .success(function (data) {\n                        $scope.literalIndexes = ['no-index'].concat(data\n                            .filter(function (idx) {\n                                return idx.type === 'textLiteral' && (idx.status === 'BUILT' || idx.status === 'OUTDATED')\n                            })\n                            .map(function (idx) {\n                                return idx.name;\n                            }));\n\n                    if ($scope.newIndex.inputIndex === undefined) {\n                        const desiredIdx = getAndRemoveOption('-input_index');\n                        if (desiredIdx !== undefined) {\n                            for (let j = 0; j < $scope.literalIndexes.length; j++) {\n                                if (desiredIdx === $scope.literalIndexes[j]) {\n                                    $scope.newIndex.inputIndex = $scope.literalIndexes[j];\n                                }\n                            }\n                        }\n                    }\n                    if ($scope.newIndex.inputIndex === undefined) {\n                        $scope.newIndex.inputIndex = $scope.literalIndexes[0];\n                    }\n                })\n                .error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, $translate.instant('similarity.could.not.get.indexes.error'));\n                });\n\n                $scope.samples = $scope.allSamples['predication'];\n                if (window.editor) {\n                    $scope.setQuery($scope.samples['predication']);\n                }\n            }\n        }\n    };\n\n    const filenamePattern = new RegExp('^[a-zA-Z0-9-_]+$');\n\n    const validateIndex = function () {\n        $scope.invalidIndexName = false;\n        $scope.saveQueries();\n        if (!$scope.newIndex.name) {\n            $scope.invalidIndexName = $translate.instant('similarity.empty.index.name.error');\n            return false;\n        }\n        if (!filenamePattern.test($scope.newIndex.name)) {\n            $scope.invalidIndexName = $translate.instant('similarity.index.name.constraint');\n            return false;\n        }\n\n        if (!$scope.newIndex.query) {\n            toastr.error($translate.instant('similarity.empty.select.query.error'));\n            return false;\n        }\n\n        if (!$scope.newIndex.searchQuery) {\n            toastr.error($translate.instant('similarity.empty.search.query.error'));\n            return false;\n        }\n\n        if ($scope.viewType === 'predication' && !$scope.newIndex.analogicalQuery) {\n            toastr.error($translate.instant('similarity.empty.analogical.query.error'));\n            return false;\n        }\n\n        if (window.editor.getQueryType() !== 'SELECT') {\n            toastr.error($translate.instant('similarity.index.select.queries.constraint'));\n            return;\n        }\n\n        return true;\n    };\n\n    const appendOption = function (option, value) {\n        $scope.newIndex.options = $scope.newIndex.options + ($scope.newIndex.options === '' ? '' : ' ') + option + ' ' + value;\n    };\n\n    SimilarityRestService.getSearchQueries().success(function (data) {\n        $scope.searchQueries = data;\n        SimilarityRestService.getSamples().success(function (samples) {\n            defaultTabConfig.query = $location.search().selectQuery ? $location.search().selectQuery : samples['text']['literals'];\n            defaultTabConfig.inference = !($location.search().infer === 'false');\n            defaultTabConfig.sameAs = !($location.search().sameAs === 'false');\n            $scope.tabsData = $scope.tabs = [defaultTabConfig];\n            $scope.currentQuery = angular.copy(defaultTabConfig);\n            $scope.allSamples = samples;\n            initForViewType();\n        });\n    }).error(function (data) {\n        const msg = getError(data);\n        toastr.error(msg, $translate.instant('similarity.could.not.get.search.queries.error'));\n    });\n\n    $scope.$watch('viewType', function () {\n        initForViewType();\n    });\n\n    $scope.helpHidden = LocalStorageAdapter.get(LSKeys.HIDE_SIMILARITY_HELP) === 1;\n    $scope.toggleHelp = function (value) {\n        if (value === undefined) {\n            value = LocalStorageAdapter.get(LSKeys.HIDE_SIMILARITY_HELP);\n        }\n        if (value !== 1) {\n            LocalStorageAdapter.set(LSKeys.HIDE_SIMILARITY_HELP, 1);\n            $scope.helpHidden = true;\n        } else {\n            LocalStorageAdapter.set(LSKeys.HIDE_SIMILARITY_HELP, 0);\n            $scope.helpHidden = false;\n        }\n    };\n\n    $scope.viewQuery = function () {\n        if (!validateIndex()) {\n            return;\n        }\n\n        SimilarityRestService.getQuery({\n            indexName: $scope.newIndex.name,\n            indexOptions: $scope.newIndex.options,\n            query: $scope.currentQuery.query,\n            indexStopList: $scope.newIndex.stopList,\n            queryInference: $scope.currentQuery.inference,\n            querySameAs: $scope.currentQuery.sameAs,\n            viewType: $scope.viewType,\n            indexAnalyzer: $scope.newIndex.analyzer\n        }).success(function (query) {\n            if (query) {\n                $modal.open({\n                    templateUrl: 'pages/viewQuery.html',\n                    controller: 'ViewQueryCtrl',\n                    resolve: {\n                        query: function () {\n                            return query;\n                        }\n                    }\n                });\n            }\n        }).error(function (error) {\n            const msg = getError(error);\n            toastr.error(msg);\n        });;\n    };\n\n    $scope.$watch('newIndex.name', function () {\n        $scope.isInvalidIndexName = false;\n        $scope.isEmptyIndexName = false;\n    });\n\n    $scope.saveQueries = function () {\n        // save the current query\n        const query = window.editor.getValue().trim();\n        if ($scope.page === 1) {\n            $scope.newIndex.query = query;\n        } else if ($scope.page === 2) {\n            $scope.newIndex.searchQuery = query;\n        } else if ($scope.page === 3) {\n            $scope.newIndex.analogicalQuery = query;\n        }\n    };\n\n    $scope.goToPage = function (page) {\n        // ugly fix for GDB-3099\n        if (page !== 1 && $scope.viewMode !== 'yasr') {\n            $scope.showEditor();\n            $timeout(function () {\n                if (page === 2) {\n                    $scope.currentQuery.query = $scope.newIndex.searchQuery;\n                }\n                if (page === 3) {\n                    $scope.currentQuery.query = $scope.newIndex.analogicalQuery;\n                }\n\n                window.editor.setValue($scope.currentQuery.query || ' ');\n            });\n        }\n\n        $scope.saveQueries();\n        // get the saved query\n        if (page === 1) {\n            $scope.currentQuery.query = $scope.newIndex.query;\n        } else if (page === 2) {\n            $scope.currentQuery.query = $scope.newIndex.searchQuery;\n        } else if (page === 3) {\n            $scope.currentQuery.query = $scope.newIndex.analogicalQuery;\n        }\n\n        loadTab();\n        $scope.notoolbar = page !== 1;\n\n        $scope.page = page;\n    };\n\n    $scope.createIndex = function () {\n        if (!validateIndex()) {\n            return;\n        }\n        // Check existing indexes\n        SimilarityRestService.getIndexes()\n            .success(function (data) {\n                data.forEach(function (index) {\n                    if (index.name === $scope.newIndex.name) {\n                        $scope.invalidIndexName = $translate.instant('similarity.existing.index.name.error');\n                    }\n                });\n                if (!$scope.invalidIndexName) {\n                    let indexType = $scope.viewType;\n\n                    if ($scope.literalIndexes !== undefined) {\n                        const inputIndex = $scope.newIndex.inputIndex;\n                        if (inputIndex !== $scope.literalIndexes[0]) {\n                            appendOption('-input_index', inputIndex);\n                        }\n                    }\n                    if ($scope.newIndex.isLiteralIndex === 'true') {\n                        appendOption('-literal_index', 'true');\n                        indexType = 'textLiteral';\n                    }\n\n                    SimilarityRestService.createIndex('POST',\n                        $scope.newIndex.name,\n                        $scope.newIndex.options,\n                        $scope.newIndex.query,\n                        $scope.newIndex.searchQuery,\n                        $scope.newIndex.analogicalQuery,\n                        $scope.newIndex.stopList,\n                        $scope.currentQuery.inference,\n                        $scope.currentQuery.sameAs,\n                        indexType,\n                        $scope.newIndex.analyzer)\n                        .error(function (err) {\n                            toastr.error(getError(err), $translate.instant('similarity.create.index.error'));\n                        });\n                    $location.url('similarity');\n                }\n\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('similarity.could.not.get.indexes.error'));\n            });\n    };\n\n    // Called when user clicks on a sample query\n    $scope.setQuery = function (query) {\n        // Hack for YASQE bug\n        window.editor.setValue(query ? query : ' ');\n    };\n\n    // TODO don't copy paste each time, this is the same as in the graph config\n    // DOWN HERE WE KEEP EVERYTHING PURELY QUERY EDITOR (MOSTLY BORROWED FROM query-editor.controller.js)\n\n    $scope.showEditor = function () {\n        if (window.editor.xhr) {\n            window.editor.xhr.abort();\n        }\n        $scope.viewMode = 'yasr';\n    };\n\n    $scope.showPreview = function () {\n        // For some reason YASR gets confused and sets this to rawResponse\n        // if we execute a CONSTRUCT and then a SELECT. This makes sure it's always table.\n        $scope.currentQuery.outputType = 'table';\n        $scope.runQuery();\n    };\n\n    $scope.resetCurrentTabConfig = function () {\n        $scope.currentTabConfig = {\n            pageSize: 100, // page limit 100 as this is only used for preview\n            page: 1,\n            allResultsCount: 0,\n            resultsCount: 0\n        };\n    };\n\n    $scope.queryExists = false;\n\n    $scope.resetCurrentTabConfig();\n\n    $scope.tabsData = $scope.tabs = [defaultTabConfig];\n\n    // query tab operations\n    $scope.saveTab = saveTab;\n    $scope.loadTab = loadTab;\n    $scope.addNewTab = addNewTab;\n\n    // query operations\n    $scope.runQuery = runQuery;\n    $scope.getNamespaces = getNamespaces;\n    $scope.changePagination = changePagination;\n    $scope.toggleSampleQueries = toggleSampleQueries;\n    $scope.addKnownPrefixes = addKnownPrefixes;\n    $scope.getExistingTabId = getExistingTabId;\n    $scope.querySelected = querySelected;\n    $scope.saveQueryToLocal = saveQueryToLocal;\n\n    $scope.setLoader = setLoader;\n    $scope.getLoaderMessage = getLoaderMessage;\n\n    // query editor and results orientation\n    $scope.fixSizesOnHorizontalViewModeSwitch = fixSizesOnHorizontalViewModeSwitch;\n    $scope.changeViewMode = changeViewMode;\n    $scope.showHideEditor = showHideEditor;\n    $scope.focusQueryEditor = focusQueryEditor;\n    $scope.orientationViewMode = true;\n\n    // start of repository actions\n    $scope.getActiveRepository();\n\n    function getAndRemoveOption(key) {\n        const optArr = $scope.newIndex.options.split(' ');\n        for (let i = 0; i < optArr.length; i++) {\n            if (optArr[i] === key && i + 1 < optArr.length) {\n                const value = optArr[i + 1];\n\n                delete optArr[i];\n                delete optArr[i + 1];\n                $scope.newIndex.options = optArr.join(' ');\n\n                return value;\n            }\n        }\n        return undefined;\n    }\n\n    function saveQueryToLocal(currentQueryTab) {\n    }\n\n    function setLoader(isRunning, progressMessage, extraMessage) {\n        const yasrInnerContainer = angular.element(document.getElementById('yasr-inner'));\n        $scope.queryIsRunning = isRunning;\n        if (isRunning) {\n            $scope.queryStartTime = Date.now();\n            $scope.countTimeouted = false;\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n            yasrInnerContainer.addClass('hide');\n        } else {\n            $scope.progressMessage = '';\n            $scope.extraMessage = '';\n            yasrInnerContainer.removeClass('hide');\n        }\n        // We might call this from angular or outside angular so take care of applying the scope.\n        if ($scope.$$phase === null) {\n            $scope.$apply();\n        }\n    }\n\n    function getLoaderMessage() {\n        const timeSeconds = (Date.now() - $scope.queryStartTime) / 1000;\n        const timeHuman = $scope.getHumanReadableSeconds(timeSeconds);\n        let message = '';\n\n        if ($scope.progressMessage) {\n            message = $scope.progressMessage + '... ' + timeHuman;\n        } else {\n            message = $translate.instant('common.running.operation', {timeHuman: timeHuman});\n        }\n        if ($scope.extraMessage && timeSeconds > 10) {\n            message += '\\n' + $scope.extraMessage;\n        }\n\n        return message;\n    }\n\n    // start of query editor results orientation operations\n    function fixSizesOnHorizontalViewModeSwitch(verticalViewParam) {\n        function visibleWindowHeight() {\n            return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight || 0;\n        }\n\n        const verticalView = verticalViewParam;\n        if (!$scope.orientationViewMode) {\n            $scope.noPadding = {paddingRight: 15, paddingLeft: 0};\n\n            // window.editor is undefined if no repo is selected\n            if (window.editor && document.querySelector('.CodeMirror-wrap')) {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n                document.getElementById('yasr').style.minHeight = newHeight + 'px';\n                //window.editor.refresh();\n            } else {\n                let timer;\n                if (verticalView) {\n                    timer = $timeout(function () {\n                        $scope.fixSizesOnHorizontalViewModeSwitch(verticalView);\n                    }, 100);\n                } else {\n                    timer = $timeout($scope.fixSizesOnHorizontalViewModeSwitch, 100);\n                }\n\n                $scope.$on('$destroy', function () {\n                    $timeout.cancel(timer);\n                });\n            }\n        } else {\n            if ($scope.viewMode === 'yasr') {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n            } else {\n                $scope.noPadding = {};\n                document.querySelector('.CodeMirror-wrap').style.height = '';\n            }\n            document.getElementById('yasr').style.minHeight = '';\n        }\n        if (window.yasr && window.yasr.container) {\n            $timeout(function () {\n                window.yasr.container.resize();\n            }, 100);\n        }\n    }\n\n    if (!$scope.orientationViewMode) {\n        showHideEditor();\n    }\n\n    function changeViewMode(tabID) {\n        $scope.viewMode = 'none';\n        $scope.orientationViewMode = !$scope.orientationViewMode;\n        fixSizesOnHorizontalViewModeSwitch();\n        $('.dataTables_filter').remove();\n        $('.resultsTable').remove();\n        $timeout(function () {\n            loadTab();\n            selectTab(tabID);\n        }, 100);\n    }\n\n    function showHideEditor() {\n        fixSizesOnHorizontalViewModeSwitch(true);\n    }\n\n    function focusQueryEditor() {\n        if (!angular.element(document).find('.editable-input').is(':focus')) {\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }\n    }\n\n    // end of query editor results orientation operations\n\n    function selectTab(id) {\n        $timeout(function () {\n            $('a[data-id = \"' + id + '\"]').tab('show');\n        }, 0);\n    }\n\n    // start of query operations\n    function runQuery(changePage, explain) {\n        $scope.executedQueryTab = $scope.currentQuery;\n        if (window.editor.getQueryType() !== 'SELECT') {\n            toastr.error($translate.instant('similarity.indexes.select.queries.constraint'));\n            return;\n        }\n        if (explain && window.editor.getQueryType() !== 'SELECT') {\n            toastr.warning($translate.instant('similarity.explain.select.queries.constraint'));\n            return;\n        }\n\n        if (window.editor.getQueryMode() === 'update') {\n            toastr.warning($translate.instant('cannot.execute.update.error'));\n            return;\n        }\n\n        $scope.explainRequested = explain;\n        if (!$scope.queryIsRunning) {\n            if (changePage) {\n                $scope.currentTabConfig.resultsCount = 0;\n            } else {\n                $scope.resetCurrentTabConfig();\n            }\n\n            // Hides the editor and shows the yasr results\n            $scope.viewMode = 'editor';\n            if ($scope.orientationViewMode) {\n                $scope.fixSizesOnHorizontalViewModeSwitch();\n            }\n\n            setLoader(true, $translate.instant('evaluating.query.msg'));\n            window.editor.query();\n        }\n    }\n\n    // FIXME: this is copy-pasted in graphs-config.controller.js and query-editor.controller.js. Find a way to avoid duplications\n    function getNamespaces() {\n        // Signals the namespaces are to be fetched => loader will be shown\n        setLoader(true, $translate.instant('common.refreshing.namespaces'), $translate.instant('common.extra.message'));\n        RDF4JRepositoriesRestService.getRepositoryNamespaces()\n            .success(function (data) {\n                const usedPrefixes = {};\n                data.results.bindings.forEach(function (e) {\n                    usedPrefixes[e.prefix.value] = e.namespace.value;\n                });\n                $scope.namespaces = usedPrefixes;\n            })\n            .error(function (data) {\n                $scope.repositoryError = getError(data);\n            })\n            .finally(function () {\n                // Signals namespaces were fetched => loader will be hidden\n                setLoader(false);\n            });\n    }\n\n    function changePagination() {\n        runQuery(true, $scope.explainRequested);\n    }\n\n    if ($scope.getActiveRepository()) {\n        getNamespaces();\n    }\n\n    $scope.$on('$destroy', function () {\n        window.editor = null;\n        window.yasr = null;\n    });\n\n    function toggleSampleQueries() {\n    }\n\n    // Add known prefixes\n    function addKnownPrefixes() {\n        SparqlRestService.addKnownPrefixes(JSON.stringify(window.editor.getValue()))\n            .success(function (data) {\n                if (angular.isDefined(window.editor) && angular.isDefined(data) && data !== window.editor.getValue()) {\n                    window.editor.setValue(data);\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('common.add.known.prefixes.error'));\n                return true;\n            });\n    }\n\n    $('textarea').on('paste', function () {\n        $timeout(function () {\n            addKnownPrefixes();\n        }, 0);\n    });\n\n    function querySelected(query) {\n        const tabId = getExistingTabId(query);\n        $scope.toggleSampleQueries();\n        if (!angular.isDefined(tabId)) {\n            $scope.addNewTab(null, query.name, query.body);\n        } else {\n            selectTab(tabId);\n        }\n    }\n\n    function getExistingTabId(query) {\n        let existingTabId = undefined;\n        angular.forEach($scope.tabsData, function (item) {\n            if (item.name === query.name && item.query === query.body) {\n                existingTabId = item.id;\n                return item;\n            }\n        });\n\n        return existingTabId;\n    }\n\n\n    // end of query operations\n\n    // start of query tab operations\n    function findTabIndexByID(id) {\n        for (let i = 0; i < $scope.tabsData.length; i++) {\n            const tab = $scope.tabsData[i];\n            if (tab.id === id) {\n                return i;\n            }\n        }\n    }\n\n    $scope.$watchCollection('[currentQuery.inference, currentQuery.sameAs]', function () {\n        saveQueryToLocal($scope.currentQuery);\n    });\n\n    function saveTab(id) {\n        const idx = findTabIndexByID(id);\n        // Tab was deleted, don't try to save it's state\n        if (idx === undefined) {\n            return {};\n        }\n        const tab = $scope.tabsData[idx];\n        //tab.query = window.editor.getValue();\n        $scope.saveQueryToLocal(tab);\n        return tab;\n    }\n\n    function addNewTab(callback, tabName, savedQuery) {\n    }\n\n    function loadTab() {\n        $scope.tabsData = [$scope.currentQuery];\n\n        const tab = $scope.currentQuery;\n\n        if ($scope.currentQuery.query === null || $scope.currentQuery.query === '') {\n            // hack for YASQE bug\n            window.editor.setValue(' ');\n        } else {\n            window.editor.setValue($scope.currentQuery.query || ' ');\n        }\n\n        $timeout(function () {\n            $scope.currentTabConfig = {};\n            $scope.currentTabConfig.queryType = tab.queryType;\n            $scope.currentTabConfig.resultsCount = tab.resultsCount;\n\n            $scope.currentTabConfig.offset = tab.offset;\n            $scope.currentTabConfig.allResultsCount = tab.allResultsCount;\n            $scope.currentTabConfig.page = tab.page;\n            $scope.currentTabConfig.pageSize = tab.pageSize;\n\n            $scope.currentTabConfig.timeFinished = tab.timeFinished;\n            $scope.currentTabConfig.timeTook = tab.timeTook;\n            $scope.currentTabConfig.sizeDelta = tab.sizeDelta;\n            $scope.$apply();\n        }, 0);\n\n        //Remove paddign of yasr so it will be aligned with sparql editor\n        $('#yasr').css('padding', '0');\n    }\n\n    function getQueryID(element) {\n        return $(element).attr('data-id');\n    }\n\n    $scope.$on('tabAction', function (e, tabEvent) {\n        if (tabEvent.relatedTarget) {\n            $scope.saveTab(getQueryID(tabEvent.relatedTarget));\n        }\n        $scope.loadTab(getQueryID(tabEvent.target));\n    });\n\n    $scope.$on('deleteAllexeptSelected', function (e, tabs) {\n        $scope.tabsData = tabs;\n        $scope.tabs = tabs;\n    });\n    // end of query tab operations\n\n    $scope.currentQuery = angular.copy(defaultTabConfig);\n    // $scope.state = {};\n    $scope.showSampleQueries = false;\n    $scope.savedQuery = {};\n    $scope.sampleQueries = {};\n\n    $scope.getResultsDescription = function () {\n    };\n\n    $scope.getUpdateDescription = function () {\n    };\n\n    $scope.getStaleWarningMessage = function () {\n    };\n\n    $scope.saveSearchQuery = function () {\n        // Should validate that query is SELECT\n        if (window.editor.getQueryType() !== 'SELECT') {\n            toastr.error($translate.instant('similarity.index.select.queries.constraint'));\n            return;\n        }\n        let data = {\n            name: $scope.newIndex.name,\n            changedQuery: $scope.currentQuery.query,\n            isSearchQuery: $scope.page === 2\n        };\n\n        return SimilarityRestService.saveSearchQuery(JSON.stringify(data))\n            .then(async function () {\n                await Notifications.showToastMessageWithDelay($scope.page === 2 ? 'similarity.changed.search.query.msg' : 'similarity.changed.analogical.query.msg');\n                $location.url('similarity');\n            }, function (response) {\n                toastr.error(getError(response), $translate.instant('similarity.change.query.error'));\n            });\n    };\n\n    $scope.getCloseBtnMsg = function () {\n        let operationType = $scope.editSearchQuery ? $translate.instant('similarity.query.edition.msg') : $translate.instant('similarity.index.creation.msg');\n        return $translate.instant('similarity.close.btn.msg', {operation: operationType});\n    }\n}\n","import 'angular/core/services';\nimport 'angular/core/directives';\nimport 'angular/core/controllers';\nimport 'angular/rest/similarity.rest.service';\nimport 'angular/similarity/controllers/similarity-list.controller';\nimport 'angular/similarity/controllers/create-index.controller';\nimport 'angular/core/directives/queryeditor/sparql-tab.directive';\nimport 'angular/core/directives/queryeditor/query-editor.controller';\nimport 'angular/core/directives/queryeditor/query-editor.directive';\n\nangular.module('graphdb.framework.similarity', [\n    'graphdb.framework.core.controllers',\n    'graphdb.framework.core.directives',\n    'graphdb.framework.rest.similarity.service',\n    'graphdb.framework.similarity.controllers.create',\n    'graphdb.framework.similarity.controllers.list',\n    'graphdb.framework.core.directives.queryeditor.controllers',\n    'graphdb.framework.core.directives.queryeditor.sparqltab',\n    'graphdb.framework.core.directives.queryeditor.queryeditor'\n]);\n","angular\n    .module('graphdb.framework.utils.notifications', [])\n    .factory('Notifications', Notifications);\n\nNotifications.$inject = ['toastr', '$translate'];\n\nfunction Notifications(toastr, $translate) {\n    return {\n        showToastMessageWithDelay\n    };\n\n    /**\n     *  This method will show message with tiny delay and only after completion\n     *  of latter redirection to \"graphs-visualizations\" page will happen.\n     * @param {string} message The message to be displayed.\n     * @return {Promise<any>}\n     */\n    function showToastMessageWithDelay(message) {\n        return new Promise((r) => {\n            toastr.success($translate.instant(message));\n            setTimeout(r, 200);\n        });\n    }\n}\n","import 'angular/utils/local-storage-adapter';\n\nangular\n    .module('graphdb.framework.core.directives.queryeditor.sparqltab', [\n        'graphdb.framework.core',\n        'graphdb.framework.utils.localstorageadapter'\n    ])\n    .directive('sparqlTab', sparqlTabDirective);\n\nsparqlTabDirective.$inject = ['$rootScope', 'LocalStorageAdapter', 'LSKeys', 'ModalService'];\n\nfunction sparqlTabDirective($rootScope, LocalStorageAdapter, LSKeys, ModalService) {\n    const SparqlTabCtrl = ['$scope', '$element', '$rootScope', 'ModalService', 'toastr', '$translate', function ($scope, $element, $rootScope, ModalService, toastr, $translate) {\n        $scope.state = {};\n\n        function getQueryID(element) {\n            return $(element).attr('data-id');\n        }\n\n        function findTabIndexByID(id) {\n            for (let i = 0; i < $scope.tabs.length; i++) {\n                const tab = $scope.tabs[i];\n                if (tab.id === id) {\n                    return i;\n                }\n            }\n        }\n\n        $($element).on('shown.bs.tab', function (e) {\n            $rootScope.$broadcast('tabAction', e);\n        });\n\n        $scope.deleteTab = deleteTab;\n        $scope.editCurrentTab = editCurrentTab;\n        $scope.selectThisTab = selectThisTab;\n\n        function selectThisTab(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            if ($scope.isTabChangeOk(false)) {\n                $($element).tab('show');\n            }\n        }\n\n        function selectTab(id) {\n            $('a[data-id = \"' + id + '\"]').tab('show');\n        }\n\n        function deleteTab(e) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if ($scope.tabs.length < 2) {\n                toastr.warning($translate.instant('sparql.tab.directive.close.last.warning'));\n                return;\n            }\n\n            if (e.shiftKey) {\n                $scope.state.selectedTabId = getQueryID($element);\n\n                ModalService.openSimpleModal({\n                    title: $translate.instant('common.confirm'),\n                    message: $translate.instant('sparql.tab.directive.delete.all.tabs.warning'),\n                    warning: true\n                }).result.then(function () {\n                    deleteAllTabsExceptSelected($scope.state.selectedTabId);\n                });\n            } else {\n                $scope.state.idForDelete = getQueryID($element);\n\n                ModalService.openSimpleModal({\n                    title: $translate.instant('common.confirm'),\n                    message: $translate.instant('sparql.tab.directive.close.tab.warning'),\n                    warning: true\n                }).result.then(function () {\n                    deleteTabByID($scope.state.idForDelete);\n                });\n            }\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }\n\n        function editCurrentTab() {\n            if (getQueryID($element) !== $scope.currentQuery.id) {\n                return;\n            }\n            $scope.editCurrentlySelectedOnly.$show();\n            //fix for buttons for edit\n            const $editableButtons = $(\".editable-buttons\");\n            $editableButtons.children(\".btn.btn-primary\").addClass('btn-sm');\n            $editableButtons.children(\".btn.btn-default\").addClass('btn-sm');\n            $('.editable-controls .editable-input').addClass('form-control-sm').on('change', function ($el) {\n                $scope.currentQuery.name = $el.currentTarget.$$currentValue;\n            });\n            //$('.editable-buttons').css('margin-top', '5px');\n            //$('.editable-input.editable-has-buttons').css('width', '50%');\n            $('.editable-buttons .glyphicon.glyphicon-ok')\n                .removeClass('glyphicon glyphicon-ok')\n                .addClass('fa fa-check');\n            $('.editable-buttons .glyphicon.glyphicon-remove')\n                .removeClass('glyphicon glyphicon-remove')\n                .addClass('fa fa-close');\n        }\n\n        function deleteTabByID(id) {\n            if (angular.isUndefined(id)) {\n                throw 'Delete by id was called with undefined id';\n            }\n            const idx = findTabIndexByID(id);\n            $scope.tabs.splice(idx, 1);\n\n            if (id === $scope.currentQuery.id) {\n                if ($scope.tabs.length > 0) {\n                    if (idx > 0) {\n                        // select previous tab if we deleted any but the first tab\n                        selectTab($scope.tabs[idx - 1].id);\n                    } else {\n                        // select first tab if we deleted the first tab\n                        selectTab($scope.tabs[0].id);\n                    }\n                }\n            }\n        }\n\n        function deleteAllTabsExceptSelected(id) {\n            $scope.tabs = $scope.tabs.filter(function (obj) {\n                if (obj.id === id) {\n                    return obj;\n                }\n            });\n            selectTab($scope.tabs[0].id);\n            LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n            $rootScope.$broadcast('deleteAllexeptSelected', $scope.tabs);\n        }\n    }];\n\n    return {\n        restrict: 'AE',\n        // for some reason when you extract this template in a file and use templateUrl it selects all tabs when editing the tab name, not only the currently selected one\n        template: '<a class=\"nav-link\" role=\"tab\" data-toggle=\"tab\" blur=\"submit\" editable-text=\"tab.name\" e-form=\"editCurrentlySelectedOnly\" ng-click=\"selectThisTab($event)\" ng-dblclick=\"editCurrentTab()\" ><span ng-class=\"{\\'text-muted\\': !tab.name}\">{{ tab.name || (\\'sparql.tab.directive.unnamed.tab.title\\' | translate)}}</span><button type=\"button\" ng-click=\"deleteTab($event)\" class=\"btn btn-link btn-sm secondary delete-sparql-tab-btn\" title=\"Delete tab\"><i class=\"icon-close\"></i></button></a>',\n        replace: true,\n        controller: SparqlTabCtrl\n    };\n}\n"],"sourceRoot":""}