{"version":3,"sources":["webpack:///./src/js/angular/repositories/ontop-repo.directive.js"],"names":["ontopRepoDirective","$modal","RepositoriesRestService","toastr","Upload","$translate","restrict","scope","templateUrl","link","$scope","selectedDriver","driverType","driverName","jdbc","hostName","port","databaseName","userName","password","driverClass","url","urlTemplate","downloadDriverUrl","ontopRepoFileNames","supportedDriversData","ontopRepoFileLabels","propertiesFile","obdaFile","owlFile","constraintFile","dbMetadataFile","ontopRepoFiles","Object","keys","forEach","key","repositoryInfo","params","value","supportedDriverLabels","propertiesFileParams","classAvailable","genericDriverType","REQUIRED_ONTOP_REPO_PARAMS","REQUIRED_PROPERTIES_FIELD_PARAMS","updateProperties","filter","requiredField","length","error","instant","Promise","reject","uploadFileLoader","updatePropertiesFile","location","success","data","fileLocation","showErrorMsg","resolve","title","msg","getError","loadDriverByClass","foundDriver","find","driver","copyDriverProperties","selectDriverByType","concatURL","portRequired","isReadOnly","labelName","editFile","file","open","controller","result","then","updateRepositoryFileContent","content","uploadOntopRepoFile","files","param","uploadFile","upload","name","errorMessage","replace","getInputType","checkForRequiredOntopFiles","requiredFile","validateOntopPropertiesConnection","isOntopRepoFileUploaded","isRequiredOntopRepoFile","indexOf","isRequiredField","field","getFieldTooltip","repoTooltips","ontop","editOntopRepo","editRepository","catch","err","createOntopRepo","id","createRepo","goBackToPrevious","goBackToPreviousLocation","getSupportedDriversData","response","editRepoPage","loadPropertiesFile","driverData","parseInt","angular","module","directive","$inject"],"mappings":"2FAAA,mBAQA,SAASA,EAAmBC,EAAQC,EAAyBC,EAAQC,EAAQC,GACzE,MAAO,CACHC,SAAU,IACVC,OAAO,EACPC,YAAa,oDAEbC,KAGJ,SAAkBC,GAEdA,EAAOC,eAAiB,CACpBC,WAAY,UACZC,WAAY,sBACZC,KAAM,CACFC,SAAU,GACVC,KAAM,GACNC,aAAc,GACdC,SAAU,GACVC,SAAU,GACVC,YAAa,GACbC,IAAK,IAETC,YAAa,GACbC,kBAAmB,IAEvBb,EAAOc,mBAAqB,GAC5Bd,EAAOe,qBAAuB,GAC9Bf,EAAOgB,oBACH,CAACC,eAAgB,kBAAmBC,SAAU,gBAAiBC,QAAS,gBACpEC,eAAgB,kBAAmBC,eAAgB,oBAC3DrB,EAAOsB,eAAiBC,OAAOC,KAAKxB,EAAOgB,qBAC3ChB,EAAOsB,eAAeG,SAAQ,SAASC,GAC/B1B,EAAO2B,eAAeC,OAAOF,KAC7B1B,EAAOc,mBAAmBY,GAAO,sBAAY1B,EAAO2B,eAAeC,OAAOF,GAAKG,WAGvF7B,EAAO8B,sBAAwB,CAACzB,SAAU,WAAYC,KAAM,OAAQC,aAAc,gBAClDC,SAAU,WAAYC,SAAU,WAAYC,YAAa,eAAgBC,IAAK,OAC9GX,EAAO+B,qBAAuBR,OAAOC,KAAKxB,EAAO8B,uBACjD9B,EAAOgC,gBAAiB,EACxBhC,EAAOiC,kBAAoB,UAC3BjC,EAAOiB,eAAiB,iBAExB,MAAMiB,EAA6B,CAAClC,EAAOiB,eAAgB,YACrDkB,EAAmC,CAAC,WAAY,eAAgB,YAsLtE,SAASC,IACL,OAAIpC,EAAOC,eAAeC,aAAeF,EAAOiC,kBAZhCE,EACXE,QAAO,SAAUC,GACd,OAAQtC,EAAOC,eAAeG,KAAKkC,MAE/BC,OAAS,IACjB9C,EAAO+C,MAAM7C,EAAW8C,QAAQ,iCACzB,GAQIC,QAAQC,OAAOhD,EAAW8C,QAAQ,kCAQjDzC,EAAO4C,kBAAmB,EACnBpD,EACFqD,qBAAqB7C,EAAO2B,eAAeC,OAAO5B,EAAOiB,gBAAgBY,MAAO7B,EAAOC,eAAeG,KAAMJ,EAAO2B,eAAemB,UAClIC,SAAQ,SAAUC,GACfhD,EAAOc,mBAAmBd,EAAOiB,gBAAkB,sBAAY+B,EAAKC,cACpEjD,EAAO2B,eAAeC,OAAO5B,EAAOiB,gBAAgBY,MAAQmB,EAAKC,aACjEjD,EAAO4C,kBAAmB,KAC3BJ,OAAM,SAAUQ,GACfE,EAAavD,EAAW8C,QAAQ,gBAAiBO,GACjDhD,EAAO4C,kBAAmB,MAb3BF,QAAQS,UA4DnB,SAASD,EAAcE,EAAOJ,GAC1B,MAAMK,EAAMC,SAASN,GACrBvD,EAAO+C,MAAMa,EAAKD,GAhPtBpD,EAAOuD,kBAAoB,SAAU7C,GACjC,MAAM8C,EAAcxD,EAAOe,qBACtB0C,KAAMC,GAAWA,EAAOhD,cAAgBA,GAI7C,OAHI8C,GACAxD,EAAO2D,qBAAqBH,GAEzBA,GAGXxD,EAAO4D,mBAAqB,SAAU1D,GAClCF,EAAO2D,qBAAqB3D,EAAOe,qBAC9B0C,KAAMC,GAAWA,EAAOxD,aAAeA,IAE5CF,EAAO6D,UAAU,WAAY7D,IAGjCA,EAAO2D,qBAAuB,SAAUD,GACpC1D,EAAOC,eAAeC,WAAawD,EAAOxD,WAC1CF,EAAOC,eAAeG,KAAKM,YAAcgD,EAAOhD,YAChDV,EAAOC,eAAeG,KAAKO,IAAM+C,EAAO9C,YACxCZ,EAAOC,eAAeW,YAAc8C,EAAO9C,YAC3CZ,EAAOC,eAAeY,kBAAoB6C,EAAO7C,kBACjDb,EAAOC,eAAe6D,aAAeJ,EAAOI,aAC5C9D,EAAOgC,eAAiB0B,EAAO1B,gBAGnChC,EAAO+D,WAAa,SAAUC,GAC1B,MAAqB,gBAAdA,GAA6C,QAAdA,GAG1ChE,EAAOiE,SAAW,SAASC,GACD3E,EAAO4E,KAAK,CAC9BrE,YAAa,+CACbsE,WAAY,yBACZjB,QAAS,CACLe,KAAM,WACF,OAAOlE,EAAO2B,eAAeC,OAAOsC,GAAQlE,EAAO2B,eAAeC,OAAOsC,GAAMrC,MAAQ,OAKrFwC,OAAOC,MAAK,SAAUtB,GAEhCxD,EAAwB+E,4BAA4BvB,EAAKC,aAAcD,EAAKwB,QAASxE,EAAO2B,eAAemB,UAAUC,SAAQ,SAASsB,GAClIrE,EAAOc,mBAAmBoD,GAAQ,sBAAYG,EAAOpB,cACrDjD,EAAO2B,eAAeC,OAAOsC,GAAMrC,MAAQwC,EAAOpB,gBACnDT,OAAM,SAAUA,GACfU,EAAavD,EAAW8C,QAAQ,gBAAiBD,UAK7DxC,EAAOyE,oBAAsB,SAASC,EAAOC,GACrCD,GAASA,EAAMnC,SACfvC,EAAO4E,WAAaF,EAAM,GAC1B1E,EAAO4C,kBAAmB,EAC1BlD,EAAOmF,OAAO,CACVlE,IAAK,gCACLqC,KAAM,CAACkB,KAAMlE,EAAO4E,WAAY9B,SAAU9C,EAAO2B,eAAemB,YAE/DC,SAAQ,SAAUC,GACVA,EAAKD,SAGN/C,EAAOc,mBAAmB6D,GAAS3E,EAAO4E,WAAWE,KACrD9E,EAAO2B,eAAeC,OAAO+C,GAAO9C,MAAQmB,EAAKC,cAHjDxD,EAAO+C,MAAMQ,EAAK+B,cAKtB/E,EAAO4C,kBAAmB,KAC3BJ,OAAM,SAAUQ,GACnBE,EAAavD,EAAW8C,QAAQ,gBAAiBO,GACjDhD,EAAO4E,WAAa,GACpB5E,EAAO4C,kBAAmB,OAKtC5C,EAAO6D,UAAY,SAASG,GACxB,GAAkB,aAAdA,GAA0C,SAAdA,GAAsC,iBAAdA,EAA8B,CAClF,IAAIK,EAASrE,EAAOC,eAAeW,YAC/BZ,EAAOC,eAAeG,KAAKC,WAEvBgE,EADArE,EAAOC,eAAeG,KAAKE,KAClB+D,EAAOW,QAAQ,aACpB,GAAGhF,EAAOC,eAAeG,KAAKC,YAAYL,EAAOC,eAAeG,KAAKE,QAEhE+D,EAAOW,QAAQ,aAAchF,EAAOC,eAAeG,KAAKC,WAIrEL,EAAOC,eAAeG,KAAKG,eAC3B8D,EAASA,EAAOW,QAAQ,aAAchF,EAAOC,eAAeG,KAAKG,eAGrEP,EAAOC,eAAeG,KAAKO,IAAM0D,IAIzCrE,EAAOiF,aAAe,SAAUjB,GAC5B,OAAQA,GACJ,IAAK,WACD,MAAO,WACX,IAAK,OACD,MAAO,SACX,QACI,MAAO,SAInBhE,EAAOkF,2BAA6B,WAGhC,OAAO9C,IACFkC,MAAK,WAIF,OAHwBpC,EAA2BG,QAAO,SAAU8C,GAChE,OAAQnF,EAAO2B,eAAeC,OAAOuD,GAActD,SAEnCU,OAAS,GACzB9C,EAAO+C,MAAM7C,EAAW8C,QAAQ,2CACzBC,QAAQC,OAAOhD,EAAW8C,QAAQ,4CAEtCC,QAAQS,cAuB3BnD,EAAOoF,kCAAoC,WACvChD,IACKkC,MAAK,WACF9E,EAAwB4F,kCAAkCpF,EAAO2B,gBAC5DoB,SAAQ,WACLtD,EAAOsD,QAAQpD,EAAW8C,QAAQ,4CACnCD,OAAM,SAAUQ,GACnBE,EAAavD,EAAW8C,QAAQ,gCAAiCO,UAKjFhD,EAAOqF,wBAA0B,WAC7B,OAAOrF,EAAO2B,eAAeC,OAAOX,gBAChCjB,EAAO2B,eAAeC,OAAOX,eAAeY,MAAMU,OAAS,GAuCnEvC,EAAOsF,wBAA0B,SAASpB,GACtC,OAAOhC,EAA2BqD,QAAQrB,IAAS,GAGvDlE,EAAOwF,gBAAkB,SAAUC,GAC/B,OAAOtD,EAAiCoD,QAAQE,IAAU,GACzC,SAAVA,GAAoBzF,EAAOC,eAAe6D,cAGrD9D,EAAO0F,gBAAkB,SAAUD,GAI/B,MAHc,SAAVA,GAAoBzF,EAAOC,eAAe6D,eAC1C2B,EAAQ,kBAELzF,EAAO2F,aAAaC,MAAMH,IAGrCzF,EAAO6F,cAAgB,WACnB7F,EAAOkF,6BACFZ,MAAK,WACFtE,EAAO8F,oBACRC,OAAM,SAAUC,QAK3BhG,EAAOiG,gBAAkB,WAChBjG,EAAO2B,eAAeuE,GAK3BlG,EAAOkF,6BACFZ,MAAK,WACFtE,EAAOmG,gBACRJ,OAAM,SAAUC,OAPnBvG,EAAO+C,MAAM7C,EAAW8C,QAAQ,0BAYxCzC,EAAOoG,iBAAmB,WACtBpG,EAAOqG,4BAnPA7G,EAAwB8G,wBAAwBtG,EAAO2B,gBACzDoB,SAAQ,SAAUwD,GACfvG,EAAOe,qBAAuBwF,KAC/B/D,OAAM,SAAU+D,GACfrD,EAAavD,EAAW8C,QAAQ,gBAAiB8D,MAwPxDjC,MAAK,WACEtE,EAAOwG,cAzHfhH,EAAwBiH,mBAAmBzG,EAAO2B,eAAeC,OAAO5B,EAAOiB,gBAAgBY,MAAO7B,EAAO2B,eAAemB,UACvHC,SAAQ,SAAU2D,GACA1G,EAAOuD,kBAAkBmD,EAAWhG,eAG/CV,EAAOC,eAAeG,KAAKC,SAAWqG,EAAWrG,SACjDL,EAAOC,eAAeG,KAAKE,KAAOqG,SAASD,EAAWpG,MACtDN,EAAOC,eAAeG,KAAKG,aAAemG,EAAWnG,aACrDP,EAAOC,eAAeG,KAAKI,SAAWkG,EAAWlG,SACjDR,EAAOC,eAAeG,KAAKK,SAAWiG,EAAWjG,SACjDT,EAAOC,eAAeG,KAAKO,IAAM+F,EAAW/F,QAEjD6B,OAAM,SAAUQ,GACnBE,EAAavD,EAAW8C,QAAQ,gBAAiBO,GACjDhD,EAAO4C,kBAAmB,UAxM1CgE,QACKC,OAAO,sDAAuD,IAC9DC,UAAU,YAAaxH,GAE5BA,EAAmByH,QAAU,CAAC,SAAU,0BAA2B,SAAU,SAAU","file":"108.19b6e7d30df333e42876.bundle.js","sourcesContent":["import {getFileName} from \"./controllers\";\n\nangular\n    .module('graphdb.framework.repositories.ontop-repo.directive', [])\n    .directive('ontopRepo', ontopRepoDirective);\n\nontopRepoDirective.$inject = ['$modal', 'RepositoriesRestService', 'toastr', 'Upload', '$translate'];\n\nfunction ontopRepoDirective($modal, RepositoriesRestService, toastr, Upload, $translate) {\n    return {\n        restrict: 'E',\n        scope: false,\n        templateUrl: 'js/angular/repositories/templates/ontop-repo.html',\n\n        link: linkFunc\n    };\n\n    function linkFunc($scope) {\n\n        $scope.selectedDriver = {\n            driverType: \"generic\",\n            driverName: \"Generic JDBC Driver\",\n            jdbc: {\n                hostName: \"\",\n                port: \"\",\n                databaseName: \"\",\n                userName: \"\",\n                password: \"\",\n                driverClass: \"\",\n                url: \"\"\n            },\n            urlTemplate: \"\",\n            downloadDriverUrl: \"\"\n        };\n        $scope.ontopRepoFileNames = {};\n        $scope.supportedDriversData = [];\n        $scope.ontopRepoFileLabels =\n            {propertiesFile: 'JDBC properties', obdaFile: 'OBDA or R2RML', owlFile: 'ontology file',\n                constraintFile: 'constraint file', dbMetadataFile: 'DB metadata file'};\n        $scope.ontopRepoFiles = Object.keys($scope.ontopRepoFileLabels);\n        $scope.ontopRepoFiles.forEach(function(key) {\n            if ($scope.repositoryInfo.params[key]) {\n                $scope.ontopRepoFileNames[key] = getFileName($scope.repositoryInfo.params[key].value);\n            }\n        });\n        $scope.supportedDriverLabels = {hostName: 'Hostname', port: \"Port\", databaseName: 'Database name',\n                                        userName: 'Username', password: 'Password', driverClass: 'Driver class', url: 'URL'};\n        $scope.propertiesFileParams = Object.keys($scope.supportedDriverLabels);\n        $scope.classAvailable = false;\n        $scope.genericDriverType = 'generic';\n        $scope.propertiesFile = 'propertiesFile';\n\n        const REQUIRED_ONTOP_REPO_PARAMS = [$scope.propertiesFile, 'obdaFile'];\n        const REQUIRED_PROPERTIES_FIELD_PARAMS = ['hostName', 'databaseName', 'userName'];\n\n        function getSupportedDriversData() {\n            return RepositoriesRestService.getSupportedDriversData($scope.repositoryInfo)\n                .success(function (response) {\n                    $scope.supportedDriversData = response;\n                }).error(function (response) {\n                    showErrorMsg($translate.instant('common.error'), response);\n                });\n        }\n\n        $scope.loadDriverByClass = function (driverClass) {\n            const foundDriver = $scope.supportedDriversData\n                .find((driver) => driver.driverClass === driverClass);\n            if (foundDriver) {\n                $scope.copyDriverProperties(foundDriver);\n            }\n            return foundDriver;\n        };\n\n        $scope.selectDriverByType = function (driverType) {\n            $scope.copyDriverProperties($scope.supportedDriversData\n                .find((driver) => driver.driverType === driverType));\n            // Call concatURL with proper labelName to apply changes to url field\n            $scope.concatURL('hostName', $scope);\n        };\n\n        $scope.copyDriverProperties = function (driver) {\n            $scope.selectedDriver.driverType = driver.driverType;\n            $scope.selectedDriver.jdbc.driverClass = driver.driverClass;\n            $scope.selectedDriver.jdbc.url = driver.urlTemplate;\n            $scope.selectedDriver.urlTemplate = driver.urlTemplate;\n            $scope.selectedDriver.downloadDriverUrl = driver.downloadDriverUrl;\n            $scope.selectedDriver.portRequired = driver.portRequired;\n            $scope.classAvailable = driver.classAvailable;\n        };\n\n        $scope.isReadOnly = function (labelName) {\n            return labelName === 'driverClass' || labelName === 'url';\n        }\n\n        $scope.editFile = function(file) {\n            const modalInstance = $modal.open({\n                templateUrl: 'js/angular/templates/modal/editRepoFile.html',\n                controller: 'EditRepositoryFileCtrl',\n                resolve: {\n                    file: function () {\n                        return $scope.repositoryInfo.params[file] ? $scope.repositoryInfo.params[file].value : '';\n                    }\n                }\n            });\n\n            modalInstance.result.then(function (data) {\n                // send data to backend\n                RepositoriesRestService.updateRepositoryFileContent(data.fileLocation, data.content, $scope.repositoryInfo.location).success(function(result) {\n                    $scope.ontopRepoFileNames[file] = getFileName(result.fileLocation);\n                    $scope.repositoryInfo.params[file].value = result.fileLocation;\n                }).error(function (error) {\n                    showErrorMsg($translate.instant('common.error'), error);\n                })\n            });\n        }\n\n        $scope.uploadOntopRepoFile = function(files, param) {\n            if (files && files.length) {\n                $scope.uploadFile = files[0];\n                $scope.uploadFileLoader = true;\n                Upload.upload({\n                    url: 'rest/repositories/file/upload',\n                    data: {file: $scope.uploadFile, location: $scope.repositoryInfo.location}\n                })\n                    .success(function (data) {\n                        if (!data.success) {\n                            toastr.error(data.errorMessage);\n                        } else {\n                            $scope.ontopRepoFileNames[param] = $scope.uploadFile.name;\n                            $scope.repositoryInfo.params[param].value = data.fileLocation;\n                        }\n                        $scope.uploadFileLoader = false;\n                    }).error(function (data) {\n                    showErrorMsg($translate.instant('common.error'), data);\n                    $scope.uploadFile = '';\n                    $scope.uploadFileLoader = false;\n                });\n            }\n        }\n\n        $scope.concatURL = function(labelName) {\n            if (labelName === 'hostName' || labelName === 'port' || labelName === 'databaseName') {\n                let result = $scope.selectedDriver.urlTemplate;\n                if ($scope.selectedDriver.jdbc.hostName) {\n                    if ($scope.selectedDriver.jdbc.port) {\n                        result = result.replace('{hostport}',\n                            `${$scope.selectedDriver.jdbc.hostName}:${$scope.selectedDriver.jdbc.port}`);\n                    } else {\n                        result = result.replace('{hostport}', $scope.selectedDriver.jdbc.hostName);\n                    }\n                }\n\n                if ($scope.selectedDriver.jdbc.databaseName) {\n                    result = result.replace('{database}', $scope.selectedDriver.jdbc.databaseName);\n                }\n\n                $scope.selectedDriver.jdbc.url = result;\n            }\n        }\n\n        $scope.getInputType = function (labelName) {\n            switch (labelName) {\n                case 'password':\n                    return 'password';\n                case 'port':\n                    return 'number';\n                default:\n                    return 'text';\n            }\n        }\n\n        $scope.checkForRequiredOntopFiles = function () {\n            // Should guarantee that code will be executed in sequential manner,\n            // because properties file is not created yet\n            return updateProperties()\n                .then(function () {\n                    const missingRequired = REQUIRED_ONTOP_REPO_PARAMS.filter(function (requiredFile) {\n                        return !$scope.repositoryInfo.params[requiredFile].value;\n                    });\n                    if (missingRequired.length > 0) {\n                        toastr.error($translate.instant('ontop.repo.missing.required.file.error'));\n                        return Promise.reject($translate.instant('ontop.repo.missing.required.file.error'));\n                    }\n                    return Promise.resolve();\n                });\n        }\n\n        function loadPropertiesFile() {\n            RepositoriesRestService.loadPropertiesFile($scope.repositoryInfo.params[$scope.propertiesFile].value, $scope.repositoryInfo.location)\n                .success(function (driverData) {\n                    const driver = $scope.loadDriverByClass(driverData.driverClass);\n                    // If driver class is not found means that the selected driver is a GENERIC ONE\n                    if (driver) {\n                        $scope.selectedDriver.jdbc.hostName = driverData.hostName;\n                        $scope.selectedDriver.jdbc.port = parseInt(driverData.port);\n                        $scope.selectedDriver.jdbc.databaseName = driverData.databaseName;\n                        $scope.selectedDriver.jdbc.userName = driverData.userName;\n                        $scope.selectedDriver.jdbc.password = driverData.password;\n                        $scope.selectedDriver.jdbc.url = driverData.url;\n                    }\n                }).error(function (data) {\n                showErrorMsg($translate.instant('common.error'), data);\n                $scope.uploadFileLoader = false;\n            });\n        }\n\n        $scope.validateOntopPropertiesConnection = function () {\n            updateProperties()\n                .then(function () {\n                    RepositoriesRestService.validateOntopPropertiesConnection($scope.repositoryInfo)\n                        .success(function () {\n                            toastr.success($translate.instant('ontop.repo.successful.connection.msg'));\n                        }).error(function (data) {\n                        showErrorMsg($translate.instant('ontop.repo.failed.to.connect'), data);\n                    });\n                });\n        }\n\n        $scope.isOntopRepoFileUploaded = function() {\n            return $scope.repositoryInfo.params.propertiesFile &&\n                $scope.repositoryInfo.params.propertiesFile.value.length > 0\n        };\n\n        function missingRequiredField() {\n            const missing = REQUIRED_PROPERTIES_FIELD_PARAMS\n                .filter(function (requiredField) {\n                    return !$scope.selectedDriver.jdbc[requiredField]\n                });\n            if (missing.length > 0) {\n                toastr.error($translate.instant('missing.required.field.error'));\n                return true;\n            }\n            return false;\n        }\n\n        function updateProperties() {\n            if ($scope.selectedDriver.driverType !== $scope.genericDriverType) {\n                if (missingRequiredField()) {\n                    return Promise.reject($translate.instant('missing.required.field.error'));\n                }\n                return updatePropertiesFile();\n            }\n            return Promise.resolve();\n        }\n\n        function updatePropertiesFile() {\n            $scope.uploadFileLoader = true;\n            return RepositoriesRestService\n                .updatePropertiesFile($scope.repositoryInfo.params[$scope.propertiesFile].value, $scope.selectedDriver.jdbc, $scope.repositoryInfo.location)\n                .success(function (data) {\n                    $scope.ontopRepoFileNames[$scope.propertiesFile] = getFileName(data.fileLocation);\n                    $scope.repositoryInfo.params[$scope.propertiesFile].value = data.fileLocation;\n                    $scope.uploadFileLoader = false;\n                }).error(function (data) {\n                    showErrorMsg($translate.instant('common.error'), data);\n                    $scope.uploadFileLoader = false;\n                });\n        }\n\n        $scope.isRequiredOntopRepoFile = function(file) {\n            return REQUIRED_ONTOP_REPO_PARAMS.indexOf(file) > -1;\n        };\n\n        $scope.isRequiredField = function (field) {\n            return REQUIRED_PROPERTIES_FIELD_PARAMS.indexOf(field) > -1\n                || field === 'port' && $scope.selectedDriver.portRequired;\n        };\n\n        $scope.getFieldTooltip = function (field) {\n            if (field === 'port' && $scope.selectedDriver.portRequired) {\n                field = 'portIfRequired';\n            }\n            return $scope.repoTooltips.ontop[field];\n        };\n\n        $scope.editOntopRepo = function () {\n            $scope.checkForRequiredOntopFiles()\n                .then(function () {\n                    $scope.editRepository();\n                }).catch(function (err) {\n                // The catch block is empty, because error is handled in promise\n            });\n        }\n\n        $scope.createOntopRepo = function () {\n            if (!$scope.repositoryInfo.id) {\n                toastr.error($translate.instant('empty.repoid.warning'));\n                return;\n            }\n\n            $scope.checkForRequiredOntopFiles()\n                .then(function () {\n                    $scope.createRepo();\n                }).catch(function (err) {\n                // The catch block is empty, because error is handled in promise\n            });\n        };\n\n        $scope.goBackToPrevious = function () {\n            $scope.goBackToPreviousLocation();\n        }\n\n        function showErrorMsg (title, data) {\n            const msg = getError(data);\n            toastr.error(msg, title);\n        }\n\n        getSupportedDriversData()\n            .then(function () {\n                if ($scope.editRepoPage) {\n                    loadPropertiesFile();\n                }\n            });\n    }\n}\n"],"sourceRoot":""}