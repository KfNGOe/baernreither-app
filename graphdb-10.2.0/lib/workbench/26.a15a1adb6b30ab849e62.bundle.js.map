{"version":3,"sources":["webpack:///./src/js/angular/externalsync/app.js","webpack:///./src/js/angular/rest/connectors.rest.service.js","webpack:///./src/js/angular/externalsync/controllers.js","webpack:///./src/js/angular/externalsync/directives.js"],"names":["angular","module","filter","noun","isUndefined","replace","factory","ConnectorsRestService","$inject","$http","getConnectors","get","initConnector","prefix","hasConnector","checkConnector","data","post","headers","jsonToFormData","str","Object","keys","forEach","key","push","encodeURIComponent","join","fromArrayMap","arrayMap","$translate","_","reduce","acc","value","Error","instant","hasOwnProperty","mapCreateValuesToUiValues","values","options","i","length","option","__type","__name","j","__childOptions","child","k","valueK","isDefined","__defaultValue","optionEl","map","String","toJson","_evaluateSparqlQuery","http","repository","query","buildNamePrefix","substring","createConnectorQuery","name","fields","reportError","fcopy","sortObject","obj","newObject","each","childOption","copy","fromJson","e","__label","message","removeEmptyValues","Array","isArray","item","trim","finalString","ConnectorsCtrl","$scope","$repositories","$modal","toastr","ModalService","$q","RDF4JRepositoriesRestService","resetProgress","repair","beingBuiltConnector","percentDone","status","processedEntities","estimatedEntities","indexedEntities","entitiesPerSecond","actionName","waitOnRepairStartOnce","eta","inline","iri","openProgressModal","$","extend","doneCallback","modalInstance","dismiss","open","templateUrl","controller","size","backdrop","scope","executeCreate","connector","errorCallback","modal","addStatements","getActiveRepository","update","then","res","existing","success","err","error","getError","finally","loader","controllers","definitions","getLoaderMessage","timeSeconds","Date","now","loaderStartTime","timeHuman","getHumanReadableSeconds","progressMessage","extraMessage","setLoader","isRunning","isLicenseValid","canWriteActiveRepo","connectors","all","connectorIris","createStatusQueryForAny","evaluateSparqlQuery","results","bindings","statusObject","JSON","parse","console","parseFirstBuildingResult","d","split","catch","getOptions","isEmpty","isObject","toPrettyJson","$watch","getActiveLocation","copyConnector","newValues","resolve","result","skipConversion","newConnector","inst","type","openSimpleModal","title","warning","delete","isExternal","indexOf","popoverMsg","force","namePrefix","deleteConnectorQuery","viewQuery","DeleteConnectorCtrl","$modalInstance","ok","close","cancel","ExtendNewConnectorCtrl","toQuery","label","addField","index","optionName","newField","defaultValues","splice","addOption","array","deleteOption","addMapOption","deleteMapOption","form","$valid","CreateConnectorCtrl","$controller","this","CreateProgressCtrl","$interval","initProgress","statusIri","createStatusQueryForIri","progressInterval","getFirstStatusFromResult","toFixed","etaSeconds","$on","input","Math","ceil","directive","restrict"],"mappings":"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","file":"26.a15a1adb6b30ab849e62.bundle.js","sourcesContent":["import 'angular/core/services';\nimport 'angular/core/directives';\nimport 'angular/core/controllers';\nimport 'angular/externalsync/controllers';\nimport 'angular/externalsync/directives';\n\nconst modules = [\n    'graphdb.framework.core.controllers',\n    'graphdb.framework.externalsync.controllers',\n    'graphdb.framework.externalsync.directives',\n    'graphdb.framework.core.directives'\n];\n\nconst externalsync = angular.module('graphdb.framework.externalsync', modules);\n\nexternalsync.filter('singular', function () {\n    return function (noun) {\n        if (angular.isUndefined(noun)) {\n            return noun;\n        } else {\n            return noun.replace(/ies$/, 'y').replace(/s$/, '');\n        }\n    };\n});\n","angular\n    .module('graphdb.framework.rest.connectors.service', [])\n    .factory('ConnectorsRestService', ConnectorsRestService);\n\nConnectorsRestService.$inject = ['$http'];\n\nconst CONNECTORS_ENDPOINT = 'rest/connectors';\n\nfunction ConnectorsRestService($http) {\n\n    return {\n        getConnectors,\n        initConnector,\n        hasConnector,\n        checkConnector\n    };\n\n    function getConnectors() {\n        return $http.get(CONNECTORS_ENDPOINT);\n    }\n\n    function initConnector(prefix) {\n        return $http.get(`${CONNECTORS_ENDPOINT}/options?prefix=${prefix}`);\n    }\n\n    function hasConnector(prefix) {\n        return $http.get(`${CONNECTORS_ENDPOINT}/existing?prefix=${prefix}`);\n    }\n\n    function checkConnector(data) {\n        return $http.post(`${CONNECTORS_ENDPOINT}/check`, data, {\n            headers: {\n                'Content-Type': 'text/plain'\n            }\n        });\n    }\n}\n","import 'angular/rest/rdf4j.repositories.rest.service';\nimport 'angular/rest/connectors.rest.service';\n\nconst modules = [\n    'graphdb.framework.rest.rdf4j.repositories.service',\n    'graphdb.framework.rest.connectors.service'\n];\n\nangular\n    .module('graphdb.framework.externalsync.controllers', modules)\n    .controller('ConnectorsCtrl', ConnectorsCtrl)\n    .controller('ExtendNewConnectorCtrl', ExtendNewConnectorCtrl)\n    .controller('CreateConnectorCtrl', CreateConnectorCtrl)\n    .controller('CreateProgressCtrl', CreateProgressCtrl)\n    .controller('DeleteConnectorCtrl', DeleteConnectorCtrl)\n    .filter('ceil', ceil);\n\nfunction jsonToFormData(data) {\n    const str = [];\n    Object.keys(data).forEach(function (key) {\n        str.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));\n    });\n    return str.join('&');\n}\n\nfunction toArrayMap(map) {\n    return _.map(map, function (value, key) {\n        return {key: key, value: value};\n    });\n}\n\nfunction fromArrayMap(arrayMap, $translate) {\n    return _.reduce(arrayMap, function (acc, value) {\n        if (value.key === '' && value.value === '') {\n            // empty pair, skip it\n        } else if (value.key === '') {\n            throw new Error($translate.instant('externalsync.empty.value.key.error', {value: value.value}));\n        } else if (acc.hasOwnProperty(value.key)) {\n            throw new Error($translate.instant('externalsync.duplicate.key.error', {key: value.key}));\n        } else {\n            acc[value.key] = value.value;\n        }\n        return acc;\n    }, {});\n}\n\nfunction mapCreateValuesToUiValues(values, options) {\n    for (let i = 0; i < options.length; i++) {\n        const option = options[i];\n        if (option.__type === 'StringArray') {\n            if (!values[option.__name]) {\n                values[option.__name] = [''];\n            }\n        } else if (option.__type === 'OptionArray') {\n            if (!values[option.__name]) { // values has no entry for this option\n                values[option.__name] = [];\n                const optionEl = {};\n                for (let j = 0; j < option.__childOptions.length; j++) {\n                    const child = option.__childOptions[j];\n                    if (child.__type === 'StringArray') {\n                        optionEl[child.__name] = [''];\n                    } else {\n                        optionEl[child.__name] = (!angular.isUndefined(child.__defaultValue) ? child.__defaultValue : '');\n                    }\n                }\n                values[option.__name].push(optionEl);\n            } else { // values already has en entry for this option\n                // Copies the default value for Boolean child options if no explicit value is set\n                for (let j = 0; j < option.__childOptions.length; j++) {\n                    const child = option.__childOptions[j];\n                    if (child.__type === 'Boolean') {\n                        for (let k = 0; k < values[option.__name].length; k++) {\n                            const valueK = values[option.__name][k];\n                            if (!valueK.hasOwnProperty([child.__name]) && angular.isDefined(child.__defaultValue)) {\n                                valueK[child.__name] = child.__defaultValue;\n                            }\n                        }\n                    }\n                }\n            }\n        } else if (option.__type === 'Map') {\n            if (!values[option.__name]) {\n                values[option.__name] = [];\n            } else {\n                values[option.__name] = toArrayMap(values[option.__name]);\n            }\n        } else if (option.__type === 'JsonString') {\n            if (values[option.__name] && !(values[option.__name] instanceof String) && typeof values[option.__name] !== 'string') {\n                values[option.__name] = angular.toJson(values[option.__name], 2);\n            }\n        } else {\n            if (angular.isUndefined(values[option.__name])) {\n                values[option.__name] = (!angular.isUndefined(option.__defaultValue) ? option.__defaultValue : '');\n            }\n        }\n    }\n\n    return values;\n}\n\nfunction _evaluateSparqlQuery(http, repository, query) {\n    return http.post('repositories/' + repository, jsonToFormData({query: query}),\n        {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/sparql-results+json',\n                'X-GraphDB-Local-Consistency': 'updating'\n            }\n        });\n}\n\nfunction buildNamePrefix(prefix) {\n    return prefix.substring(0, prefix.length - 1) + '/instance#';\n}\n\nfunction createConnectorQuery(name, prefix, fields, options, reportError) {\n    // Returns a copy of the parameter obj sorted according to the order in options\n    function sortObject(obj, options) {\n        const newObject = {};\n        _.each(options, function (option) {\n            if (angular.isDefined(obj[option.__name])) {\n                if (option.__type === 'OptionArray') {\n                    newObject[option.__name] = [];\n                    _.each(obj[option.__name], function (childOption) {\n                        newObject[option.__name].push(sortObject(childOption, option.__childOptions));\n                    });\n                } else {\n                    newObject[option.__name] = angular.copy(obj[option.__name]);\n                }\n            }\n        });\n        return newObject;\n    }\n\n    const fcopy = sortObject(fields, options);\n\n    for (let i = 0; i < options.length; i++) {\n        try {\n            if (options[i].__type === 'Map') {\n                fcopy[options[i].__name] = fromArrayMap(fcopy[options[i].__name], $translate);\n            } else if (options[i].__type === 'JsonString') {\n                fcopy[options[i].__name] = angular.fromJson(fcopy[options[i].__name]);\n            }\n        } catch (e) {\n            reportError(options[i].__label, e.message);\n            return null;\n        }\n    }\n\n    removeEmptyValues(fcopy);\n    //escapeValues(fields);\n    let finalString = '';\n    finalString += 'PREFIX :<' + prefix + '>\\n';\n    const namePrefix = buildNamePrefix(prefix);\n    finalString += 'PREFIX inst:<' + namePrefix + '>\\n';\n    finalString += 'INSERT DATA {\\n';\n    finalString += \"\\tinst:\" + name + \" :createConnector '''\\n\"; // eslint-disable-line quotes\n    finalString += angular.toJson(fcopy, 2);\n    finalString += \"\\n''' .\\n}\\n\"; // eslint-disable-line quotes\n    finalString = finalString.replace(/\\\\/g, '\\\\\\\\\\\\');\n    return finalString;\n}\n\nfunction createStatusQueryForIri(iri) {\n    const statusIri = iri.replace(/\\/instance#.+$/, '#connectorStatus');\n    let finalString = '';\n    finalString += 'SELECT ?status {\\n';\n    finalString += '\\t<' + iri + '> <' + statusIri + '> ?status';\n    finalString += '\\n}';\n    return finalString;\n}\n\nfunction createStatusQueryForAny(connectors) {\n    const connectorIris = _.map(connectors,\n        function (k) {\n            return '<' + k.value + 'connectorStatus' + '>';\n        }).join('|');\n\n    if (connectorIris) {\n        return 'SELECT ?connector ?status { ?connector ' + connectorIris + ' ?status }';\n    }\n\n    return null;\n}\n\nfunction repairConnectorQuery(name, prefix) {\n    const namePrefix = buildNamePrefix(prefix);\n    return 'PREFIX prefix:<' + prefix + '>\\n' +\n        'INSERT DATA {\\n' +\n        '\\t<' + namePrefix + name + '> prefix:repairConnector \"\"\\n' +\n        '}';\n}\n\nfunction deleteConnectorQuery(name, prefix, force) {\n    const namePrefix = prefix.substring(0, prefix.length - 1) + \"/instance#\";\n    return 'PREFIX prefix:<' + prefix + '>\\n' +\n        'INSERT DATA {\\n' +\n        '\\t<' + namePrefix + name + '> prefix:dropConnector \"' + (force ? \"force\" : \"\") + '\"\\n' +\n        '}';\n}\n\nfunction removeEmptyValues(data) {\n    // remove empty values from array\n    if (Array.isArray(data)) {\n        data = _.filter(data, function (item) {\n            return item !== null && (!item.trim || item.trim() !== '');\n        });\n    }\n    // remove empty values from object values\n    Object.keys(data).forEach(function (key) {\n        if ((data[key] === '' || data[key] == null) && data[key] !== false) {\n            delete data[key];\n        } else if (typeof data[key] === 'object') {\n            data[key] = removeEmptyValues(data[key]);\n        }\n    });\n    return data;\n}\n\nfunction parseFirstBuildingResult(results) {\n    if (results.bindings) {\n        for (let i = 0; i < results.bindings.length; i++) {\n            try {\n                const statusObject = JSON.parse(results.bindings[i].status.value);\n                if (statusObject.status === 'BUILDING') {\n                    return {\n                        connector: results.bindings[i].connector.value,\n                        status: statusObject\n                    };\n                }\n            } catch (e) {\n                console.error(e); // eslint-disable-line no-console\n            }\n        }\n    }\n\n    return {};\n}\n\nConnectorsCtrl.$inject = ['$scope', '$http', '$repositories', '$modal', 'toastr', 'ModalService', '$q', 'RDF4JRepositoriesRestService', 'ConnectorsRestService', '$translate'];\n\nfunction ConnectorsCtrl($scope, $http, $repositories, $modal, toastr, ModalService, $q, RDF4JRepositoriesRestService, ConnectorsRestService, $translate) {\n    $scope.loader = false;\n\n    $scope.controllers = [];\n\n    $scope.existing = {};\n\n    $scope.definitions = {};\n\n    $scope.getLoaderMessage = function () {\n        const timeSeconds = (Date.now() - $scope.loaderStartTime) / 1000;\n        const timeHuman = $scope.getHumanReadableSeconds(timeSeconds);\n        let message = '';\n        if ($scope.progressMessage) {\n            message = $scope.progressMessage + '... ' + timeHuman;\n        } else {\n            message = $translate.instant('common.running.operation', {timeHuman: timeHuman});\n        }\n        if ($scope.extraMessage && timeSeconds > 10) {\n            message += '\\n' + $scope.extraMessage;\n        }\n\n        return message;\n    };\n\n    $scope.setLoader = function (isRunning, progressMessage, extraMessage) {\n        if (isRunning) {\n            $scope.loader = true;\n            $scope.loaderStartTime = Date.now();\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n        } else {\n            $scope.loader = false;\n            $scope.progressMessage = '';\n            $scope.extraMessage = '';\n        }\n    };\n\n    $scope.initConnector = function (connector) {\n        return ConnectorsRestService.initConnector(encodeURIComponent(connector.value))\n            .then(function (res) {\n                $scope.definitions[connector.key] = res.data;\n\n                return ConnectorsRestService.hasConnector(encodeURIComponent(connector.value))\n                    .then(function (res) {\n                        $scope.existing[connector.key] = res.data;\n\n                    });\n            });\n    };\n\n    $scope.getConnectors = function () {\n        if (!$scope.isLicenseValid()) {\n            return;\n        }\n        if (!$scope.canWriteActiveRepo()) {\n            return;\n        }\n\n        $scope.setLoader(true, $translate.instant('externalsync.fetching.connectors'), $translate.instant('common.extra.message'));\n\n        ConnectorsRestService.getConnectors()\n            .then(function (res) {\n                $scope.connectors = Object.keys(res.data).map(function (key) {\n                    return {key: key, value: res.data[key]};\n                });\n\n                $q.all(_.map($scope.connectors, function (connector) {\n                    return $scope.initConnector(connector);\n                })).finally(function () {\n                    resetProgress();\n\n                    const query = createStatusQueryForAny($scope.connectors);\n\n                    if (query) {\n                        evaluateSparqlQuery(query)\n                            .then(function (res) {\n                                const status = parseFirstBuildingResult(res.data.results);\n                                if (status.connector) {\n                                    // has a building connector, open progress indicator\n                                    const d = status.connector.split(/#/);\n                                    d[0] = d[0].replace(/\\/instance$/, '#');\n                                    showProgress(d[0], d[1]);\n                                }\n                            })\n                            .finally(function () {\n                                $scope.setLoader(false);\n                            });\n                    } else {\n                        $scope.setLoader(false);\n                    }\n                });\n            }).catch(function (e) {\n                $scope.setLoader(false);\n                toastr.error(getError(e), $translate.instant('externalsync.could.not.get.connectors.error'));\n            });\n\n        $scope.existing = {};\n    };\n\n    $scope.getOptions = function (connector) {\n        return $scope.definitions[connector.key];\n    };\n\n    $scope.isEmpty = function (value) {\n        return angular.isObject(value) && Object.keys(value).length === 0;\n    };\n\n    $scope.toPrettyJson = function (value) {\n        return angular.toJson(value, 2);\n    };\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, $scope.getConnectors);\n\n    $scope.$watch(function () {\n        return $repositories.getActiveLocation();\n    }, $scope.getConnectors);\n\n    function evaluateSparqlQuery(query) {\n        return _evaluateSparqlQuery($http, $repositories.getActiveRepository(), query);\n    }\n\n    function resetProgress(repair) {\n        $scope.beingBuiltConnector = {\n            percentDone: 0,\n            status: {\n                processedEntities: 0,\n                estimatedEntities: 0,\n                indexedEntities: 0,\n                entitiesPerSecond: 0\n            },\n            actionName: repair ? $translate.instant('externalsync.repairing') : $translate.instant('externalsync.creating'),\n            waitOnRepairStartOnce: !!repair,\n            eta: '-',\n            inline: false,\n            iri: null\n        };\n    }\n\n    function openProgressModal(prefix, name, repair) {\n        resetProgress(repair);\n\n        $.extend($scope.beingBuiltConnector, {\n            iri: buildNamePrefix(prefix) + name,\n            name: name,\n            inline: false,\n            doneCallback: function () {\n                $scope.beingBuiltConnector.modalInstance.dismiss('cancel');\n            }\n        });\n\n        $scope.beingBuiltConnector.modalInstance = $modal.open({\n            templateUrl: 'pages/connectorProgress.html',\n            controller: 'CreateProgressCtrl',\n            size: 'lg',\n            backdrop: 'static',\n            scope: $scope\n        });\n\n        return $scope.beingBuiltConnector.modalInstance;\n    }\n\n    function showProgress(prefix, name) {\n        resetProgress();\n\n        $.extend($scope.beingBuiltConnector, {\n            iri: buildNamePrefix(prefix) + name,\n            name: name,\n            inline: true,\n            doneCallback: function () {\n                $scope.beingBuiltConnector.inline = false;\n            }\n        });\n    }\n\n    function executeCreate(connector, obj, errorCallback) {\n        const modal = openProgressModal(connector.value, obj.name, false);\n        RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), jsonToFormData({update: obj.query}))\n            .then(function () {\n                ConnectorsRestService.getConnectors().then(function () {\n                    ConnectorsRestService.hasConnector(encodeURIComponent(connector.value)).then(function (res) {\n                        $scope.existing[connector.key] = res.data;\n                    });\n                });\n                toastr.success($translate.instant('created.connector', {name: obj.name}));\n            }, function (err) {\n                toastr.error(getError(err));\n                errorCallback();\n            }).finally(function () {\n                modal.dismiss('cancel');\n            });\n    }\n\n    $scope.copyConnector = function (connector, values) {\n        let newValues;\n        if (!angular.isUndefined(values)) {\n            newValues = angular.copy(values);\n            newValues.name = newValues.name + '-copy';\n        }\n        const modal = $modal.open({\n            templateUrl: 'pages/createConnector.html',\n            controller: 'CreateConnectorCtrl',\n            size: 'lg',\n            backdrop: 'static',\n            resolve: {\n                connector: function () {\n                    return connector;\n                },\n                values: function () {\n                    return angular.isUndefined(newValues) ? {name: '', values: {}} : newValues;\n                },\n                options: function () {\n                    return $scope.getOptions(connector);\n                }\n            }\n        });\n\n        modal.result.then(function (obj) {\n            executeCreate(connector, obj, function () {\n                obj.skipConversion = true;\n                $scope.newConnector(connector, obj);\n            });\n        });\n    };\n\n    $scope.newConnector = function (connector, values) {\n        const modal = $modal.open({\n            templateUrl: 'pages/createConnector.html',\n            controller: 'CreateConnectorCtrl',\n            size: 'lg',\n            backdrop: 'static',\n            resolve: {\n                connector: function () {\n                    return connector;\n                },\n                values: function () {\n                    return angular.isUndefined(values) ? {name: '', values: {}} : values;\n                },\n                options: function () {\n                    return $scope.getOptions(connector);\n                }\n            }\n        });\n\n        modal.result.then(function (obj) {\n            executeCreate(connector, obj, function () {\n                obj.skipConversion = true;\n                $scope.newConnector(connector, obj);\n            });\n        });\n    };\n\n    $scope.repair = function (inst, type) {\n        ModalService.openSimpleModal({\n            title: $translate.instant('externalsync.confirm.repair'),\n            message: $translate.instant('externalsync.repair.warning.msg'),\n            warning: true\n        }).result\n            .then(function () {\n                const modal = openProgressModal(type.value, inst.name, true);\n\n                const query = repairConnectorQuery(inst.name, type.value);\n\n                RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), jsonToFormData({update: query}))\n                    .then(function () {\n                        ConnectorsRestService.getConnectors().then(function () {\n                            ConnectorsRestService.hasConnector(encodeURIComponent(type.value)).then(function (res) {\n                                $scope.existing[type.key] = res.data;\n                            });\n                        });\n                        toastr.success($translate.instant('externalsync.repair.success.msg', {name: inst.name}));\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    }).finally(function () {\n                        modal.dismiss('cancel');\n                    });\n            });\n    };\n\n    $scope.delete = function (inst, type) {\n        const isExternal = type.key.indexOf(\"Elastic\") >= 0 || type.key.indexOf(\"Solr\") >= 0;\n\n        $modal.open({\n            templateUrl: 'js/angular/externalsync/templates/deleteConnector.html',\n            controller: 'DeleteConnectorCtrl',\n            resolve: {\n                popoverMsg: function () {\n                    return isExternal ? $translate.instant('delete.connector.conditional', {type: type.key}) : '';\n                }\n            }\n        }).result\n            .then(function(force) {\n                $scope.setLoader(true, $translate.instant('externalsync.delete.progress.msg', {name: inst.name}),\n                                                $translate.instant('externalsync.extra.message.warning'));\n\n                const query = deleteConnectorQuery(inst.name, type.value, force);\n                RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), jsonToFormData({update: query}))\n                    .then(function () {\n                        ConnectorsRestService.getConnectors().then(function () {\n                            ConnectorsRestService.hasConnector(encodeURIComponent(type.value)).then(function (res) {\n                                $scope.existing[type.key] = res.data;\n                            });\n                        });\n                        if (force) {\n                            toastr.success($translate.instant('externalsync.delete.force.success.msg', {name: inst.name}));\n                            if (isExternal) {\n                                toastr.warning($translate.instant('externalsync.delete.remote.warning', {key: type.key}));\n                            }\n                        } else {\n                            toastr.success($translate.instant('externalsync.delete.success.msg', {name: inst.name}));\n                        }\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    }).finally(function() {\n                        $scope.setLoader(false);\n                    });\n            });\n    };\n\n    $scope.viewQuery = function (connector, inst) {\n        $modal.open({\n            templateUrl: 'pages/viewQuery.html',\n            controller: 'ViewQueryCtrl',\n            resolve: {\n                query: function () {\n                    const options = $scope.getOptions(connector);\n                    return createConnectorQuery(inst.name, connector.value,\n                        mapCreateValuesToUiValues(inst.values, options), options);\n                }\n            }\n        });\n    };\n}\n\nDeleteConnectorCtrl.$inject = ['$scope', '$modalInstance', 'popoverMsg'];\nfunction DeleteConnectorCtrl($scope, $modalInstance, popoverMsg) {\n    $scope.force = false;\n    $scope.popoverMsg = popoverMsg;\n\n    $scope.ok = function () {\n        $modalInstance.close($scope.force);\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss();\n    };\n}\n\nExtendNewConnectorCtrl.$inject = ['$scope', '$modalInstance', 'connector', '$modal', 'toastr'];\nfunction ExtendNewConnectorCtrl($scope, $modalInstance, connector, $modal, toastr) {\n\n    $scope.connector = connector;\n\n    $scope.addField = function (index, optionName) {\n        const newField = angular.copy($scope.defaultValues[optionName][0]);\n        $scope.values[optionName].splice(index + 1, 0, newField);\n    };\n\n    $scope.addOption = function (index, array) {\n        array.splice(index + 1, 0, '');\n    };\n\n    $scope.deleteOption = function (index, array) {\n        array.splice(index, 1);\n    };\n\n    $scope.addMapOption = function (index, array) {\n        array.splice(index + 1, 0, {key: '', value: ''});\n    };\n\n    $scope.deleteMapOption = function (index, array) {\n        array.splice(index, 1);\n    };\n\n    function toQuery() {\n        return createConnectorQuery($scope.name, connector.value, $scope.values, $scope.options,\n            function (label, error) {\n                toastr.error(error, label);\n            });\n    }\n\n    $scope.ok = function () {\n        if ($scope.form.$valid) {\n            const query = toQuery();\n\n            if (query) {\n                $modalInstance.close({name: $scope.name, values: $scope.values, options: $scope.options, query: query});\n            }\n        }\n    };\n\n    $scope.viewQuery = function () {\n        const query = toQuery();\n\n        if (query) {\n            $modal.open({\n                templateUrl: 'pages/viewQuery.html',\n                controller: 'ViewQueryCtrl',\n                resolve: {\n                    query: function () {\n                        return query;\n                    }\n                }\n            });\n        }\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n\nCreateConnectorCtrl.$inject = ['$scope', '$controller', '$http', '$modalInstance', 'connector', '$modal', 'values', 'options'];\n\nfunction CreateConnectorCtrl($scope, $controller, $http, $modalInstance, connector, $modal, values, options) {\n    angular.extend(this, $controller('ExtendNewConnectorCtrl', {\n        $scope: $scope,\n        $modalInstance: $modalInstance,\n        connector: connector,\n        $modal: $modal\n    }));\n    $scope.values = values.values;\n    $scope.options = options;\n    $scope.name = values.name;\n    if (!values.skipConversion) {\n        $scope.values = mapCreateValuesToUiValues($scope.values, $scope.options);\n    }\n    $scope.defaultValues = angular.copy($scope.values);\n}\n\n// Note that this is a fancy controller: it's used both for a modal and for a directive.\n// This means you can't rely on custom injection through resolve in the modal and the scope\n// must be shared with the main connectors controller.\nCreateProgressCtrl.$inject = ['$scope', '$interval', '$http', '$repositories', '$translate'];\n\nfunction CreateProgressCtrl($scope, $interval, $http, $repositories, $translate) {\n    function evaluateSparqlQuery(query) {\n        return _evaluateSparqlQuery($http, $repositories.getActiveRepository(), query);\n    }\n\n    function initProgress() {\n        const query = createStatusQueryForIri($scope.beingBuiltConnector.iri);\n\n        // reset iri value so that watch will fire again when we do something with the same connector\n        $scope.beingBuiltConnector.iri = null;\n\n        $scope.progressInterval = $interval(function () {\n            function getFirstStatusFromResult(results) {\n                if (results.bindings) {\n                    if (results.bindings.length > 0) {\n                        try {\n                            return JSON.parse(results.bindings[0].status.value);\n                        } catch (e) {\n                            console.error(e); // eslint-disable-line no-console\n                        }\n                    }\n                }\n\n                return {};\n            }\n\n            evaluateSparqlQuery(query)\n                .then(function (res) {\n                    const status = getFirstStatusFromResult(res.data.results);\n                    if (status.status === 'BUILDING') {\n                        $scope.beingBuiltConnector.status = status;\n                        $scope.beingBuiltConnector.percentDone = (100 * status.processedEntities / status.estimatedEntities).toFixed(0);\n                        $scope.beingBuiltConnector.eta = $scope.getHumanReadableSeconds(status.etaSeconds);\n                        $scope.beingBuiltConnector.actionName = status.repair ? $translate.instant('externalsync.repairing') : $translate.instant('externalsync.creating');\n                        $scope.beingBuiltConnector.waitOnRepairStartOnce = false;\n                    } else if (status.status === 'BUILT' && !$scope.beingBuiltConnector.waitOnRepairStartOnce) {\n                        // done\n                        $interval.cancel($scope.progressInterval);\n                        if ($scope.beingBuiltConnector.doneCallback) {\n                            $scope.beingBuiltConnector.doneCallback();\n                        }\n                    }\n                });\n        }, 1000);\n\n        $scope.$on('$destroy', function () {\n            $interval.cancel($scope.progressInterval);\n        });\n    }\n\n    $scope.beingBuiltConnector = $scope.beingBuiltConnector || {};\n\n    // for modal instance we get the iri before hand and can start progress now\n    if (!$scope.beingBuiltConnector.inline && $scope.beingBuiltConnector.iri) {\n        initProgress();\n    }\n\n    // for inline progress we need to watch for the iri value\n    $scope.$watch('beingBuiltConnector.iri', function (value) {\n        if ($scope.beingBuiltConnector.inline && value) {\n            initProgress();\n        }\n    });\n}\n\nfunction ceil() {\n    return function (input) {\n        return Math.ceil(input);\n    };\n}\n","import 'angular/core/services';\n\nangular.module('graphdb.framework.externalsync.directives', [])\n    .directive('createProgress', function () {\n        return {\n            templateUrl: 'pages/connectorProgress.html',\n            controller: 'CreateProgressCtrl',\n            restrict: 'EA'\n        };\n    });\n"],"sourceRoot":""}