{"version":3,"sources":["webpack:///./src/js/angular/core/directives/queryeditor/query-editor.controller.js"],"names":["QueryEditorCtrl","$scope","$timeout","toastr","$repositories","$modal","ModalService","SparqlRestService","$filter","$window","$jwtAuth","RDF4JRepositoriesRestService","MonitoringRestService","LocalStorageAdapter","LSKeys","$translate","defaultTabConfig","id","name","query","inference","sameAs","principal","checkQueryIntervalId","saveQueryToLocal","currentQueryTab","isActiveRepoOntopType","sameAsBtn","document","getElementById","currentQuery","disabled","removeAttribute","appSettings","DEFAULT_SAMEAS","shouldDisableSameAs","tabs","forEach","tab","index","set","TABS_STATE","setLoader","isRunning","progressMessage","extraMessage","noTimer","yasrInnerContainer","angular","element","queryIsRunning","queryStartTime","Date","now","countTimeouted","noLoaderTimer","addClass","currentTrackAlias","abortRequested","removeClass","$$phase","$apply","fixSizesOnHorizontalViewModeSwitch","verticalView","visibleWindowHeight","window","innerHeight","documentElement","clientHeight","body","orientationViewMode","viewMode","newHeight","querySelector","getBoundingClientRect","style","height","noPadding","minHeight","paddingRight","paddingLeft","editor","timer","$on","cancel","yasr","container","resize","showHideEditor","deleteCachedSparqlResults","foo","params","newRepo","tabsData","get","item","yasrData","undefined","queryType","resultsCount","allResultsCount","sizeDelta","errorMessage","repositoryError","selectTab","$","runQuery","changePage","explain","executedQueryTab","getQueryType","warning","instant","explainRequested","currentTabConfig","resetCurrentTabConfig","lastRunQueryMode","getQueryMode","toggleSampleQueries","showSampleQueries","getSavedQueries","success","data","sampleQueries","collapse","width","error","msg","getError","getExistingTabId","existingTabId","showModal","modalSelector","shared","savedQuery","getValue","modal","findTabIndexByID","i","length","getPrincipal","then","response","scope","DEFAULT_INFERENCE","skipCountQuery","EXECUTE_COUNT","ignoreSharedQueries","IGNORE_SHARED_QUERIES","$watchCollection","newVal","oldVal","initTabs","this","hint","createElement","innerHTML","fontSize","color","backgroundColor","position","zIndex","$watch","newValue","elRect","appendChild","top","left","right","offsetWidth","parentNode","removeChild","pageSize","page","queryExists","saveTab","idx","loadTab","setValue","updateDownloadDropdown","$broadcast","options","output","outputType","customError","results","getException","setYasrResponse","textStatus","jqXhrOrErrorString","hasClass","click","TABS_STATE_CURRENT_ID","offset","allResultsCountExact","timeFinished","timeTook","customUpdateMessage","warningMessage","css","setInterval","showOrHideSaveAsDropDown","isOntop","isFedX","isActiveRepoFedXType","inferenceBtn","handleSameAsAndInferenceBtns","nocount","overrideSameAsInferenceAndNoCountIfNeeded","addNewTab","callback","tabName","isTabChangeOk","maxID","newID","newTab","push","TABS_STATE_MAXID","callbackArgs","Array","prototype","slice","call","arguments","apply","abortCurrentQuery","deleteQuery","getActiveRepository","editQuery","open","templateUrl","controller","resolve","title","edit","okButtonText","result","queryModal","addNewSavedQuery","deleteQueryHttp","editSavedQuery","getNamespaces","namespacesLoading","getRepositoryNamespaces","usedPrefixes","bindings","e","prefix","value","namespace","namespaces","finally","changePagination","addKnownPrefixes","JSON","stringify","isDefined","querySelected","tabId","highlightNextTabChange","savedQueryName","openSimpleModal","message","deleteSavedQuery","saveQuery","existingQueryErrMsg","saveQueryHttp","status","getLoaderMessage","timeSeconds","timeHuman","getHumanReadableSeconds","changeViewMode","VIEW_MODE","focusQueryEditor","find","is","focus","getActiveRepositoryNoError","onbeforeunload","clearInterval","mouseup","event","target","has","getQueryID","attr","$saveAsDropDown","queryValid","header","remove","isNew","info","tabEvent","relatedTarget","colors","times","highlightFun","editQueryModal","deleteQueryModal","saveQueryModal","getResultsDescription","desc","currentPageEnd","Math","min","getUpdateDescription","abs","getStaleWarningMessage","secondsAgo","round","bind","unbind","QuerySampleModalCtrl","$modalInstance","$sce","copy","trustAsHtml","ok","form","$valid","close","dismiss","module","$inject"],"mappings":"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","file":"62.86f5ed4f7b582a8aa17d.bundle.js","sourcesContent":["import 'angular/utils/local-storage-adapter';\nimport 'angular/rest/sparql.rest.service';\nimport {decodeHTML} from \"../../../../../app\";\n\nangular\n    .module('graphdb.framework.core.directives.queryeditor.controllers', [\n        'graphdb.framework.utils.localstorageadapter',\n        'graphdb.framework.rest.sparql.service'\n    ])\n    .controller('QueryEditorCtrl', QueryEditorCtrl)\n    .controller('QuerySampleModalCtrl', QuerySampleModalCtrl);\n\nQueryEditorCtrl.$inject = ['$scope', '$timeout', 'toastr', '$repositories', '$modal', 'ModalService', 'SparqlRestService', '$filter', '$window', '$jwtAuth', 'RDF4JRepositoriesRestService', 'MonitoringRestService', 'LocalStorageAdapter', 'LSKeys', '$translate'];\n\nfunction QueryEditorCtrl($scope, $timeout, toastr, $repositories, $modal, ModalService, SparqlRestService, $filter, $window, $jwtAuth, RDF4JRepositoriesRestService, MonitoringRestService, LocalStorageAdapter, LSKeys, $translate) {\n    const defaultTabConfig = {\n        id: \"1\",\n        name: '',\n        query: 'select * where { \\n' +\n        '\\t?s ?p ?o .\\n' +\n        '} limit 100 \\n',\n        inference: true,\n        sameAs: true\n    };\n\n    let principal;\n    // Wrapped in function for ease of testing\n    $scope.getPrincipal = function () {\n        return $jwtAuth.getPrincipal()\n            .then((response) => {\n                principal = response;\n                initTabs($scope, principal);\n            });\n    };\n\n    $scope.getPrincipal();\n    let checkQueryIntervalId;\n\n    function initTabs(scope, principal) {\n        defaultTabConfig.inference = principal.appSettings.DEFAULT_INFERENCE;\n        defaultTabConfig.sameAs = principal.appSettings.DEFAULT_SAMEAS;\n\n        scope.skipCountQuery = !principal.appSettings.EXECUTE_COUNT;\n        scope.ignoreSharedQueries = principal.appSettings.IGNORE_SHARED_QUERIES;\n        scope.tabsData = scope.tabs = LocalStorageAdapter.get(LSKeys.TABS_STATE) || [defaultTabConfig];\n\n        scope.$watchCollection('[currentQuery.inference, currentQuery.sameAs]', function (newVal, oldVal, scope) {\n            saveQueryToLocal(scope.currentQuery);\n        });\n\n        scope.$on('repositoryIsSet', deleteCachedSparqlResults);\n    }\n\n    this.hint =  document.createElement(\"span\");\n    this.hint.innerHTML = $translate.instant('query.editor.autocomplete.hint');\n    this.hint.style.fontSize = \"12px\";\n    this.hint.style.color = \"gray\";\n    this.hint.style.backgroundColor = \"white\";\n    this.hint.style.position = \"absolute\";\n    this.hint.style.zIndex = \"3\";\n    this.hint.style.paddingLeft = 12 + \"px\";\n\n    $scope.$watch(function() {\n        return angular.element('.CodeMirror-hints').length;\n    }, (newValue) => {\n        if (newValue) {\n            const elRect = angular.element('.CodeMirror-hints')[0].getBoundingClientRect();\n            document.body.appendChild(this.hint);\n            this.hint.style.top = elRect.top - 20 + \"px\";\n            this.hint.style.left = elRect.right - this.hint.offsetWidth - 12 +  \"px\";\n        } else {\n            this.hint && this.hint.parentNode && this.hint.parentNode.removeChild(this.hint);\n        }\n    });\n\n    $scope.resetCurrentTabConfig = function () {\n        $scope.currentTabConfig = {\n            pageSize: 1000,\n            page: 1,\n            allResultsCount: 0,\n            resultsCount: 0\n        };\n    };\n\n    $scope.queryExists = false;\n\n    $scope.resetCurrentTabConfig();\n\n    // query tab operations\n    $scope.saveTab = saveTab;\n    $scope.loadTab = loadTab;\n    $scope.addNewTab = addNewTab;\n    $scope.isTabChangeOk = isTabChangeOk;\n\n    // query operations\n    $scope.runQuery = runQuery;\n    $scope.abortCurrentQuery = abortCurrentQuery;\n    $scope.editQuery = editQuery;\n    $scope.getNamespaces = getNamespaces;\n    $scope.changePagination = changePagination;\n    $scope.toggleSampleQueries = toggleSampleQueries;\n    $scope.addKnownPrefixes = addKnownPrefixes;\n    $scope.getExistingTabId = getExistingTabId;\n    $scope.querySelected = querySelected;\n    $scope.deleteQuery = deleteQuery;\n    $scope.deleteQueryHttp = deleteQueryHttp;\n    $scope.saveQuery = saveQuery;\n    $scope.saveQueryHttp = saveQueryHttp;\n    $scope.saveQueryToLocal = saveQueryToLocal;\n\n    $scope.setLoader = setLoader;\n    $scope.getLoaderMessage = getLoaderMessage;\n\n    // query editor and results orientation\n    $scope.fixSizesOnHorizontalViewModeSwitch = fixSizesOnHorizontalViewModeSwitch;\n    $scope.changeViewMode = changeViewMode;\n    $scope.showHideEditor = showHideEditor;\n    $scope.focusQueryEditor = focusQueryEditor;\n    $scope.orientationViewMode = LocalStorageAdapter.get(LSKeys.VIEW_MODE) ? LocalStorageAdapter.get(LSKeys.VIEW_MODE) === \"true\" : true;\n    $scope.viewMode = 'none';\n\n    // start of repository actions\n    // FIXME: do we need this??\n    // $scope.getActiveRepository();\n    $scope.getActiveRepository = function () {\n        // same as getActiveRepository() but takes into account repo errors\n        return $repositories.getActiveRepository();\n    };\n\n    $scope.getActiveRepositoryNoError = function () {\n        if (!$scope.repositoryError) {\n            return $repositories.getActiveRepository();\n        }\n    };\n\n    function saveQueryToLocal(currentQueryTab) {\n        shouldDisableSameAs();\n        $scope.tabs.forEach(function (tab, index) {\n            if (tab.id === currentQueryTab.id) {\n                $scope.tabs[index].query = currentQueryTab.query;\n                // Don't store inference and sameAs values for Ontop repository,\n                // because they are overridden afterwards to true\n                if (!$repositories.isActiveRepoOntopType()) {\n                    $scope.tabs[index].inference = currentQueryTab.inference;\n                    $scope.tabs[index].sameAs = currentQueryTab.sameAs;\n                }\n            }\n        });\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n    }\n\n    function setLoader(isRunning, progressMessage, extraMessage, noTimer) {\n        const yasrInnerContainer = angular.element(document.getElementById(\"yasr-inner\"));\n        $scope.queryIsRunning = isRunning;\n        if (isRunning) {\n            $scope.queryStartTime = Date.now();\n            $scope.countTimeouted = false;\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n            $scope.noLoaderTimer = noTimer;\n            yasrInnerContainer.addClass(\"hide\");\n        } else {\n            $scope.progressMessage = \"\";\n            $scope.extraMessage = \"\";\n            $scope.noLoaderTimer = false;\n            $scope.currentTrackAlias = null;\n            $scope.abortRequested = false;\n            yasrInnerContainer.removeClass(\"hide\");\n        }\n        // We might call this from angular or outside angular so take care of applying the scope.\n        if ($scope.$$phase === null) {\n            $scope.$apply();\n        }\n    }\n\n    function getLoaderMessage() {\n        const timeSeconds = (Date.now() - $scope.queryStartTime) / 1000;\n        let timeHuman = \"\";\n        let message = \"\";\n\n        if (!$scope.noLoaderTimer) {\n            timeHuman = $scope.getHumanReadableSeconds(timeSeconds);\n        }\n\n        if ($scope.progressMessage) {\n            message = $translate.instant('query.editor.progress.msg', {progressMessage: $scope.progressMessage, timeHuman: timeHuman});\n        } else {\n            message = $translate.instant('common.running.operation', {timeHuman: timeHuman});\n        }\n        if ($scope.extraMessage && timeSeconds > 10) {\n            message += $translate.instant('query.editor.extra.msg', {extraMessage: $scope.extraMessage});\n        }\n\n        return message;\n    }\n\n    // start of query editor results orientation operations\n    function fixSizesOnHorizontalViewModeSwitch(verticalView) {\n        function visibleWindowHeight() {\n            return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight || 0;\n        }\n\n        if (!$scope.orientationViewMode) {\n            $scope.noPadding = {paddingRight: 15, paddingLeft: 0};\n\n            // window.editor is undefined if no repo is selected\n            if (window.editor && document.querySelector('.CodeMirror-wrap')) {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n                document.getElementById('yasr').style.minHeight = newHeight + 'px';\n                //window.editor.refresh();\n            } else {\n                let timer;\n                if (verticalView) {\n                    timer = $timeout(function () {\n                        $scope.fixSizesOnHorizontalViewModeSwitch(verticalView);\n                    }, 100);\n                } else {\n                    timer = $timeout($scope.fixSizesOnHorizontalViewModeSwitch, 100);\n                }\n\n                $scope.$on(\"$destroy\", function () {\n                    $timeout.cancel(timer);\n                });\n            }\n        } else {\n            if ($scope.viewMode === 'yasr') {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n                //window.editor.refresh();\n            } else {\n                $scope.noPadding = {};\n                document.querySelector('.CodeMirror-wrap').style.height = '';\n                //window.editor.refresh();\n            }\n            document.getElementById('yasr').style.minHeight = '';\n        }\n        if (window.yasr && window.yasr.container) {\n            $timeout(function () {\n                window.yasr.container.resize();\n            }, 100);\n        }\n    }\n\n    if (!$scope.orientationViewMode) {\n        showHideEditor();\n    }\n\n    function changeViewMode() {\n        $scope.viewMode = 'none';\n        $scope.orientationViewMode = !$scope.orientationViewMode;\n        LocalStorageAdapter.set(LSKeys.VIEW_MODE, $scope.orientationViewMode);\n        fixSizesOnHorizontalViewModeSwitch();\n    }\n\n    function showHideEditor() {\n        fixSizesOnHorizontalViewModeSwitch(true);\n    }\n\n    function focusQueryEditor() {\n        if (!angular.element(document).find('.editable-input').is(\":focus\")) {\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }\n    }\n\n    // end of query editor results orientation operations\n\n    function deleteCachedSparqlResults(foo, params) {\n        if (params.newRepo) {\n            $scope.tabsData = LocalStorageAdapter.get(LSKeys.TABS_STATE);\n            $scope.tabsData.forEach(function (item) {\n                item.yasrData = undefined;\n                item.queryType = undefined;\n                item.resultsCount = 0;\n                item.allResultsCount = 0;\n                item.sizeDelta = undefined;\n            });\n\n            LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabsData);\n            $scope.tabs = $scope.tabsData;\n\n            // The repository is changed. Remove error messages as well, if any\n            $scope.currentQuery = {};\n            $scope.errorMessage = null;\n            $scope.repositoryError = null;\n        }\n    }\n\n    function selectTab(id) {\n        $timeout(function () {\n            $('a[data-id = \"' + id + '\"]').tab('show');\n        }, 0);\n    }\n\n    window.onbeforeunload = function () {\n        if ($scope.currentQuery) {\n            $scope.saveTab($scope.currentQuery.id);\n        }\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n    };\n\n    $scope.$on('$destroy', function () {\n        if ($scope.currentQuery) {\n            $scope.saveTab($scope.currentQuery.id);\n        }\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n        clearInterval(checkQueryIntervalId);\n    });\n\n    // start of query operations\n    function runQuery(changePage, explain) {\n        $scope.executedQueryTab = $scope.currentQuery ;\n        if (explain) {\n            if (!(window.editor.getQueryType() === 'SELECT' || window.editor.getQueryType() === 'CONSTRUCT')) {\n                toastr.warning($translate.instant('query.editor.warning.msg'));\n                return;\n            }\n\n            if ($repositories.isActiveRepoOntopType()) {\n                toastr.warning($translate.instant('query.editor.virtual.repo.warning.msg'));\n                return;\n            }\n        }\n\n        $scope.explainRequested = explain;\n        if (!$scope.queryIsRunning) {\n            if (changePage) {\n                $scope.currentTabConfig.resultsCount = 0;\n            } else {\n                $scope.resetCurrentTabConfig();\n            }\n\n            $scope.lastRunQueryMode = window.editor.getQueryMode();\n\n            if ($scope.lastRunQueryMode === 'update' && $repositories.isActiveRepoOntopType()) {\n                toastr.warning($translate.instant('query.editor.virtual.repo.update.warning.msg'));\n                return;\n            }\n\n            setLoader(true, $scope.lastRunQueryMode === 'update' ? $translate.instant('query.editor.executing.update') : $translate.instant('query.editor.evaluating.query'));\n            if ($scope.viewMode !== 'none') {\n                $scope.viewMode = 'none';\n                if ($scope.orientationViewMode) {\n                    $scope.fixSizesOnHorizontalViewModeSwitch();\n                }\n                const timer = $timeout(window.editor.query, 500);\n                $scope.$on('$destroy', function () {\n                    $timeout.cancel(timer);\n                });\n            } else {\n                window.editor.query();\n            }\n        }\n    }\n\n    function abortCurrentQuery() {\n        MonitoringRestService.deleteQuery($scope.currentTrackAlias, $repositories.getActiveRepository())\n            .success(function () {\n                $scope.abortRequested = true;\n            });\n    }\n\n    function getNamespaces() {\n        // Signals the namespaces are to be fetched => loader will be shown\n        setLoader(true, $translate.instant('common.refreshing.namespaces'), $translate.instant('common.extra.message'));\n        $scope.namespacesLoading = true;\n\n        RDF4JRepositoriesRestService.getRepositoryNamespaces()\n            .success(function (data) {\n                const usedPrefixes = {};\n                data.results.bindings.forEach(function (e) {\n                    usedPrefixes[e.prefix.value] = e.namespace.value;\n                });\n                $scope.namespaces = usedPrefixes;\n            })\n            .error(function (data) {\n                $scope.repositoryError = getError(data);\n            })\n            .finally(function () {\n                // Signals namespaces were fetched => loader will be hidden\n                setLoader(false);\n                $scope.namespacesLoading = false;\n            });\n    }\n\n    function changePagination() {\n        runQuery(true, $scope.explainRequested);\n    }\n\n    $scope.$on(\"$destroy\", function () {\n        clearInterval(checkQueryIntervalId);\n        window.editor = null;\n        window.yasr = null;\n    });\n\n    function toggleSampleQueries() {\n        $scope.showSampleQueries = !$scope.showSampleQueries;\n        if ($scope.showSampleQueries) {\n            SparqlRestService.getSavedQueries()\n                .success(function (data) {\n                    $scope.sampleQueries = data;\n                    $('#sampleQueriesCollapse').collapse('show').width('300px');\n                })\n                .error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, $translate.instant('query.editor.get.saved.queries.error'));\n                });\n        } else {\n            $('#sampleQueriesCollapse').collapse('hide');\n        }\n    }\n\n    // Hide the sample queries when the user clicks somewhere else in the UI.\n    $(document).mouseup(function (event) {\n        const container = $('#sampleQueriesCollapse');\n        if (!container.is(event.target) // if the target of the click isn't the container..\n            && container.has(event.target).length === 0 //... nor a descendant of the container\n            && $scope.showSampleQueries) {\n            toggleSampleQueries();\n        }\n    });\n\n    // Add known prefixes\n    function addKnownPrefixes() {\n        SparqlRestService.addKnownPrefixes(JSON.stringify(window.editor.getValue()))\n            .success(function (data) {\n                if (angular.isDefined(window.editor) && angular.isDefined(data) && data !== window.editor.getValue()) {\n                    window.editor.setValue(data);\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('common.add.known.prefixes.error'));\n                return true;\n            });\n    }\n\n    function querySelected(query) {\n        const tabId = getExistingTabId(query);\n        $scope.toggleSampleQueries();\n\n        if ($scope.isTabChangeOk(false)) {\n            $scope.highlightNextTabChange = true;\n            if (!angular.isDefined(tabId)) {\n                $scope.addNewTab(null, query.name, query.body);\n            } else {\n                selectTab(tabId);\n            }\n        }\n    }\n\n    function getExistingTabId(query) {\n        let existingTabId = undefined;\n        $scope.tabsData.forEach(function (item) {\n            if (item.name === query.name && item.query === query.body) {\n                existingTabId = item.id;\n                return item;\n            }\n        });\n        return existingTabId;\n    }\n\n    function editQuery(query) {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/core/directives/queryeditor/templates/query-sample.html',\n            controller: 'QuerySampleModalCtrl',\n            resolve: {\n                data: function () {\n                    return {\n                        title: $translate.instant('query.editor.edit.saved.query', {name: query.name}),\n                        query: query,\n                        edit: true,\n                        okButtonText: $translate.instant('common.save.btn')\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.then(function (queryModal) {\n            const data = {\n                name: queryModal.name,\n                body: queryModal.body,\n                shared: queryModal.shared\n            };\n            if (query.name !== queryModal.name) {\n                SparqlRestService.addNewSavedQuery(data)\n                    .success(function () {\n                        $scope.deleteQueryHttp(query.name, true);\n                    })\n                    .error(function (error) {\n                        const msg = getError(error);\n                        toastr.error(msg, $translate.instant('query.editor.edit.saved.query.error'));\n                    });\n            } else {\n                SparqlRestService.editSavedQuery(data)\n                    .success(function () {\n                        $('#editQueryContainer').modal('hide');\n                        $scope.toggleSampleQueries();\n                        toastr.success($translate.instant('query.editor.edit.saved.query.success.msg', {name: query.name}));\n                    })\n                    .error(function (error) {\n                        const msg = getError(error);\n                        toastr.error(msg, $translate.instant('query.editor.edit.saved.query.error'));\n                    });\n            }\n        });\n    }\n\n    function deleteQueryHttp(savedQueryName, edit) {\n        SparqlRestService.deleteSavedQuery(savedQueryName)\n            .success(function () {\n                $scope.toggleSampleQueries();\n                if (!edit) {\n                    toastr.success($translate.instant('query.editor.delete.saved.query.success.msg', {savedQueryName: savedQueryName}));\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('query.editor.delete.saved.query.error'));\n            });\n    }\n\n    function deleteQuery(savedQueryName) {\n        ModalService.openSimpleModal({\n            title: $translate.instant('common.confirm'),\n            message: $translate.instant('query.editor.delete.saved.query.warning.msg', {savedQueryName: savedQueryName}),\n            warning: true\n        }).result\n            .then(function () {\n                $scope.deleteQueryHttp(savedQueryName);\n            });\n    }\n\n    function saveQueryHttp(query) {\n        SparqlRestService.addNewSavedQuery(query)\n            .success(function () {\n                toastr.success($translate.instant('query.editor.save.saved.query.success.msg', {name: query.name}));\n            })\n            .error(function (data, status) {\n                const msg = getError(data);\n                toastr.error(msg, $translate.instant('query.editor.create.saved.query.error'));\n                let queryExists = false;\n                if (status === 409) {\n                    queryExists = true;\n                }\n                query.query = query.body;\n                $scope.saveQuery(query, queryExists);\n            });\n    }\n\n    function saveQuery(query, queryExists) {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/core/directives/queryeditor/templates/query-sample.html',\n            controller: 'QuerySampleModalCtrl',\n            resolve: {\n                data: function () {\n                    return {\n                        title: $translate.instant('query.editor.create.saved.query.msg'),\n                        query: {name: query.name, body: query.query, shared: query.shared},\n                        edit: false,\n                        okButtonText: $translate.instant('common.create.btn'),\n                        queryExists: queryExists,\n                        existingQueryErrMsg: decodeHTML($translate.instant('query.sample.existing.query.warning', {name: query.name}))\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.then(function (query) {\n            $scope.saveQueryHttp(query);\n        }, function () {\n        });\n    }\n\n    // end of query operations\n\n    function showModal(modalSelector) {\n        return function (name, query, shared) {\n            $scope.savedQuery = {\n                name: name,\n                query: query || window.editor.getValue(),\n                shared: shared\n            };\n            $(modalSelector).modal('show');\n        };\n    }\n\n\n    // start of query tab operations\n    function findTabIndexByID(id) {\n        for (let i = 0; i < $scope.tabsData.length; i++) {\n            const tab = $scope.tabsData[i];\n            if (tab.id === id) {\n                return i;\n            }\n        }\n    }\n\n    function saveTab(id) {\n        const idx = findTabIndexByID(id);\n        // Tab was deleted, don't try to save it's state\n        if (idx === undefined) {\n            return {};\n        }\n        const tab = $scope.tabsData[idx];\n        //tab.query = window.editor.getValue();\n        $scope.saveQueryToLocal(tab);\n        return tab;\n    }\n\n    let maxID = LocalStorageAdapter.get(LSKeys.TABS_STATE_MAXID) || 1;\n\n    function addNewTab(callback, tabName, savedQuery) { // optional callback to call after tab has been added\n        if (!isTabChangeOk(true)) {\n            return;\n        }\n        let defaultTabConfig;\n        if (tabName || savedQuery) {\n            defaultTabConfig = {\n                id: \"1\",\n                name: tabName,\n                query: savedQuery,\n                inference: principal.appSettings.DEFAULT_INFERENCE,\n                sameAs: principal.appSettings.DEFAULT_SAMEAS\n            };\n        } else {\n            defaultTabConfig = {\n                id: \"1\",\n                name: '',\n                query: 'select * where { \\n' +\n                '\\t?s ?p ?o .\\n' +\n                '} limit 100 \\n',\n                inference: principal.appSettings.DEFAULT_INFERENCE,\n                sameAs: principal.appSettings.DEFAULT_SAMEAS\n            };\n        }\n\n        maxID++;\n        const newID = '' + maxID;\n        $scope.tabsData = $scope.tabs;\n\n        const newTab = defaultTabConfig;\n        newTab.id = newID;\n\n        $scope.tabsData.push(newTab);\n\n        LocalStorageAdapter.set(LSKeys.TABS_STATE_MAXID, maxID);\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabsData);\n        const callbackArgs = Array.prototype.slice.call(arguments, 1); // skip one argument, i.e. the callback itself\n        $timeout(function () {\n            $scope.$apply();\n            selectTab(newID);\n            if (callback) {\n                callback.apply(this, callbackArgs);\n            }\n        }, 0);\n        $scope.tabs = $scope.tabsData;\n    }\n\n    function loadTab(id) {\n        $scope.tabsData = LocalStorageAdapter.get(LSKeys.TABS_STATE) || [defaultTabConfig];\n\n        // find available tab\n        const idx = findTabIndexByID(id);\n        const tab = $scope.tabsData[idx];\n\n        if (tab.yasrData) {\n            setLoader(true, $translate.instant('query.editor.render.results.msg'), null, true);\n        }\n\n        // set query in editor available on the current tab\n        $timeout(function () {\n            if ($scope.currentQuery.query === '') {\n                $scope.currentQuery.query = \" \";\n            }\n            $timeout(function () {\n                window.editor.setValue($scope.currentQuery.query);\n                $scope.yasr.updateDownloadDropdown();\n                $scope.$broadcast('tabLoaded', $scope.currentQuery.id);\n\n                // set query results in query results sections after\n                // previous query execution. Yasr response rendering depends on the\n                // query type of window.editor!\n                $scope.yasr.options.output = tab.outputType; // this may be undefined, that's fine!\n                if (tab.yasrData) {\n                    if (tab.yasrData.customError) {\n                        // Our injected custom (not real HTTP) error\n                        $scope.yasr.results = {\n                            getException: function () {\n                                return tab.yasrData.customError;\n                            }\n                        };\n                        setLoader(false);\n                    } else {\n                        // Real YASR result\n                        $timeout(function () {\n                            $scope.setYasrResponse(tab.yasrData, tab.textStatus, tab.jqXhrOrErrorString);\n                            setLoader(false);\n                            if ($('.yasr_btnGroup li:nth-child(2)').hasClass(\"active\")) {\n                                $timeout(function () {\n                                    $('.yasr_btnGroup li:nth-child(2) a').get(0).click();\n                                }, 0);\n                            }\n                        }, 0);\n                    }\n                }\n            }, 0);\n        }, 0);\n\n\n        // persist current tab id in local storage\n        LocalStorageAdapter.set(LSKeys.TABS_STATE_CURRENT_ID, id);\n\n        $scope.currentQuery = tab;\n\n        $timeout(function () {\n            $scope.currentTabConfig = {};\n            $scope.currentTabConfig.queryType = tab.queryType;\n            $scope.currentTabConfig.resultsCount = tab.resultsCount;\n\n            $scope.currentTabConfig.offset = tab.offset;\n            $scope.currentTabConfig.allResultsCount = tab.allResultsCount;\n            $scope.currentTabConfig.allResultsCountExact = tab.allResultsCountExact;\n            $scope.currentTabConfig.page = tab.page;\n            $scope.currentTabConfig.pageSize = tab.pageSize;\n\n            $scope.currentTabConfig.timeFinished = tab.timeFinished;\n            $scope.currentTabConfig.timeTook = tab.timeTook;\n            $scope.currentTabConfig.sizeDelta = tab.sizeDelta;\n            $scope.currentTabConfig.customUpdateMessage = tab.customUpdateMessage;\n            $scope.currentTabConfig.errorMessage = tab.errorMessage;\n            $scope.currentTabConfig.warningMessage = tab.warningMessage;\n\n            $scope.$apply();\n        }, 0);\n\n        //Remove paddign of yasr so it will be aligned with sparql editor\n        $('#yasr').css('padding', '0');\n\n        if (!checkQueryIntervalId) {\n            checkQueryIntervalId = setInterval(showOrHideSaveAsDropDown, 200);\n        }\n        overrideSameAsInferenceAndNoCountIfNeeded();\n    }\n\n    function getQueryID(element) {\n        return $(element).attr('data-id');\n    }\n\n    function showOrHideSaveAsDropDown() {\n        // If selected tab has results and query in editor controller is invalid save as\n        // dropdown menu will be removed and on fixing query latter will be added\n        if ($scope.currentTabConfig.resultsCount >= 0) {\n            const $saveAsDropDown = $('.saveAsDropDown');\n            if ($saveAsDropDown.length > 0 && !window.editor.queryValid) {\n                yasr.header.find('.saveAsDropDown').remove();\n            } else if ($saveAsDropDown.length === 0 && window.editor.queryValid) {\n                yasr.updateDownloadDropdown();\n            }\n        }\n    }\n\n    function isTabChangeOk(isNew) {\n        if ($scope.queryIsRunning && !$scope.namespacesLoading) {\n            if (isNew) {\n                toastr.info($translate.instant('query.editor.new.tab.running.query.warning.msg'));\n            } else {\n                toastr.info($translate.instant('query.editor.tab.switching.running.query.warning.msg'));\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    // Raise this flag to provide visual feedback to the user the next time a tab changes\n    // (either manually or by the system). See GDB-1983.\n    $scope.highlightNextTabChange = false;\n    $scope.$on('tabAction', function (e, tabEvent) {\n        if (tabEvent.relatedTarget) {\n            // Cancel any highlight timer that might have been left by the last highlight\n            $timeout.cancel(tabEvent.relatedTarget.timer);\n            $(tabEvent.relatedTarget).css('color', '');\n\n            $scope.saveTab(getQueryID(tabEvent.relatedTarget));\n        }\n\n        $scope.loadTab(getQueryID(tabEvent.target));\n\n        // These arrays define how the tab change will be visually enhanced.\n        // colors contains the colors to set to the tab name,\n        // while times defines the times in milliseconds to keep each color.\n        // Once we cycle through the arrays we restore the default color.\n        const colors = ['var(--onto-orange)', '', 'var(--onto-orange)'];\n        const times = [400, 400, 400];\n        if ($scope.highlightNextTabChange) {\n            $scope.highlightNextTabChange = false;\n            let index = 0;\n            $(tabEvent.target).css('color', colors[index]);\n            const highlightFun = function () {\n                index++;\n                if (index < colors.length) {\n                    $(tabEvent.target).css('color', colors[index]);\n                    tabEvent.target.timer = $timeout(highlightFun, times[index]);\n                } else {\n                    $(tabEvent.target).css('color', '');\n                }\n            };\n            $timeout(highlightFun, times[index]);\n        }\n    });\n\n    $scope.$on('deleteAllexeptSelected', function (e, tabs) {\n        $scope.tabsData = tabs;\n        $scope.tabs = tabs;\n    });\n    // end of query tab operations\n\n    $scope.currentQuery = {};\n    // $scope.state = {};\n    $scope.showSampleQueries = false;\n    $scope.savedQuery = {};\n    $scope.sampleQueries = {};\n    $scope.editQueryModal = showModal('#editQueryContainer');\n    $scope.deleteQueryModal = showModal('#confirmDeleteContainer');\n    $scope.saveQueryModal = showModal('#saveQueryContainer');\n\n    $scope.getResultsDescription = function () {\n        let desc;\n        if ($scope.currentTabConfig.resultsCount === 0) {\n            desc = \"No results.\";\n        } else {\n            const currentPageEnd = ($scope.currentTabConfig.page - 1) * $scope.currentTabConfig.pageSize\n                + Math.min($scope.currentTabConfig.resultsCount, $scope.currentTabConfig.pageSize);\n            desc = $translate.instant('query.editor.showing.results.from.msg') + $filter('currency')($scope.currentTabConfig.offset, '', 0)\n                + $translate.instant('query.editor.to') + $filter('currency')(currentPageEnd, '', 0);\n            if ($scope.currentTabConfig.allResultsCount > 0) {\n                // Unsure total results count \"of at least\" happens if counting timed out or\n                // counting was disabled and we got at least $pageSize + 1 results for the current page.\n                // It may reset become exact when we navigate and reach the end of results.\n                desc += $translate.instant(($scope.currentTabConfig.allResultsCountExact\n                    ? 'query.editor.of' : 'query.editor.of.at.least'));\n                desc += $filter('currency')($scope.currentTabConfig.allResultsCount, '', 0);\n            }\n            desc += \".\";\n        }\n\n        return desc;\n    };\n\n    $scope.getUpdateDescription = function () {\n        if ($scope.currentTabConfig.customUpdateMessage) {\n            return $translate.instant($scope.currentTabConfig.customUpdateMessage.msg, {name: $scope.currentTabConfig.customUpdateMessage.name});\n        } else if ($scope.currentTabConfig.sizeDelta === undefined) {\n            return '';\n        } else if ($scope.currentTabConfig.sizeDelta < 0) {\n            return $translate.instant('yasr.removed.statements.result.msg', {sizeDelta: Math.abs($scope.currentTabConfig.sizeDelta)});\n        } else if ($scope.currentTabConfig.sizeDelta > 0) {\n            return $translate.instant('yasr.added.statements.result.msg', {sizeDelta: $scope.currentTabConfig.sizeDelta});\n        } else {\n            return $translate.instant('yasr.statements.no.change.msg');\n        }\n    };\n\n    $scope.getStaleWarningMessage = function () {\n        const secondsAgo = Math.round((Date.now() - $scope.currentTabConfig.timeFinished) / 60000) * 60;\n        if (secondsAgo >= 3600) { // must be at least an hour\n            return $translate.instant('yasr.stale.result.msg', {secondsAgo: $scope.getHumanReadableSeconds(secondsAgo)});\n        }\n    };\n\n    const resize = function () {\n        // $scope.fixSizesOnHorizontalViewModeSwitch();\n    };\n\n    angular.element($window).bind('resize', resize);\n\n    $scope.$on('$destroy', function () {\n        angular.element($window).unbind('resize', resize);\n    });\n\n    /**\n     * In case of Ontop repository, sameAs, inference and nocount are\n     * overridden to true and #sameAs and #inference buttons are disabled, In case of FedX repo nocount is overridden\n     */\n    function overrideSameAsInferenceAndNoCountIfNeeded() {\n        const isOntop = $repositories.isActiveRepoOntopType();\n        const isFedX = $repositories.isActiveRepoFedXType();\n        handleSameAsAndInferenceBtns(isOntop);\n\n        $scope.nocount = (isOntop || isFedX) ? true : !principal.appSettings.EXECUTE_COUNT;\n        if (isOntop) {\n            $scope.currentQuery.inference = true;\n            $scope.currentQuery.sameAs = true;\n        }\n    }\n\n    function handleSameAsAndInferenceBtns(isOntop) {\n        const sameAsBtn = document.getElementById('sameAs');\n        const inferenceBtn = document.getElementById('inference');\n\n        if (sameAsBtn) {\n            sameAsBtn.disabled = !!isOntop;\n        }\n\n        if (inferenceBtn) {\n            inferenceBtn.disabled = !!isOntop;\n        }\n    }\n\n    // The sameAs is meaningless without inference.\n    // Set its value to false and disable button\n    function shouldDisableSameAs() {\n        // don't try to override sameAs if repository is Ontop type\n        if ($repositories.isActiveRepoOntopType()) {\n            return;\n        }\n        const sameAsBtn = document.getElementById('sameAs');\n        if (sameAsBtn && !$scope.currentQuery.inference && !sameAsBtn.disabled) {\n            sameAsBtn.disabled = true;\n            $scope.currentQuery.sameAs = false;\n        } else if ($scope.currentQuery.inference && sameAsBtn.disabled) {\n            sameAsBtn.removeAttribute('disabled');\n            $scope.currentQuery.sameAs = principal.appSettings.DEFAULT_SAMEAS;\n        }\n    }\n}\n\nQuerySampleModalCtrl.$inject = ['$scope', '$modalInstance', 'data', '$sce'];\n\nfunction QuerySampleModalCtrl($scope, $modalInstance, data, $sce) {\n    if (data.queryExists) {\n        $scope.queryExists = true;\n    }\n    $scope.query = angular.copy(data.query);\n    $scope.title = data.title;\n    $scope.edit = data.edit;\n    $scope.okButtonText = data.okButtonText;\n   $scope.existingQueryErrMsg = $sce.trustAsHtml(data.existingQueryErrMsg);\n    $scope.ok = function () {\n        if ($scope.form.$valid) {\n            $modalInstance.close($scope.query);\n        }\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n"],"sourceRoot":""}